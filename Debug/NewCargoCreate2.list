
NewCargoCreate2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  0800b878  0800b878  0000c878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1bc  0800c1bc  0000e238  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1bc  0800c1bc  0000d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1c4  0800c1c4  0000e238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1c4  0800c1c4  0000d1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1c8  0800c1c8  0000d1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800c1cc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000238  0800c404  0000e238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  0800c404  0000ebf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dbf  00000000  00000000  0000e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d0  00000000  00000000  0001f027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000223f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce7  00000000  00000000  00023498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019434  00000000  00000000  0002417f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001554a  00000000  00000000  0003d5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfd4  00000000  00000000  00052afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005838  00000000  00000000  000dfb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e534c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b85c 	.word	0x0800b85c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800b85c 	.word	0x0800b85c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b9a0 	b.w	8000f70 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f83c 	bl	8000cb4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <__aeabi_d2ulz+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_dmul>
 8000c86:	f7ff ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc52 	bl	8000534 <__aeabi_ui2d>
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f7ff fcc8 	bl	8000628 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fb0a 	bl	80002b8 <__aeabi_dsub>
 8000ca4:	f7ff ff98 	bl	8000bd8 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <__udivmoddi4>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	9d08      	ldr	r5, [sp, #32]
 8000cba:	460c      	mov	r4, r1
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d14e      	bne.n	8000d5e <__udivmoddi4+0xaa>
 8000cc0:	4694      	mov	ip, r2
 8000cc2:	458c      	cmp	ip, r1
 8000cc4:	4686      	mov	lr, r0
 8000cc6:	fab2 f282 	clz	r2, r2
 8000cca:	d962      	bls.n	8000d92 <__udivmoddi4+0xde>
 8000ccc:	b14a      	cbz	r2, 8000ce2 <__udivmoddi4+0x2e>
 8000cce:	f1c2 0320 	rsb	r3, r2, #32
 8000cd2:	4091      	lsls	r1, r2
 8000cd4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f f68c 	uxth.w	r6, ip
 8000cea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb04 f106 	mul.w	r1, r4, r6
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x64>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0a:	f080 8112 	bcs.w	8000f32 <__udivmoddi4+0x27e>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 810f 	bls.w	8000f32 <__udivmoddi4+0x27e>
 8000d14:	3c02      	subs	r4, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a59      	subs	r1, r3, r1
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d22:	fb07 1110 	mls	r1, r7, r0, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb00 f606 	mul.w	r6, r0, r6
 8000d2e:	429e      	cmp	r6, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x94>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3a:	f080 80fc 	bcs.w	8000f36 <__udivmoddi4+0x282>
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	f240 80f9 	bls.w	8000f36 <__udivmoddi4+0x282>
 8000d44:	4463      	add	r3, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	1b9b      	subs	r3, r3, r6
 8000d4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa6>
 8000d52:	40d3      	lsrs	r3, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xba>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb4>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa6>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x150>
 8000d76:	42a3      	cmp	r3, r4
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xcc>
 8000d7a:	4290      	cmp	r0, r2
 8000d7c:	f0c0 80f0 	bcc.w	8000f60 <__udivmoddi4+0x2ac>
 8000d80:	1a86      	subs	r6, r0, r2
 8000d82:	eb64 0303 	sbc.w	r3, r4, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d0e6      	beq.n	8000d5a <__udivmoddi4+0xa6>
 8000d8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d90:	e7e3      	b.n	8000d5a <__udivmoddi4+0xa6>
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x204>
 8000d98:	eba1 040c 	sub.w	r4, r1, ip
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	2101      	movs	r1, #1
 8000da6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000daa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dae:	fb08 4416 	mls	r4, r8, r6, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb07 f006 	mul.w	r0, r7, r6
 8000dba:	4298      	cmp	r0, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x11c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x11a>
 8000dc8:	4298      	cmp	r0, r3
 8000dca:	f200 80cd 	bhi.w	8000f68 <__udivmoddi4+0x2b4>
 8000dce:	4626      	mov	r6, r4
 8000dd0:	1a1c      	subs	r4, r3, r0
 8000dd2:	fa1f f38e 	uxth.w	r3, lr
 8000dd6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dda:	fb08 4410 	mls	r4, r8, r0, r4
 8000dde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de2:	fb00 f707 	mul.w	r7, r0, r7
 8000de6:	429f      	cmp	r7, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x148>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x146>
 8000df4:	429f      	cmp	r7, r3
 8000df6:	f200 80b0 	bhi.w	8000f5a <__udivmoddi4+0x2a6>
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	1bdb      	subs	r3, r3, r7
 8000dfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x9c>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e14:	fa04 f301 	lsl.w	r3, r4, r1
 8000e18:	ea43 030c 	orr.w	r3, r3, ip
 8000e1c:	40f4      	lsrs	r4, r6
 8000e1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e22:	0c38      	lsrs	r0, r7, #16
 8000e24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e28:	fbb4 fef0 	udiv	lr, r4, r0
 8000e2c:	fa1f fc87 	uxth.w	ip, r7
 8000e30:	fb00 441e 	mls	r4, r0, lr, r4
 8000e34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e38:	fb0e f90c 	mul.w	r9, lr, ip
 8000e3c:	45a1      	cmp	r9, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d90a      	bls.n	8000e5a <__udivmoddi4+0x1a6>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4a:	f080 8084 	bcs.w	8000f56 <__udivmoddi4+0x2a2>
 8000e4e:	45a1      	cmp	r9, r4
 8000e50:	f240 8081 	bls.w	8000f56 <__udivmoddi4+0x2a2>
 8000e54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	eba4 0409 	sub.w	r4, r4, r9
 8000e5e:	fa1f f983 	uxth.w	r9, r3
 8000e62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e66:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x1d2>
 8000e76:	193c      	adds	r4, r7, r4
 8000e78:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e7c:	d267      	bcs.n	8000f4e <__udivmoddi4+0x29a>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d965      	bls.n	8000f4e <__udivmoddi4+0x29a>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e8e:	eba4 040c 	sub.w	r4, r4, ip
 8000e92:	429c      	cmp	r4, r3
 8000e94:	46ce      	mov	lr, r9
 8000e96:	469c      	mov	ip, r3
 8000e98:	d351      	bcc.n	8000f3e <__udivmoddi4+0x28a>
 8000e9a:	d04e      	beq.n	8000f3a <__udivmoddi4+0x286>
 8000e9c:	b155      	cbz	r5, 8000eb4 <__udivmoddi4+0x200>
 8000e9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	40cb      	lsrs	r3, r1
 8000eac:	431e      	orrs	r6, r3
 8000eae:	40cc      	lsrs	r4, r1
 8000eb0:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e750      	b.n	8000d5a <__udivmoddi4+0xa6>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ec8:	4094      	lsls	r4, r2
 8000eca:	430c      	orrs	r4, r1
 8000ecc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed4:	fa1f f78c 	uxth.w	r7, ip
 8000ed8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000edc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee0:	0c23      	lsrs	r3, r4, #16
 8000ee2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee6:	fb00 f107 	mul.w	r1, r0, r7
 8000eea:	4299      	cmp	r1, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x24c>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ef6:	d22c      	bcs.n	8000f52 <__udivmoddi4+0x29e>
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	d92a      	bls.n	8000f52 <__udivmoddi4+0x29e>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f08:	fb08 3311 	mls	r3, r8, r1, r3
 8000f0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f10:	fb01 f307 	mul.w	r3, r1, r7
 8000f14:	42a3      	cmp	r3, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x276>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f20:	d213      	bcs.n	8000f4a <__udivmoddi4+0x296>
 8000f22:	42a3      	cmp	r3, r4
 8000f24:	d911      	bls.n	8000f4a <__udivmoddi4+0x296>
 8000f26:	3902      	subs	r1, #2
 8000f28:	4464      	add	r4, ip
 8000f2a:	1ae4      	subs	r4, r4, r3
 8000f2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f30:	e739      	b.n	8000da6 <__udivmoddi4+0xf2>
 8000f32:	4604      	mov	r4, r0
 8000f34:	e6f0      	b.n	8000d18 <__udivmoddi4+0x64>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e706      	b.n	8000d48 <__udivmoddi4+0x94>
 8000f3a:	45c8      	cmp	r8, r9
 8000f3c:	d2ae      	bcs.n	8000e9c <__udivmoddi4+0x1e8>
 8000f3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7a8      	b.n	8000e9c <__udivmoddi4+0x1e8>
 8000f4a:	4631      	mov	r1, r6
 8000f4c:	e7ed      	b.n	8000f2a <__udivmoddi4+0x276>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	e799      	b.n	8000e86 <__udivmoddi4+0x1d2>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e7d4      	b.n	8000f00 <__udivmoddi4+0x24c>
 8000f56:	46d6      	mov	lr, sl
 8000f58:	e77f      	b.n	8000e5a <__udivmoddi4+0x1a6>
 8000f5a:	4463      	add	r3, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e74d      	b.n	8000dfc <__udivmoddi4+0x148>
 8000f60:	4606      	mov	r6, r0
 8000f62:	4623      	mov	r3, r4
 8000f64:	4608      	mov	r0, r1
 8000f66:	e70f      	b.n	8000d88 <__udivmoddi4+0xd4>
 8000f68:	3e02      	subs	r6, #2
 8000f6a:	4463      	add	r3, ip
 8000f6c:	e730      	b.n	8000dd0 <__udivmoddi4+0x11c>
 8000f6e:	bf00      	nop

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f001 fee3 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f8bb 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 f9b7 	bl	80012f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f86:	f000 f961 	bl	800124c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f8a:	f000 f989 	bl	80012a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f8e:	f000 f927 	bl	80011e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  WIFI_OPEN_RECEIVE();
 8000f92:	f004 fb05 	bl	80055a0 <WIFI_OPEN_RECEIVE>
  BLE_RECV_INIT();
 8000f96:	f000 fceb 	bl	8001970 <BLE_RECV_INIT>
  DIG_Init();
 8000f9a:	f000 ff59 	bl	8001e50 <DIG_Init>
  PCD_Init();
 8000f9e:	f001 fdd8 	bl	8002b52 <PCD_Init>
  Get_Maopi();
 8000fa2:	f001 f809 	bl	8001fb8 <Get_Maopi>
  LED_Red_On();
 8000fa6:	f001 fa00 	bl	80023aa <LED_Red_On>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (BLE_GetStatus() == BLE_WAITING_FOR_CONNECTION);
 8000faa:	bf00      	nop
 8000fac:	f000 fd7e 	bl	8001aac <BLE_GetStatus>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d0fa      	beq.n	8000fac <main+0x38>
	  while (!work) {
 8000fb6:	e031      	b.n	800101c <main+0xa8>
		if (!WIFI_INIT() || !HUAWEI_INIT()) {
 8000fb8:	f004 fdae 	bl	8005b18 <WIFI_INIT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <main+0x58>
 8000fc2:	f001 f845 	bl	8002050 <HUAWEI_INIT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d115      	bne.n	8000ff8 <main+0x84>
			BLE_ChangeStatus(BLE_CONNECTION_FAILED);
 8000fcc:	2005      	movs	r0, #5
 8000fce:	f000 fd5b 	bl	8001a88 <BLE_ChangeStatus>
			BLE_SET_STATUS();
 8000fd2:	f000 fd3f 	bl	8001a54 <BLE_SET_STATUS>
			BUZZER_Fail();
 8000fd6:	f000 fe20 	bl	8001c1a <BUZZER_Fail>
			LED_CheckAndChange(work, waiting);
 8000fda:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <main+0x168>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <main+0x16c>)
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f9fb 	bl	80023e0 <LED_CheckAndChange>
			while (BLE_GetStatus() == BLE_CONNECTION_FAILED);
 8000fea:	bf00      	nop
 8000fec:	f000 fd5e 	bl	8001aac <BLE_GetStatus>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d0fa      	beq.n	8000fec <main+0x78>
			continue;
 8000ff6:	e011      	b.n	800101c <main+0xa8>
		}
		work = 1;
 8000ff8:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <main+0x168>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
		LED_CheckAndChange(work, waiting);
 8000ffe:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <main+0x168>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4a37      	ldr	r2, [pc, #220]	@ (80010e0 <main+0x16c>)
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f001 f9e9 	bl	80023e0 <LED_CheckAndChange>
		BUZZER_Success();
 800100e:	f000 fdfc 	bl	8001c0a <BUZZER_Success>
		BLE_ChangeStatus(BLE_CONNECTED);
 8001012:	2002      	movs	r0, #2
 8001014:	f000 fd38 	bl	8001a88 <BLE_ChangeStatus>
		BLE_SET_STATUS();
 8001018:	f000 fd1c 	bl	8001a54 <BLE_SET_STATUS>
	  while (!work) {
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <main+0x168>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0c9      	beq.n	8000fb8 <main+0x44>
	  }
	  LED_CheckAndChange(work, waiting);
 8001024:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <main+0x168>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4a2d      	ldr	r2, [pc, #180]	@ (80010e0 <main+0x16c>)
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f9d6 	bl	80023e0 <LED_CheckAndChange>
	  Get_Weight();
 8001034:	f000 ffd0 	bl	8001fd8 <Get_Weight>
	  DIG_ShowWeight(Weight_Shiwu);
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <main+0x170>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fe99 	bl	8001d74 <DIG_ShowWeight>
	  if (RFID_GET_UUID(uid) && !waiting) {
 8001042:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <main+0x174>)
 8001044:	f001 fe1a 	bl	8002c7c <RFID_GET_UUID>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d019      	beq.n	8001082 <main+0x10e>
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <main+0x16c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d115      	bne.n	8001082 <main+0x10e>
		  char* data = DATA_Get_CargoCreate(uid, Weight_Shiwu);
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <main+0x170>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa6a 	bl	8000534 <__aeabi_ui2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	ec43 2b10 	vmov	d0, r2, r3
 8001068:	481f      	ldr	r0, [pc, #124]	@ (80010e8 <main+0x174>)
 800106a:	f000 ff0d 	bl	8001e88 <DATA_Get_CargoCreate>
 800106e:	6078      	str	r0, [r7, #4]
		  if (HUAWEI_SEND_MESSAGE(data)) waiting = 1;
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f001 f93a 	bl	80022ea <HUAWEI_SEND_MESSAGE>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <main+0x10e>
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <main+0x16c>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
	  }
	  msg_is_checked = 1;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <main+0x178>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
	  json = MESSAGE_MERGER(&requestID);
 8001088:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <main+0x17c>)
 800108a:	f001 f9ed 	bl	8002468 <MESSAGE_MERGER>
 800108e:	4603      	mov	r3, r0
 8001090:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <main+0x180>)
 8001092:	6013      	str	r3, [r2, #0]
	  if (json != NULL) {
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <main+0x180>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00e      	beq.n	80010ba <main+0x146>
		  uint8_t status = MESSAGE_Analyse(json);
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <main+0x180>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fb43 	bl	800272c <MESSAGE_Analyse>
 80010a6:	4603      	mov	r3, r0
 80010a8:	70fb      	strb	r3, [r7, #3]
		  if (status) {
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <main+0x142>
			  BUZZER_Success();
 80010b0:	f000 fdab 	bl	8001c0a <BUZZER_Success>
 80010b4:	e001      	b.n	80010ba <main+0x146>
		  } else {
			  BUZZER_Fail();
 80010b6:	f000 fdb0 	bl	8001c1a <BUZZER_Fail>
		  }
	  }
	  cJSON_Delete(json);
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <main+0x180>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f004 fefe 	bl	8005ec0 <cJSON_Delete>
	  free(requestID);
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <main+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 ff2d 	bl	8007f28 <free>
	  requestID = NULL;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <main+0x17c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
	  MESSAGE_CHECK_AND_CLEAR();
 80010d4:	f001 f99e 	bl	8002414 <MESSAGE_CHECK_AND_CLEAR>
	  while (BLE_GetStatus() == BLE_WAITING_FOR_CONNECTION);
 80010d8:	e767      	b.n	8000faa <main+0x36>
 80010da:	bf00      	nop
 80010dc:	2000033c 	.word	0x2000033c
 80010e0:	20000351 	.word	0x20000351
 80010e4:	20000754 	.word	0x20000754
 80010e8:	20000348 	.word	0x20000348
 80010ec:	200017fc 	.word	0x200017fc
 80010f0:	20000340 	.word	0x20000340
 80010f4:	20000344 	.word	0x20000344

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	@ 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f007 ff5b 	bl	8008fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <SystemClock_Config+0xe0>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a2c      	ldr	r2, [pc, #176]	@ (80011d8 <SystemClock_Config+0xe0>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <SystemClock_Config+0xe0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <SystemClock_Config+0xe4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001144:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <SystemClock_Config+0xe4>)
 8001146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <SystemClock_Config+0xe4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800116c:	2308      	movs	r3, #8
 800116e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001170:	2354      	movs	r3, #84	@ 0x54
 8001172:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f9cf 	bl	8003524 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800118c:	f000 f9a8 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2102      	movs	r1, #2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fc31 	bl	8003a14 <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b8:	f000 f992 	bl	80014e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f002 fd0d 	bl	8003be0 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2001      	movs	r0, #1
 80011cc:	f002 fd08 	bl	8003be0 <HAL_RCC_MCOConfig>
}
 80011d0:	bf00      	nop
 80011d2:	3750      	adds	r7, #80	@ 0x50
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <MX_SPI1_Init+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_SPI1_Init+0x64>)
 800120c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001210:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001214:	2228      	movs	r2, #40	@ 0x28
 8001216:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_SPI1_Init+0x64>)
 800122c:	220a      	movs	r2, #10
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001232:	f002 fe37 	bl	8003ea4 <HAL_SPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800123c:	f000 f950 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000254 	.word	0x20000254
 8001248:	40013000 	.word	0x40013000

0800124c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART1_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001284:	f003 f91c 	bl	80044c0 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f927 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200002ac 	.word	0x200002ac
 800129c:	40011000 	.word	0x40011000

080012a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <MX_USART2_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d8:	f003 f8f2 	bl	80044c0 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f8fd 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002f4 	.word	0x200002f4
 80012f0:	40004400 	.word	0x40004400

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a62      	ldr	r2, [pc, #392]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b60      	ldr	r3, [pc, #384]	@ (800149c <MX_GPIO_Init+0x1a8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b5c      	ldr	r3, [pc, #368]	@ (800149c <MX_GPIO_Init+0x1a8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a5b      	ldr	r2, [pc, #364]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b59      	ldr	r3, [pc, #356]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b55      	ldr	r3, [pc, #340]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a54      	ldr	r2, [pc, #336]	@ (800149c <MX_GPIO_Init+0x1a8>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b52      	ldr	r3, [pc, #328]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b4e      	ldr	r3, [pc, #312]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a4d      	ldr	r2, [pc, #308]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b4b      	ldr	r3, [pc, #300]	@ (800149c <MX_GPIO_Init+0x1a8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_SDA_Pin|ESP_RST_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001380:	4847      	ldr	r0, [pc, #284]	@ (80014a0 <MX_GPIO_Init+0x1ac>)
 8001382:	f002 f8b5 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HX_SCK_Pin|RC522_RST_Pin|LED_GREEN_Pin|LED_YELLOW_Pin
 8001386:	2200      	movs	r2, #0
 8001388:	f247 01e6 	movw	r1, #28902	@ 0x70e6
 800138c:	4845      	ldr	r0, [pc, #276]	@ (80014a4 <MX_GPIO_Init+0x1b0>)
 800138e:	f002 f8af 	bl	80034f0 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|DIG_CLK_Pin|DIG_CS_Pin|DIG_DIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	4844      	ldr	r0, [pc, #272]	@ (80014a8 <MX_GPIO_Init+0x1b4>)
 8001398:	f002 f8aa 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_SGN_GPIO_Port, BUZ_SGN_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	4840      	ldr	r0, [pc, #256]	@ (80014a4 <MX_GPIO_Init+0x1b0>)
 80013a2:	f002 f8a5 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RC522_SDA_Pin ESP_RST_Pin */
  GPIO_InitStruct.Pin = RC522_SDA_Pin|ESP_RST_Pin;
 80013a6:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4838      	ldr	r0, [pc, #224]	@ (80014a0 <MX_GPIO_Init+0x1ac>)
 80013c0:	f001 fefa 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX_DAT_Pin */
  GPIO_InitStruct.Pin = HX_DAT_Pin;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX_DAT_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4833      	ldr	r0, [pc, #204]	@ (80014a4 <MX_GPIO_Init+0x1b0>)
 80013d8:	f001 feee 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HX_SCK_Pin RC522_RST_Pin DIG_CLK_Pin DIG_CS_Pin
                           DIG_DIN_Pin */
  GPIO_InitStruct.Pin = HX_SCK_Pin|RC522_RST_Pin|DIG_CLK_Pin|DIG_CS_Pin
 80013dc:	23e6      	movs	r3, #230	@ 0xe6
 80013de:	617b      	str	r3, [r7, #20]
                          |DIG_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	482c      	ldr	r0, [pc, #176]	@ (80014a4 <MX_GPIO_Init+0x1b0>)
 80013f4:	f001 fee0 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 80013f8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4824      	ldr	r0, [pc, #144]	@ (80014a4 <MX_GPIO_Init+0x1b0>)
 8001412:	f001 fed1 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	481e      	ldr	r0, [pc, #120]	@ (80014a8 <MX_GPIO_Init+0x1b4>)
 800142e:	f001 fec3 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <MX_GPIO_Init+0x1b4>)
 8001450:	f001 feb2 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <MX_GPIO_Init+0x1ac>)
 8001472:	f001 fea1 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_SGN_Pin */
  GPIO_InitStruct.Pin = BUZ_SGN_Pin;
 8001476:	2310      	movs	r3, #16
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_SGN_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <MX_GPIO_Init+0x1b0>)
 800148e:	f001 fe93 	bl	80031b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	@ 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800

080014ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_UART_RxCpltCallback+0x2c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d102      	bne.n	80014c2 <HAL_UART_RxCpltCallback+0x16>
		WIFI_CALLBACK();
 80014bc:	f004 fb52 	bl	8005b64 <WIFI_CALLBACK>
	else if (huart == &huart2)
		BLE_CALLBACK();
}
 80014c0:	e005      	b.n	80014ce <HAL_UART_RxCpltCallback+0x22>
	else if (huart == &huart2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_UART_RxCpltCallback+0x30>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_UART_RxCpltCallback+0x22>
		BLE_CALLBACK();
 80014ca:	f000 fafb 	bl	8001ac4 <BLE_CALLBACK>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200002ac 	.word	0x200002ac
 80014dc:	200002f4 	.word	0x200002f4

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <Error_Handler+0x8>

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_SPI_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12b      	bne.n	80015b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001568:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_SPI_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RC522_SCK_Pin|RC522_MISO_Pin|RC522_MOSI_Pin;
 8001596:	23e0      	movs	r3, #224	@ 0xe0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a6:	2305      	movs	r3, #5
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <HAL_SPI_MspInit+0x8c>)
 80015b2:	f001 fe01 	bl	80031b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40013000 	.word	0x40013000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	@ 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a3a      	ldr	r2, [pc, #232]	@ (80016d4 <HAL_UART_MspInit+0x108>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d135      	bne.n	800165a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a38      	ldr	r2, [pc, #224]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001626:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001638:	2307      	movs	r3, #7
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4826      	ldr	r0, [pc, #152]	@ (80016dc <HAL_UART_MspInit+0x110>)
 8001644:	f001 fdb8 	bl	80031b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2025      	movs	r0, #37	@ 0x25
 800164e:	f001 fcea 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001652:	2025      	movs	r0, #37	@ 0x25
 8001654:	f001 fd03 	bl	800305e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001658:	e038      	b.n	80016cc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a20      	ldr	r2, [pc, #128]	@ (80016e0 <HAL_UART_MspInit+0x114>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d133      	bne.n	80016cc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	4a1a      	ldr	r2, [pc, #104]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001672:	6413      	str	r3, [r2, #64]	@ 0x40
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_UART_MspInit+0x10c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800169c:	230c      	movs	r3, #12
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ac:	2307      	movs	r3, #7
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4809      	ldr	r0, [pc, #36]	@ (80016dc <HAL_UART_MspInit+0x110>)
 80016b8:	f001 fd7e 	bl	80031b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2026      	movs	r0, #38	@ 0x26
 80016c2:	f001 fcb0 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c6:	2026      	movs	r0, #38	@ 0x26
 80016c8:	f001 fcc9 	bl	800305e <HAL_NVIC_EnableIRQ>
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	@ 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40004400 	.word	0x40004400

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <NMI_Handler+0x4>

080016ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <MemManage_Handler+0x4>

080016fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <UsageFault_Handler+0x4>

0800170c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173a:	f001 fb55 	bl	8002de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <USART1_IRQHandler+0x10>)
 800174a:	f002 ffb9 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002ac 	.word	0x200002ac

08001758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <USART2_IRQHandler+0x10>)
 800175e:	f002 ffaf 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002f4 	.word	0x200002f4

0800176c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_kill>:

int _kill(int pid, int sig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001786:	f007 fcb1 	bl	80090ec <__errno>
 800178a:	4603      	mov	r3, r0
 800178c:	2216      	movs	r2, #22
 800178e:	601a      	str	r2, [r3, #0]
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_exit>:

void _exit (int status)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffe7 	bl	800177c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ae:	bf00      	nop
 80017b0:	e7fd      	b.n	80017ae <_exit+0x12>

080017b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e00a      	b.n	80017da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c4:	f3af 8000 	nop.w
 80017c8:	4601      	mov	r1, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	60ba      	str	r2, [r7, #8]
 80017d0:	b2ca      	uxtb	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbf0      	blt.n	80017c4 <_read+0x12>
  }

  return len;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e009      	b.n	8001812 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf1      	blt.n	80017fe <_write+0x12>
  }
  return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_close>:

int _close(int file)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800184c:	605a      	str	r2, [r3, #4]
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_isatty>:

int _isatty(int file)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f007 fc16 	bl	80090ec <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20010000 	.word	0x20010000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000354 	.word	0x20000354
 80018f4:	20001bf8 	.word	0x20001bf8

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001954 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001920:	f7ff ffea 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	@ (800195c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	@ (8001968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194a:	f007 fbd5 	bl	80090f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7ff fb11 	bl	8000f74 <main>
  bx  lr    
 8001952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001954:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001960:	0800c1cc 	.word	0x0800c1cc
  ldr r2, =_sbss
 8001964:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001968:	20001bf4 	.word	0x20001bf4

0800196c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC_IRQHandler>
	...

08001970 <BLE_RECV_INIT>:
cJSON* lastJson;

BLE_Status status = BLE_WAITING_FOR_CONNECTION;


uint8_t BLE_RECV_INIT() {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)BLE_buffer, 1) != HAL_OK) return 0;
 8001974:	2201      	movs	r2, #1
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <BLE_RECV_INIT+0x28>)
 8001978:	4808      	ldr	r0, [pc, #32]	@ (800199c <BLE_RECV_INIT+0x2c>)
 800197a:	f002 fe7c 	bl	8004676 <HAL_UART_Receive_IT>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <BLE_RECV_INIT+0x18>
 8001984:	2300      	movs	r3, #0
 8001986:	e005      	b.n	8001994 <BLE_RECV_INIT+0x24>
	BLE_SET_STATUS(status);
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <BLE_RECV_INIT+0x30>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f861 	bl	8001a54 <BLE_SET_STATUS>
	return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000358 	.word	0x20000358
 800199c:	200002f4 	.word	0x200002f4
 80019a0:	20000004 	.word	0x20000004

080019a4 <BLE_INTERFACE_COMMAND>:

uint8_t BLE_INTERFACE_COMMAND() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	cJSON* root = cJSON_Parse(json_data);
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <BLE_INTERFACE_COMMAND+0x94>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fa9a 	bl	8006ee8 <cJSON_Parse>
 80019b4:	6078      	str	r0, [r7, #4]
	free(json_data);
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <BLE_INTERFACE_COMMAND+0x94>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f006 fab4 	bl	8007f28 <free>
	if (root == NULL) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <BLE_INTERFACE_COMMAND+0x36>
		status = BLE_FATAL_ERROR;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <BLE_INTERFACE_COMMAND+0x98>)
 80019c8:	2206      	movs	r2, #6
 80019ca:	701a      	strb	r2, [r3, #0]
		BLE_SET_STATUS();
 80019cc:	f000 f842 	bl	8001a54 <BLE_SET_STATUS>
		cJSON_Delete(root);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f004 fa75 	bl	8005ec0 <cJSON_Delete>
		return 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e02a      	b.n	8001a30 <BLE_INTERFACE_COMMAND+0x8c>
	}
	cJSON_Delete(lastJson);
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <BLE_INTERFACE_COMMAND+0x9c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 fa6e 	bl	8005ec0 <cJSON_Delete>
	deviceWifiStruct.ssid = cJSON_GetStringValue(cJSON_GetObjectItemCaseSensitive(root, "wifi_ssid"));
 80019e4:	4917      	ldr	r1, [pc, #92]	@ (8001a44 <BLE_INTERFACE_COMMAND+0xa0>)
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f006 f8b2 	bl	8007b50 <cJSON_GetObjectItemCaseSensitive>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f9aa 	bl	8005d48 <cJSON_GetStringValue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <BLE_INTERFACE_COMMAND+0xa4>)
 80019f8:	6013      	str	r3, [r2, #0]
	deviceWifiStruct.password = cJSON_GetStringValue(cJSON_GetObjectItemCaseSensitive(root, "wifi_password"));
 80019fa:	4914      	ldr	r1, [pc, #80]	@ (8001a4c <BLE_INTERFACE_COMMAND+0xa8>)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f006 f8a7 	bl	8007b50 <cJSON_GetObjectItemCaseSensitive>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 f99f 	bl	8005d48 <cJSON_GetStringValue>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a48 <BLE_INTERFACE_COMMAND+0xa4>)
 8001a0e:	6053      	str	r3, [r2, #4]
	USER_SetUser(cJSON_GetStringValue(cJSON_GetObjectItemCaseSensitive(root, "user")));
 8001a10:	490f      	ldr	r1, [pc, #60]	@ (8001a50 <BLE_INTERFACE_COMMAND+0xac>)
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f006 f89c 	bl	8007b50 <cJSON_GetObjectItemCaseSensitive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f994 	bl	8005d48 <cJSON_GetStringValue>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fda2 	bl	800556c <USER_SetUser>
	lastJson = root;
 8001a28:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <BLE_INTERFACE_COMMAND+0x9c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
	return 1;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000744 	.word	0x20000744
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	20000748 	.word	0x20000748
 8001a44:	0800b878 	.word	0x0800b878
 8001a48:	2000005c 	.word	0x2000005c
 8001a4c:	0800b884 	.word	0x0800b884
 8001a50:	0800b894 	.word	0x0800b894

08001a54 <BLE_SET_STATUS>:

uint8_t BLE_SET_STATUS() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
    uint8_t status_to_send = (uint8_t)status;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <BLE_SET_STATUS+0x2c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
    if (HAL_UART_Transmit(&huart2, &status_to_send, sizeof(status_to_send), 50) != HAL_OK) {
 8001a60:	1df9      	adds	r1, r7, #7
 8001a62:	2332      	movs	r3, #50	@ 0x32
 8001a64:	2201      	movs	r2, #1
 8001a66:	4807      	ldr	r0, [pc, #28]	@ (8001a84 <BLE_SET_STATUS+0x30>)
 8001a68:	f002 fd7a 	bl	8004560 <HAL_UART_Transmit>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <BLE_SET_STATUS+0x22>
        return 0;  // 发送失败
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <BLE_SET_STATUS+0x24>
    }
    return 1;  // 发送成功
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000004 	.word	0x20000004
 8001a84:	200002f4 	.word	0x200002f4

08001a88 <BLE_ChangeStatus>:

uint8_t BLE_ChangeStatus(BLE_Status _status) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	status = _status;
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <BLE_ChangeStatus+0x20>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	7013      	strb	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000004 	.word	0x20000004

08001aac <BLE_GetStatus>:

BLE_Status BLE_GetStatus() {
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	return status;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <BLE_GetStatus+0x14>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <BLE_CALLBACK>:

void BLE_CALLBACK() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	if (BLE_buffer[BLE_buffer_ptr] == '$') {
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	2b24      	cmp	r3, #36	@ 0x24
 8001ad2:	d128      	bne.n	8001b26 <BLE_CALLBACK+0x62>
		BLE_buffer[BLE_buffer_ptr] = "\0";
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8001b80 <BLE_CALLBACK+0xbc>)
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b2d1      	uxtb	r1, r2
 8001adc:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001ade:	54d1      	strb	r1, [r2, r3]
		json_data = (uint8_t*)malloc(strlen(BLE_buffer) + 1);
 8001ae0:	4826      	ldr	r0, [pc, #152]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001ae2:	f7fe fb87 	bl	80001f4 <strlen>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f006 fa14 	bl	8007f18 <malloc>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b23      	ldr	r3, [pc, #140]	@ (8001b84 <BLE_CALLBACK+0xc0>)
 8001af6:	601a      	str	r2, [r3, #0]
		strcpy(json_data, BLE_buffer);
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <BLE_CALLBACK+0xc0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	491f      	ldr	r1, [pc, #124]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f007 fb21 	bl	8009146 <strcpy>
		BLE_INTERFACE_COMMAND();
 8001b04:	f7ff ff4e 	bl	80019a4 <BLE_INTERFACE_COMMAND>
		memset(BLE_buffer, 0, sizeof(BLE_buffer));
 8001b08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	481b      	ldr	r0, [pc, #108]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001b10:	f007 fa57 	bl	8008fc2 <memset>
		status = BLE_TRY_CONNECTING;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <BLE_CALLBACK+0xc4>)
 8001b16:	2203      	movs	r2, #3
 8001b18:	701a      	strb	r2, [r3, #0]
		BLE_SET_STATUS();
 8001b1a:	f7ff ff9b 	bl	8001a54 <BLE_SET_STATUS>
		BLE_buffer_ptr = 0;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e01d      	b.n	8001b62 <BLE_CALLBACK+0x9e>
	} else if (BLE_buffer[BLE_buffer_ptr] == '\n'){
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d112      	bne.n	8001b58 <BLE_CALLBACK+0x94>
		if (strcmp(BLE_buffer, "+CONNECTED\r\n") == 0) {
 8001b32:	4916      	ldr	r1, [pc, #88]	@ (8001b8c <BLE_CALLBACK+0xc8>)
 8001b34:	4811      	ldr	r0, [pc, #68]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001b36:	f7fe fb53 	bl	80001e0 <strcmp>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <BLE_CALLBACK+0x80>
			BLE_SET_STATUS();
 8001b40:	f7ff ff88 	bl	8001a54 <BLE_SET_STATUS>
		}
		memset(BLE_buffer, 0, sizeof(BLE_buffer));
 8001b44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b48:	2100      	movs	r1, #0
 8001b4a:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001b4c:	f007 fa39 	bl	8008fc2 <memset>
		BLE_buffer_ptr = 0;
 8001b50:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e004      	b.n	8001b62 <BLE_CALLBACK+0x9e>
	} else
		BLE_buffer_ptr++;
 8001b58:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001b60:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)BLE_buffer + BLE_buffer_ptr, 1);
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <BLE_CALLBACK+0xb4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <BLE_CALLBACK+0xb8>)
 8001b68:	4413      	add	r3, r2
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <BLE_CALLBACK+0xcc>)
 8001b70:	f002 fd81 	bl	8004676 <HAL_UART_Receive_IT>
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000740 	.word	0x20000740
 8001b7c:	20000358 	.word	0x20000358
 8001b80:	0800b89c 	.word	0x0800b89c
 8001b84:	20000744 	.word	0x20000744
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	0800b8a0 	.word	0x0800b8a0
 8001b90:	200002f4 	.word	0x200002f4

08001b94 <BUZZER_SHORT>:
#include "stdlib.h"
#include "stdint.h"
#include "buzzer.h"


void BUZZER_SHORT(uint32_t buzz_time_ms) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	uint32_t startTime = HAL_GetTick();
 8001b9c:	f001 f938 	bl	8002e10 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(BUZ_SGN_GPIO_Port, BUZ_SGN_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <BUZZER_SHORT+0x3c>)
 8001ba8:	f001 fca2 	bl	80034f0 <HAL_GPIO_WritePin>
	while (HAL_GetTick() - startTime < buzz_time_ms);
 8001bac:	bf00      	nop
 8001bae:	f001 f92f 	bl	8002e10 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d8f7      	bhi.n	8001bae <BUZZER_SHORT+0x1a>
	HAL_GPIO_WritePin(BUZ_SGN_GPIO_Port, BUZ_SGN_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <BUZZER_SHORT+0x3c>)
 8001bc4:	f001 fc94 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <BUZZER_BUZZ_TWICE>:

void BUZZER_BUZZ_TWICE(uint32_t buzz_time_ms, uint32_t mid_time_ms) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	BUZZER_SHORT(buzz_time_ms);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffd8 	bl	8001b94 <BUZZER_SHORT>
	uint32_t startTime = HAL_GetTick();
 8001be4:	f001 f914 	bl	8002e10 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - startTime < mid_time_ms);
 8001bea:	bf00      	nop
 8001bec:	f001 f910 	bl	8002e10 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <BUZZER_BUZZ_TWICE+0x18>
	BUZZER_SHORT(buzz_time_ms);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffc9 	bl	8001b94 <BUZZER_SHORT>
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <BUZZER_Success>:

void BUZZER_Success() {
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
	BUZZER_BUZZ_TWICE(50, 50);
 8001c0e:	2132      	movs	r1, #50	@ 0x32
 8001c10:	2032      	movs	r0, #50	@ 0x32
 8001c12:	f7ff ffdf 	bl	8001bd4 <BUZZER_BUZZ_TWICE>
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <BUZZER_Fail>:

void BUZZER_Fail() {
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
	BUZZER_BUZZ_TWICE(200, 200);
 8001c1e:	21c8      	movs	r1, #200	@ 0xc8
 8001c20:	20c8      	movs	r0, #200	@ 0xc8
 8001c22:	f7ff ffd7 	bl	8001bd4 <BUZZER_BUZZ_TWICE>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <DIG_Write_Data>:
 * 输出  ：void
 * 调用  ：内部调用
 * 备注  ：
*******************************************************************************/
void DIG_Write_Data(uint8_t addr,uint8_t dat)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	DIG_CLK_LOW;
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4832      	ldr	r0, [pc, #200]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001c42:	f001 fc55 	bl	80034f0 <HAL_GPIO_WritePin>
	DIG_CS_LOW;//拉低CS,选中器件
 8001c46:	2200      	movs	r2, #0
 8001c48:	2140      	movs	r1, #64	@ 0x40
 8001c4a:	4830      	ldr	r0, [pc, #192]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001c4c:	f001 fc50 	bl	80034f0 <HAL_GPIO_WritePin>

	//发送地址
	for(i=0;i<8;i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e01e      	b.n	8001c94 <DIG_Write_Data+0x68>
	{
		  if(addr & 0x80)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da05      	bge.n	8001c6a <DIG_Write_Data+0x3e>
			{
		    DIG_DIN_HIGH;
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	482a      	ldr	r0, [pc, #168]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001c64:	f001 fc44 	bl	80034f0 <HAL_GPIO_WritePin>
 8001c68:	e004      	b.n	8001c74 <DIG_Write_Data+0x48>
			}
			else
			{
		    DIG_DIN_LOW;
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	4827      	ldr	r0, [pc, #156]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001c70:	f001 fc3e 	bl	80034f0 <HAL_GPIO_WritePin>
			}
		  //HAL_Delay(1);
			addr <<= 1;
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	71fb      	strb	r3, [r7, #7]
			DIG_CLK_HIGH;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	4823      	ldr	r0, [pc, #140]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001c80:	f001 fc36 	bl	80034f0 <HAL_GPIO_WritePin>
			  //HAL_Delay(1);
	        DIG_CLK_LOW;
 8001c84:	2200      	movs	r2, #0
 8001c86:	2120      	movs	r1, #32
 8001c88:	4820      	ldr	r0, [pc, #128]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001c8a:	f001 fc31 	bl	80034f0 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	3301      	adds	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d9dd      	bls.n	8001c56 <DIG_Write_Data+0x2a>
			  //HAL_Delay(1);
	}

	//发送数据
	for(i=0;i<8;i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e01e      	b.n	8001cde <DIG_Write_Data+0xb2>
	{
		  if(dat & 0x80)
 8001ca0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da05      	bge.n	8001cb4 <DIG_Write_Data+0x88>
			{
		    DIG_DIN_HIGH;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2180      	movs	r1, #128	@ 0x80
 8001cac:	4817      	ldr	r0, [pc, #92]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cae:	f001 fc1f 	bl	80034f0 <HAL_GPIO_WritePin>
 8001cb2:	e004      	b.n	8001cbe <DIG_Write_Data+0x92>
			}
			else
			{
		    DIG_DIN_LOW;
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2180      	movs	r1, #128	@ 0x80
 8001cb8:	4814      	ldr	r0, [pc, #80]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cba:	f001 fc19 	bl	80034f0 <HAL_GPIO_WritePin>
			}
		  //HAL_Delay(1);
			dat <<= 1;
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	71bb      	strb	r3, [r7, #6]
			DIG_CLK_HIGH;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4810      	ldr	r0, [pc, #64]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cca:	f001 fc11 	bl	80034f0 <HAL_GPIO_WritePin>
			  //HAL_Delay(1);
	       DIG_CLK_LOW;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cd4:	f001 fc0c 	bl	80034f0 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	d9dd      	bls.n	8001ca0 <DIG_Write_Data+0x74>
			  //HAL_Delay(1);
	}

	DIG_CS_HIGH;//发送结束,上升沿锁存数据
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2140      	movs	r1, #64	@ 0x40
 8001ce8:	4808      	ldr	r0, [pc, #32]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cea:	f001 fc01 	bl	80034f0 <HAL_GPIO_WritePin>
	DIG_CLK_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cf4:	f001 fbfc 	bl	80034f0 <HAL_GPIO_WritePin>
    DIG_DIN_LOW;
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2180      	movs	r1, #128	@ 0x80
 8001cfc:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <DIG_Write_Data+0xe0>)
 8001cfe:	f001 fbf7 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40020400 	.word	0x40020400

08001d10 <DIG_Show>:

void DIG_Show(uint8_t something[]) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; ++i) {
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e00c      	b.n	8001d38 <DIG_Show+0x28>
		DIG_Write_Data(DIG_Arr[i], something[i]);
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <DIG_Show+0x38>)
 8001d22:	5cd0      	ldrb	r0, [r2, r3]
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7ff ff7d 	bl	8001c2c <DIG_Write_Data>
	for (uint8_t i = 0; i < 8; ++i) {
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	3301      	adds	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b07      	cmp	r3, #7
 8001d3c:	d9ef      	bls.n	8001d1e <DIG_Show+0xe>
	}
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000008 	.word	0x20000008

08001d4c <DIG_DisableDisplay>:

void DIG_DisableDisplay() {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
	uint8_t NullReg[] = {
 8001d52:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <DIG_DisableDisplay+0x24>)
 8001d54:	463b      	mov	r3, r7
 8001d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d5a:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00,
			0x00,
			0x00,
			0x00,
	};
	DIG_Show(NullReg);
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ffd5 	bl	8001d10 <DIG_Show>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	0800b8b0 	.word	0x0800b8b0

08001d74 <DIG_ShowWeight>:
			0x00,
	};
	DIG_Show(NullReg);
}

void DIG_ShowWeight(uint32_t weight) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	char formatWeight[9];
	sprintf(formatWeight, "%08u", weight);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4930      	ldr	r1, [pc, #192]	@ (8001e44 <DIG_ShowWeight+0xd0>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f007 f88d 	bl	8008ea4 <siprintf>
	uint8_t length = 8, i = 0;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	77fb      	strb	r3, [r7, #31]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	77bb      	strb	r3, [r7, #30]
	while (i < 8) {
 8001d92:	e00c      	b.n	8001dae <DIG_ShowWeight+0x3a>
		if (formatWeight[i] != '0') break;
 8001d94:	7fbb      	ldrb	r3, [r7, #30]
 8001d96:	3320      	adds	r3, #32
 8001d98:	443b      	add	r3, r7
 8001d9a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d9e:	2b30      	cmp	r3, #48	@ 0x30
 8001da0:	d109      	bne.n	8001db6 <DIG_ShowWeight+0x42>
		length--;
 8001da2:	7ffb      	ldrb	r3, [r7, #31]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	77fb      	strb	r3, [r7, #31]
		i++;
 8001da8:	7fbb      	ldrb	r3, [r7, #30]
 8001daa:	3301      	adds	r3, #1
 8001dac:	77bb      	strb	r3, [r7, #30]
	while (i < 8) {
 8001dae:	7fbb      	ldrb	r3, [r7, #30]
 8001db0:	2b07      	cmp	r3, #7
 8001db2:	d9ef      	bls.n	8001d94 <DIG_ShowWeight+0x20>
 8001db4:	e000      	b.n	8001db8 <DIG_ShowWeight+0x44>
		if (formatWeight[i] != '0') break;
 8001db6:	bf00      	nop
	}
	uint8_t thisReg[8];
	thisReg[0] = length >= 8 ? DIG_Number[formatWeight[0] - '0'] : DIG_NOTHING;
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d904      	bls.n	8001dc8 <DIG_ShowWeight+0x54>
 8001dbe:	7d3b      	ldrb	r3, [r7, #20]
 8001dc0:	3b30      	subs	r3, #48	@ 0x30
 8001dc2:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	e000      	b.n	8001dca <DIG_ShowWeight+0x56>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	733b      	strb	r3, [r7, #12]
	thisReg[1] = length >= 7 ? DIG_Number[formatWeight[1] - '0'] : DIG_NOTHING;
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d904      	bls.n	8001ddc <DIG_ShowWeight+0x68>
 8001dd2:	7d7b      	ldrb	r3, [r7, #21]
 8001dd4:	3b30      	subs	r3, #48	@ 0x30
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	e000      	b.n	8001dde <DIG_ShowWeight+0x6a>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	737b      	strb	r3, [r7, #13]
	thisReg[2] = length >= 6 ? DIG_Number[formatWeight[2] - '0'] : DIG_NOTHING;
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d904      	bls.n	8001df0 <DIG_ShowWeight+0x7c>
 8001de6:	7dbb      	ldrb	r3, [r7, #22]
 8001de8:	3b30      	subs	r3, #48	@ 0x30
 8001dea:	4a17      	ldr	r2, [pc, #92]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	e000      	b.n	8001df2 <DIG_ShowWeight+0x7e>
 8001df0:	2300      	movs	r3, #0
 8001df2:	73bb      	strb	r3, [r7, #14]
	thisReg[3] = length >= 5 ? DIG_Number[formatWeight[3] - '0'] : DIG_NOTHING;
 8001df4:	7ffb      	ldrb	r3, [r7, #31]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d904      	bls.n	8001e04 <DIG_ShowWeight+0x90>
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	3b30      	subs	r3, #48	@ 0x30
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	e000      	b.n	8001e06 <DIG_ShowWeight+0x92>
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
	thisReg[4] = DIG_NumberPoint[formatWeight[4] - '0'];
 8001e08:	7e3b      	ldrb	r3, [r7, #24]
 8001e0a:	3b30      	subs	r3, #48	@ 0x30
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <DIG_ShowWeight+0xd8>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	743b      	strb	r3, [r7, #16]
	thisReg[5] = DIG_Number[formatWeight[5] - '0'];
 8001e12:	7e7b      	ldrb	r3, [r7, #25]
 8001e14:	3b30      	subs	r3, #48	@ 0x30
 8001e16:	4a0c      	ldr	r2, [pc, #48]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	747b      	strb	r3, [r7, #17]
	thisReg[6] = DIG_Number[formatWeight[6] - '0'];
 8001e1c:	7ebb      	ldrb	r3, [r7, #26]
 8001e1e:	3b30      	subs	r3, #48	@ 0x30
 8001e20:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	74bb      	strb	r3, [r7, #18]
	thisReg[7] = DIG_Number[formatWeight[7] - '0'];
 8001e26:	7efb      	ldrb	r3, [r7, #27]
 8001e28:	3b30      	subs	r3, #48	@ 0x30
 8001e2a:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <DIG_ShowWeight+0xd4>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	74fb      	strb	r3, [r7, #19]
	DIG_Show(thisReg);
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff6b 	bl	8001d10 <DIG_Show>
}
 8001e3a:	bf00      	nop
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	0800b8c0 	.word	0x0800b8c0
 8001e48:	20000010 	.word	0x20000010
 8001e4c:	2000001c 	.word	0x2000001c

08001e50 <DIG_Init>:

uint8_t DIG_Init() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	DIG_Write_Data(SHUTDOWN,0x01);//掉电模式：0;普通模式：1
 8001e54:	2101      	movs	r1, #1
 8001e56:	200c      	movs	r0, #12
 8001e58:	f7ff fee8 	bl	8001c2c <DIG_Write_Data>
	DIG_Write_Data(DISPLAY_TEST,0x00);//显示测试：1;测试结束，正常显示：0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	200f      	movs	r0, #15
 8001e60:	f7ff fee4 	bl	8001c2c <DIG_Write_Data>
    DIG_Write_Data(DECODE_MODE,0x00);//译码方式：非BCD译码
 8001e64:	2100      	movs	r1, #0
 8001e66:	2009      	movs	r0, #9
 8001e68:	f7ff fee0 	bl	8001c2c <DIG_Write_Data>
	DIG_Write_Data(SCAN_LIMIT,0x07);//扫描界限：8个数码管显示
 8001e6c:	2107      	movs	r1, #7
 8001e6e:	200b      	movs	r0, #11
 8001e70:	f7ff fedc 	bl	8001c2c <DIG_Write_Data>
	DIG_Write_Data(INTENSITY,0x0C);//亮度
 8001e74:	210c      	movs	r1, #12
 8001e76:	200a      	movs	r0, #10
 8001e78:	f7ff fed8 	bl	8001c2c <DIG_Write_Data>
	DIG_DisableDisplay();
 8001e7c:	f7ff ff66 	bl	8001d4c <DIG_DisableDisplay>
	return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <DATA_Get_CargoCreate>:
 */

#include "data.h"
#include "User/user.h"

char* DATA_Get_CargoCreate(char card_uid[], double weight) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	ed87 0b00 	vstr	d0, [r7]
	cJSON* json = cJSON_CreateObject();
 8001e94:	f005 fffe 	bl	8007e94 <cJSON_CreateObject>
 8001e98:	61f8      	str	r0, [r7, #28]
	cJSON* content = cJSON_CreateObject();
 8001e9a:	f005 fffb 	bl	8007e94 <cJSON_CreateObject>
 8001e9e:	61b8      	str	r0, [r7, #24]
	cJSON_AddStringToObject(content, "requestType", "CargoCreate");
 8001ea0:	4a15      	ldr	r2, [pc, #84]	@ (8001ef8 <DATA_Get_CargoCreate+0x70>)
 8001ea2:	4916      	ldr	r1, [pc, #88]	@ (8001efc <DATA_Get_CargoCreate+0x74>)
 8001ea4:	69b8      	ldr	r0, [r7, #24]
 8001ea6:	f005 ff51 	bl	8007d4c <cJSON_AddStringToObject>
	cJSON_AddStringToObject(content, "card_uid", card_uid);
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4914      	ldr	r1, [pc, #80]	@ (8001f00 <DATA_Get_CargoCreate+0x78>)
 8001eae:	69b8      	ldr	r0, [r7, #24]
 8001eb0:	f005 ff4c 	bl	8007d4c <cJSON_AddStringToObject>
	cJSON_AddNumberToObject(content, "weight", weight);
 8001eb4:	ed97 0b00 	vldr	d0, [r7]
 8001eb8:	4912      	ldr	r1, [pc, #72]	@ (8001f04 <DATA_Get_CargoCreate+0x7c>)
 8001eba:	69b8      	ldr	r0, [r7, #24]
 8001ebc:	f005 ff22 	bl	8007d04 <cJSON_AddNumberToObject>
	User_TypeDef* user = USER_GetUser();
 8001ec0:	f003 fb64 	bl	800558c <USER_GetUser>
 8001ec4:	6178      	str	r0, [r7, #20]
	cJSON_AddStringToObject(content, "created_by", user->username);
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <DATA_Get_CargoCreate+0x80>)
 8001ece:	69b8      	ldr	r0, [r7, #24]
 8001ed0:	f005 ff3c 	bl	8007d4c <cJSON_AddStringToObject>
	cJSON_AddItemToObject(json, "content", content);
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	490d      	ldr	r1, [pc, #52]	@ (8001f0c <DATA_Get_CargoCreate+0x84>)
 8001ed8:	69f8      	ldr	r0, [r7, #28]
 8001eda:	f005 fefd 	bl	8007cd8 <cJSON_AddItemToObject>
	char* json_string = cJSON_PrintUnformatted(json);
 8001ede:	69f8      	ldr	r0, [r7, #28]
 8001ee0:	f005 f89a 	bl	8007018 <cJSON_PrintUnformatted>
 8001ee4:	6138      	str	r0, [r7, #16]
	cJSON_Delete(json);
 8001ee6:	69f8      	ldr	r0, [r7, #28]
 8001ee8:	f003 ffea 	bl	8005ec0 <cJSON_Delete>
	return json_string;
 8001eec:	693b      	ldr	r3, [r7, #16]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	0800b8c8 	.word	0x0800b8c8
 8001efc:	0800b8d4 	.word	0x0800b8d4
 8001f00:	0800b8e0 	.word	0x0800b8e0
 8001f04:	0800b8ec 	.word	0x0800b8ec
 8001f08:	0800b8f4 	.word	0x0800b8f4
 8001f0c:	0800b900 	.word	0x0800b900

08001f10 <HX711_Read>:

//****************************************************
//读取HX711
//****************************************************
uint32_t HX711_Read(uint8_t pulse)	//增益128  PULSE 脉冲
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	uint32_t count =0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
	uint8_t i;
  HX720_CLK_L();
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2102      	movs	r1, #2
 8001f22:	4824      	ldr	r0, [pc, #144]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f24:	f001 fae4 	bl	80034f0 <HAL_GPIO_WritePin>

  if(HAL_GPIO_ReadPin(DAT_GPIO_Port, DAT_Pin)==0)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4822      	ldr	r0, [pc, #136]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f2c:	f001 fac8 	bl	80034c0 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d138      	bne.n	8001fa8 <HX711_Read+0x98>
	{
		  for(i=0;i<24;i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	72fb      	strb	r3, [r7, #11]
 8001f3a:	e019      	b.n	8001f70 <HX711_Read+0x60>
			{
					HX720_CLK_H();
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2102      	movs	r1, #2
 8001f40:	481c      	ldr	r0, [pc, #112]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f42:	f001 fad5 	bl	80034f0 <HAL_GPIO_WritePin>
//					HAL_Delay(1);
					count=count<<1;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
					HX720_CLK_L();
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4818      	ldr	r0, [pc, #96]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f52:	f001 facd 	bl	80034f0 <HAL_GPIO_WritePin>
//					HAL_Delay(1);
					if(HAL_GPIO_ReadPin(DAT_GPIO_Port,DAT_Pin)==1)
 8001f56:	2101      	movs	r1, #1
 8001f58:	4816      	ldr	r0, [pc, #88]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f5a:	f001 fab1 	bl	80034c0 <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HX711_Read+0x5a>
					{
						count++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
		  for(i=0;i<24;i++)
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	72fb      	strb	r3, [r7, #11]
 8001f70:	7afb      	ldrb	r3, [r7, #11]
 8001f72:	2b17      	cmp	r3, #23
 8001f74:	d9e2      	bls.n	8001f3c <HX711_Read+0x2c>
					}

			}
			for(i=0;i<pulse-24;i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	72fb      	strb	r3, [r7, #11]
 8001f7a:	e00c      	b.n	8001f96 <HX711_Read+0x86>
			{
				HX720_CLK_H();
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2102      	movs	r1, #2
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f82:	f001 fab5 	bl	80034f0 <HAL_GPIO_WritePin>
//				HAL_Delay(1);
				HX720_CLK_L();
 8001f86:	2200      	movs	r2, #0
 8001f88:	2102      	movs	r1, #2
 8001f8a:	480a      	ldr	r0, [pc, #40]	@ (8001fb4 <HX711_Read+0xa4>)
 8001f8c:	f001 fab0 	bl	80034f0 <HAL_GPIO_WritePin>
			for(i=0;i<pulse-24;i++)
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	3301      	adds	r3, #1
 8001f94:	72fb      	strb	r3, [r7, #11]
 8001f96:	7afa      	ldrb	r2, [r7, #11]
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3b18      	subs	r3, #24
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbed      	blt.n	8001f7c <HX711_Read+0x6c>
//				HAL_Delay(1);
			}

		count=count^0x800000;//第25个脉冲下降沿来时，转换数据
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8001fa6:	60fb      	str	r3, [r7, #12]
	}
//		HX720_CLK_H();
//    count=count^0x800000;//第25个脉冲下降沿来时，转换数据
//	delay_us(1);
//	HX720_CLK_H();
	return(count);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <Get_Maopi>:

//****************************************************
//获取毛皮重量
//****************************************************
void Get_Maopi(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8001fbc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fc0:	f000 ff32 	bl	8002e28 <HAL_Delay>
	Weight_Maopi = HX711_Read(25);
 8001fc4:	2019      	movs	r0, #25
 8001fc6:	f7ff ffa3 	bl	8001f10 <HX711_Read>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a01      	ldr	r2, [pc, #4]	@ (8001fd4 <Get_Maopi+0x1c>)
 8001fce:	6013      	str	r3, [r2, #0]
//	Weight_Maopi=KalmanFilter(Weight_Maopi);
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000750 	.word	0x20000750

08001fd8 <Get_Weight>:

//****************************************************
//称重
//****************************************************
void Get_Weight(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	HX711_Buffer = HX711_Read(25);
 8001fdc:	2019      	movs	r0, #25
 8001fde:	f7ff ff97 	bl	8001f10 <HX711_Read>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <Get_Weight+0x68>)
 8001fe6:	6013      	str	r3, [r2, #0]
	if(HX711_Buffer > Weight_Maopi)
 8001fe8:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <Get_Weight+0x68>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <Get_Weight+0x6c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d91b      	bls.n	800202c <Get_Weight+0x54>
	{
		Weight_Shiwu = HX711_Buffer;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <Get_Weight+0x68>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <Get_Weight+0x70>)
 8001ffa:	6013      	str	r3, [r2, #0]
		Weight_Shiwu = Weight_Shiwu - Weight_Maopi;				//获取实物的AD采样数值。
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <Get_Weight+0x70>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <Get_Weight+0x6c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <Get_Weight+0x70>)
 8002008:	6013      	str	r3, [r2, #0]

		Weight_Shiwu = ((float)Weight_Shiwu/GapValue); 	//计算实物的实际重量
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <Get_Weight+0x70>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002016:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800204c <Get_Weight+0x74>
 800201a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002022:	ee17 2a90 	vmov	r2, s15
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <Get_Weight+0x70>)
 8002028:	601a      	str	r2, [r3, #0]
//		Weight_Shiwu=KalmanFilter(Weight_Shiwu);
	} else if (HX711_Buffer > 0) {
		Weight_Shiwu = 0;
	}

}
 800202a:	e006      	b.n	800203a <Get_Weight+0x62>
	} else if (HX711_Buffer > 0) {
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <Get_Weight+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <Get_Weight+0x62>
		Weight_Shiwu = 0;
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <Get_Weight+0x70>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000074c 	.word	0x2000074c
 8002044:	20000750 	.word	0x20000750
 8002048:	20000754 	.word	0x20000754
 800204c:	43cd0000 	.word	0x43cd0000

08002050 <HUAWEI_INIT>:

static uint8_t buffer[256];

// 固定函数定义区域

uint8_t HUAWEI_INIT() {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	if (WIFI_MQTT_USERCFG(&deviceMqttUsercfg) == 0)  return 0;
 8002054:	4810      	ldr	r0, [pc, #64]	@ (8002098 <HUAWEI_INIT+0x48>)
 8002056:	f003 fb07 	bl	8005668 <WIFI_MQTT_USERCFG>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HUAWEI_INIT+0x14>
 8002060:	2300      	movs	r3, #0
 8002062:	e017      	b.n	8002094 <HUAWEI_INIT+0x44>
	if (WIFI_MQTT_CONN(&deviceMqttConn) == 0) return 0;
 8002064:	480d      	ldr	r0, [pc, #52]	@ (800209c <HUAWEI_INIT+0x4c>)
 8002066:	f003 fbb9 	bl	80057dc <WIFI_MQTT_CONN>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HUAWEI_INIT+0x24>
 8002070:	2300      	movs	r3, #0
 8002072:	e00f      	b.n	8002094 <HUAWEI_INIT+0x44>
	if (HUAWEI_SUBSCRIBE_TOPICS() == 0) return 0;
 8002074:	f000 f919 	bl	80022aa <HUAWEI_SUBSCRIBE_TOPICS>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HUAWEI_INIT+0x32>
 800207e:	2300      	movs	r3, #0
 8002080:	e008      	b.n	8002094 <HUAWEI_INIT+0x44>
	if (HUAWEI_WAKEUP(&deviceInfo) == 0) return 0;
 8002082:	4807      	ldr	r0, [pc, #28]	@ (80020a0 <HUAWEI_INIT+0x50>)
 8002084:	f000 f900 	bl	8002288 <HUAWEI_WAKEUP>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HUAWEI_INIT+0x42>
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HUAWEI_INIT+0x44>
	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000028 	.word	0x20000028
 800209c:	20000040 	.word	0x20000040
 80020a0:	20000048 	.word	0x20000048

080020a4 <HUAWEI_TOPIC_GETTER>:
//	cJSON_AddItemToObject(baseService, "properties", prop);
//	service = baseService;
//}


char* HUAWEI_TOPIC_GETTER(HUAWEI_TopicType topicType) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	char* returnTopic;
	if (topicType == SERVICE_UPLOAD) {
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HUAWEI_TOPIC_GETTER+0x20>
		sprintf(
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4930      	ldr	r1, [pc, #192]	@ (800217c <HUAWEI_TOPIC_GETTER+0xd8>)
 80020bc:	4830      	ldr	r0, [pc, #192]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 80020be:	f006 fef1 	bl	8008ea4 <siprintf>
 80020c2:	e045      	b.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
				buffer,
				"$oc/devices/%s/sys/properties/report",
				deviceMqttUsercfg.client_id
		);
	} else if (topicType == COMMAND_FROM_PLATFORM) {
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HUAWEI_TOPIC_GETTER+0x36>
		sprintf(
 80020ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	492c      	ldr	r1, [pc, #176]	@ (8002184 <HUAWEI_TOPIC_GETTER+0xe0>)
 80020d2:	482b      	ldr	r0, [pc, #172]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 80020d4:	f006 fee6 	bl	8008ea4 <siprintf>
 80020d8:	e03a      	b.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
				buffer,
				"$oc/devices/%s/sys/commands/#",
				deviceMqttUsercfg.client_id
		);
	} else if (topicType == COMMAND_TO_PLATFORM) {
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d107      	bne.n	80020f0 <HUAWEI_TOPIC_GETTER+0x4c>
		sprintf(
 80020e0:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4928      	ldr	r1, [pc, #160]	@ (8002188 <HUAWEI_TOPIC_GETTER+0xe4>)
 80020e8:	4825      	ldr	r0, [pc, #148]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 80020ea:	f006 fedb 	bl	8008ea4 <siprintf>
 80020ee:	e02f      	b.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
				buffer,
				"$oc/devices/%s/sys/commands/response/request_id=%s",
				deviceMqttUsercfg.client_id
		);
	} else if (topicType == SERVICE_RESP) {
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d101      	bne.n	80020fa <HUAWEI_TOPIC_GETTER+0x56>
		return "$oc/devices/%s/sys/properties/set/response/request_id=%s";
 80020f6:	4b25      	ldr	r3, [pc, #148]	@ (800218c <HUAWEI_TOPIC_GETTER+0xe8>)
 80020f8:	e039      	b.n	800216e <HUAWEI_TOPIC_GETTER+0xca>
	} else if (topicType == SHADOW_GET_UP) {
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d107      	bne.n	8002110 <HUAWEI_TOPIC_GETTER+0x6c>
		sprintf(
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	461a      	mov	r2, r3
 8002106:	4922      	ldr	r1, [pc, #136]	@ (8002190 <HUAWEI_TOPIC_GETTER+0xec>)
 8002108:	481d      	ldr	r0, [pc, #116]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 800210a:	f006 fecb 	bl	8008ea4 <siprintf>
 800210e:	e01f      	b.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
				buffer,
				"$oc/devices/%s/sys/shadow/get/request_id=1",
				deviceMqttUsercfg.client_id
		);
	} else if (topicType == SHADOW_GET_DOWN) {
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d107      	bne.n	8002126 <HUAWEI_TOPIC_GETTER+0x82>
		sprintf(
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	461a      	mov	r2, r3
 800211c:	491d      	ldr	r1, [pc, #116]	@ (8002194 <HUAWEI_TOPIC_GETTER+0xf0>)
 800211e:	4818      	ldr	r0, [pc, #96]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 8002120:	f006 fec0 	bl	8008ea4 <siprintf>
 8002124:	e014      	b.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
				buffer,
				"$oc/devices/%s/sys/shadow/get/response/#",
				deviceMqttUsercfg.username
		);
	} else if (topicType == MESSAGE_UP) {
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2b06      	cmp	r3, #6
 800212a:	d107      	bne.n	800213c <HUAWEI_TOPIC_GETTER+0x98>
		sprintf(
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	461a      	mov	r2, r3
 8002132:	4919      	ldr	r1, [pc, #100]	@ (8002198 <HUAWEI_TOPIC_GETTER+0xf4>)
 8002134:	4812      	ldr	r0, [pc, #72]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 8002136:	f006 feb5 	bl	8008ea4 <siprintf>
 800213a:	e009      	b.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
				buffer,
				"$oc/devices/%s/sys/messages/up",
				deviceMqttUsercfg.username
		);
	} else if (topicType == MESSAGE_DOWN) {
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b07      	cmp	r3, #7
 8002140:	d106      	bne.n	8002150 <HUAWEI_TOPIC_GETTER+0xac>
		sprintf(
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HUAWEI_TOPIC_GETTER+0xd4>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	461a      	mov	r2, r3
 8002148:	4914      	ldr	r1, [pc, #80]	@ (800219c <HUAWEI_TOPIC_GETTER+0xf8>)
 800214a:	480d      	ldr	r0, [pc, #52]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 800214c:	f006 feaa 	bl	8008ea4 <siprintf>
				"$oc/devices/%s/sys/messages/down",
				deviceMqttUsercfg.username
		);

	}
	returnTopic = (char*)malloc(strlen(buffer) + 1);
 8002150:	480b      	ldr	r0, [pc, #44]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 8002152:	f7fe f84f 	bl	80001f4 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	3301      	adds	r3, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f005 fedc 	bl	8007f18 <malloc>
 8002160:	4603      	mov	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]
	strcpy(returnTopic, buffer);
 8002164:	4906      	ldr	r1, [pc, #24]	@ (8002180 <HUAWEI_TOPIC_GETTER+0xdc>)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f006 ffed 	bl	8009146 <strcpy>
	return returnTopic;
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000028 	.word	0x20000028
 800217c:	0800ba00 	.word	0x0800ba00
 8002180:	20000758 	.word	0x20000758
 8002184:	0800ba28 	.word	0x0800ba28
 8002188:	0800ba48 	.word	0x0800ba48
 800218c:	0800ba7c 	.word	0x0800ba7c
 8002190:	0800bab8 	.word	0x0800bab8
 8002194:	0800bae4 	.word	0x0800bae4
 8002198:	0800bb10 	.word	0x0800bb10
 800219c:	0800bb30 	.word	0x0800bb30

080021a0 <HUAWEI_MQTTPUB_JSON>:


uint8_t HUAWEI_MQTTPUB_JSON(HUAWEI_TopicType topicType, char* json) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
	char* topic = HUAWEI_TOPIC_GETTER(topicType);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff78 	bl	80020a4 <HUAWEI_TOPIC_GETTER>
 80021b4:	61f8      	str	r0, [r7, #28]
	MQTTPubRaw_Struct pubraw = {
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	60bb      	str	r3, [r7, #8]
			.length=strlen(json),
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	f7fe f81a 	bl	80001f4 <strlen>
 80021c0:	4603      	mov	r3, r0
	MQTTPubRaw_Struct pubraw = {
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	2302      	movs	r3, #2
 80021c6:	743b      	strb	r3, [r7, #16]
 80021c8:	2300      	movs	r3, #0
 80021ca:	747b      	strb	r3, [r7, #17]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	617b      	str	r3, [r7, #20]
			.msg=json,
			.qos=2,
			.retain=0,
			.topic=topic
	};
	uint8_t result = WIFI_MQTT_PUBRAW(&pubraw);
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fbd3 	bl	8005980 <WIFI_MQTT_PUBRAW>
 80021da:	4603      	mov	r3, r0
 80021dc:	76fb      	strb	r3, [r7, #27]
	free(topic);
 80021de:	69f8      	ldr	r0, [r7, #28]
 80021e0:	f005 fea2 	bl	8007f28 <free>
	free(json);
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f005 fe9f 	bl	8007f28 <free>
	return result;
 80021ea:	7efb      	ldrb	r3, [r7, #27]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HUAWEI_SERVICE_ADD_WAKE_UP>:

// 以下为自定义

static char* HUAWEI_SERVICE_ADD_WAKE_UP (DeviceInfo_Struct* deviceInfo) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	cJSON* prop = cJSON_CreateObject();
 80021fc:	f005 fe4a 	bl	8007e94 <cJSON_CreateObject>
 8002200:	61f8      	str	r0, [r7, #28]
	cJSON_AddStringToObject(prop, "username", deviceInfo->username);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4919      	ldr	r1, [pc, #100]	@ (8002270 <HUAWEI_SERVICE_ADD_WAKE_UP+0x7c>)
 800220a:	69f8      	ldr	r0, [r7, #28]
 800220c:	f005 fd9e 	bl	8007d4c <cJSON_AddStringToObject>
	cJSON_AddStringToObject(prop, "deviceType", deviceInfo->deviceType);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	461a      	mov	r2, r3
 8002216:	4917      	ldr	r1, [pc, #92]	@ (8002274 <HUAWEI_SERVICE_ADD_WAKE_UP+0x80>)
 8002218:	69f8      	ldr	r0, [r7, #28]
 800221a:	f005 fd97 	bl	8007d4c <cJSON_AddStringToObject>
	cJSON* service = cJSON_CreateObject();
 800221e:	f005 fe39 	bl	8007e94 <cJSON_CreateObject>
 8002222:	61b8      	str	r0, [r7, #24]
	cJSON_AddStringToObject(service, "service_id", "DeviceWakeUp");
 8002224:	4a14      	ldr	r2, [pc, #80]	@ (8002278 <HUAWEI_SERVICE_ADD_WAKE_UP+0x84>)
 8002226:	4915      	ldr	r1, [pc, #84]	@ (800227c <HUAWEI_SERVICE_ADD_WAKE_UP+0x88>)
 8002228:	69b8      	ldr	r0, [r7, #24]
 800222a:	f005 fd8f 	bl	8007d4c <cJSON_AddStringToObject>
	cJSON_AddItemToObject(service, "properties", prop);
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	4913      	ldr	r1, [pc, #76]	@ (8002280 <HUAWEI_SERVICE_ADD_WAKE_UP+0x8c>)
 8002232:	69b8      	ldr	r0, [r7, #24]
 8002234:	f005 fd50 	bl	8007cd8 <cJSON_AddItemToObject>
	cJSON* servicesArray = cJSON_CreateArray();
 8002238:	f005 fe18 	bl	8007e6c <cJSON_CreateArray>
 800223c:	6178      	str	r0, [r7, #20]
	cJSON_AddItemToArray(servicesArray, service);
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f005 fcdb 	bl	8007bfc <cJSON_AddItemToArray>
	cJSON* root = cJSON_CreateObject();
 8002246:	f005 fe25 	bl	8007e94 <cJSON_CreateObject>
 800224a:	6138      	str	r0, [r7, #16]
	cJSON_AddItemToObject(root, "services", servicesArray);
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	490d      	ldr	r1, [pc, #52]	@ (8002284 <HUAWEI_SERVICE_ADD_WAKE_UP+0x90>)
 8002250:	6938      	ldr	r0, [r7, #16]
 8002252:	f005 fd41 	bl	8007cd8 <cJSON_AddItemToObject>
	char* jsonStr = cJSON_PrintUnformatted(root);
 8002256:	6938      	ldr	r0, [r7, #16]
 8002258:	f004 fede 	bl	8007018 <cJSON_PrintUnformatted>
 800225c:	60f8      	str	r0, [r7, #12]
	cJSON_Delete(root);
 800225e:	6938      	ldr	r0, [r7, #16]
 8002260:	f003 fe2e 	bl	8005ec0 <cJSON_Delete>
	return jsonStr;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	0800bb54 	.word	0x0800bb54
 8002274:	0800bb60 	.word	0x0800bb60
 8002278:	0800bb6c 	.word	0x0800bb6c
 800227c:	0800bb7c 	.word	0x0800bb7c
 8002280:	0800bb88 	.word	0x0800bb88
 8002284:	0800bb94 	.word	0x0800bb94

08002288 <HUAWEI_WAKEUP>:

uint8_t HUAWEI_WAKEUP(DeviceInfo_Struct* deviceInfo) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	char* json = HUAWEI_SERVICE_ADD_WAKE_UP(deviceInfo);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffaf 	bl	80021f4 <HUAWEI_SERVICE_ADD_WAKE_UP>
 8002296:	60f8      	str	r0, [r7, #12]
	return HUAWEI_MQTTPUB_JSON(SERVICE_UPLOAD, json);
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff ff80 	bl	80021a0 <HUAWEI_MQTTPUB_JSON>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HUAWEI_SUBSCRIBE_TOPICS>:

uint8_t HUAWEI_SUBSCRIBE_TOPICS() {
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
	MQTTSub_Struct mqttsub = {
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	2301      	movs	r3, #1
 80022ba:	713b      	strb	r3, [r7, #4]
//	if (!WIFI_MQTT_TOPIC_SUB(&mqttsub)) return 0;
//	free(mqttsub.topic);
//	mqttsub.topic = HUAWEI_TOPIC_GETTER(SHADOW_GET_DOWN);
//	if (!WIFI_MQTT_TOPIC_SUB(&mqttsub)) return 0;
//	free(mqttsub.topic);
	mqttsub.topic = HUAWEI_TOPIC_GETTER(MESSAGE_DOWN);
 80022bc:	2007      	movs	r0, #7
 80022be:	f7ff fef1 	bl	80020a4 <HUAWEI_TOPIC_GETTER>
 80022c2:	4603      	mov	r3, r0
 80022c4:	603b      	str	r3, [r7, #0]
	if (!WIFI_MQTT_TOPIC_SUB(&mqttsub)) return 0;
 80022c6:	463b      	mov	r3, r7
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 faf3 	bl	80058b4 <WIFI_MQTT_TOPIC_SUB>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HUAWEI_SUBSCRIBE_TOPICS+0x2e>
 80022d4:	2300      	movs	r3, #0
 80022d6:	e004      	b.n	80022e2 <HUAWEI_SUBSCRIBE_TOPICS+0x38>
	free(mqttsub.topic);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f005 fe24 	bl	8007f28 <free>
	return 1;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HUAWEI_SEND_MESSAGE>:
	if (!WIFI_MQTT_PUBRAW(&pubraw)) return 0;
	free(topic);
	return 1;
}

uint8_t HUAWEI_SEND_MESSAGE(char* data) {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	HUAWEI_MQTTPUB_JSON(MESSAGE_UP, data);
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	2006      	movs	r0, #6
 80022f6:	f7ff ff53 	bl	80021a0 <HUAWEI_MQTTPUB_JSON>
	free(data);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f005 fe14 	bl	8007f28 <free>
	return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <LED_Red>:
GPIO_PinState state[2] = {
		GPIO_PIN_RESET,
		GPIO_PIN_SET
};

void LED_Red(uint8_t status) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state[status]);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <LED_Red+0x24>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	461a      	mov	r2, r3
 800231e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002322:	4804      	ldr	r0, [pc, #16]	@ (8002334 <LED_Red+0x28>)
 8002324:	f001 f8e4 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000050 	.word	0x20000050
 8002334:	40020400 	.word	0x40020400

08002338 <LED_Yellow>:

void LED_Yellow(uint8_t status) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state[status]);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4a05      	ldr	r2, [pc, #20]	@ (800235c <LED_Yellow+0x24>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	461a      	mov	r2, r3
 800234a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800234e:	4804      	ldr	r0, [pc, #16]	@ (8002360 <LED_Yellow+0x28>)
 8002350:	f001 f8ce 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000050 	.word	0x20000050
 8002360:	40020400 	.word	0x40020400

08002364 <LED_Green>:

void LED_Green(uint8_t status) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state[status]);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <LED_Green+0x24>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800237a:	4804      	ldr	r0, [pc, #16]	@ (800238c <LED_Green+0x28>)
 800237c:	f001 f8b8 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000050 	.word	0x20000050
 800238c:	40020400 	.word	0x40020400

08002390 <LED_ClearAll>:

void LED_ClearAll() {
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	LED_Red(0);
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff ffb9 	bl	800230c <LED_Red>
	LED_Yellow(0);
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff ffcc 	bl	8002338 <LED_Yellow>
	LED_Green(0);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff ffdf 	bl	8002364 <LED_Green>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <LED_Red_On>:

void LED_Red_On() {
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
	LED_ClearAll();
 80023ae:	f7ff ffef 	bl	8002390 <LED_ClearAll>
	LED_Red(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff ffaa 	bl	800230c <LED_Red>
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <LED_Yellow_On>:

void LED_Yellow_On() {
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	LED_ClearAll();
 80023c0:	f7ff ffe6 	bl	8002390 <LED_ClearAll>
	LED_Yellow(1);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff ffb7 	bl	8002338 <LED_Yellow>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <LED_Green_On>:

void LED_Green_On() {
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
	LED_ClearAll();
 80023d2:	f7ff ffdd 	bl	8002390 <LED_ClearAll>
	LED_Green(1);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff ffc4 	bl	8002364 <LED_Green>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <LED_CheckAndChange>:

void LED_CheckAndChange(uint8_t work, uint8_t waiting) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
	if (!work) LED_Red_On();
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <LED_CheckAndChange+0x1c>
 80023f6:	f7ff ffd8 	bl	80023aa <LED_Red_On>
	else {
		if (waiting) LED_Yellow_On();
		else LED_Green_On();
	}
}
 80023fa:	e007      	b.n	800240c <LED_CheckAndChange+0x2c>
		if (waiting) LED_Yellow_On();
 80023fc:	79bb      	ldrb	r3, [r7, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <LED_CheckAndChange+0x28>
 8002402:	f7ff ffdb 	bl	80023bc <LED_Yellow_On>
}
 8002406:	e001      	b.n	800240c <LED_CheckAndChange+0x2c>
		else LED_Green_On();
 8002408:	f7ff ffe1 	bl	80023ce <LED_Green_On>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <MESSAGE_CHECK_AND_CLEAR>:

char msg_buffer[4000]; volatile int16_t msg_ptr = -1;
uint32_t updateTime = 0;
uint8_t msg_is_checked = 0;

void MESSAGE_CHECK_AND_CLEAR() {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	if (!msg_is_checked) return;
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <MESSAGE_CHECK_AND_CLEAR+0x44>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d018      	beq.n	8002452 <MESSAGE_CHECK_AND_CLEAR+0x3e>
	if (HAL_GetTick() - updateTime > 500) {
 8002420:	f000 fcf6 	bl	8002e10 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <MESSAGE_CHECK_AND_CLEAR+0x48>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002430:	d910      	bls.n	8002454 <MESSAGE_CHECK_AND_CLEAR+0x40>
		memset(msg_buffer, 0, 4000);
 8002432:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002436:	2100      	movs	r1, #0
 8002438:	4809      	ldr	r0, [pc, #36]	@ (8002460 <MESSAGE_CHECK_AND_CLEAR+0x4c>)
 800243a:	f006 fdc2 	bl	8008fc2 <memset>
		msg_ptr = -1;
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <MESSAGE_CHECK_AND_CLEAR+0x50>)
 8002440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002444:	801a      	strh	r2, [r3, #0]
		updateTime = HAL_GetTick();
 8002446:	f000 fce3 	bl	8002e10 <HAL_GetTick>
 800244a:	4603      	mov	r3, r0
 800244c:	4a03      	ldr	r2, [pc, #12]	@ (800245c <MESSAGE_CHECK_AND_CLEAR+0x48>)
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e000      	b.n	8002454 <MESSAGE_CHECK_AND_CLEAR+0x40>
	if (!msg_is_checked) return;
 8002452:	bf00      	nop
	}
}
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200017fc 	.word	0x200017fc
 800245c:	200017f8 	.word	0x200017f8
 8002460:	20000858 	.word	0x20000858
 8002464:	20000052 	.word	0x20000052

08002468 <MESSAGE_MERGER>:

cJSON* MESSAGE_MERGER(char** _requestID) {
 8002468:	b580      	push	{r7, lr}
 800246a:	f5ad 5dd7 	sub.w	sp, sp, #6880	@ 0x1ae0
 800246e:	b084      	sub	sp, #16
 8002470:	af02      	add	r7, sp, #8
 8002472:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8002476:	f6a3 23e4 	subw	r3, r3, #2788	@ 0xae4
 800247a:	6018      	str	r0, [r3, #0]
	MQTTRev_Struct mqttrev;
	char str_result[4000];
	char buffer[2000];
	uint16_t buffer_ptr = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f507 52d7 	add.w	r2, r7, #6880	@ 0x1ae0
 8002482:	f102 0206 	add.w	r2, r2, #6
 8002486:	8013      	strh	r3, [r2, #0]
	int msg_length = strlen(msg_buffer);
 8002488:	48a4      	ldr	r0, [pc, #656]	@ (800271c <MESSAGE_MERGER+0x2b4>)
 800248a:	f7fd feb3 	bl	80001f4 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	f507 52d6 	add.w	r2, r7, #6848	@ 0x1ac0
 8002494:	f102 0214 	add.w	r2, r2, #20
 8002498:	6013      	str	r3, [r2, #0]
	str_result[0] = '\0';
 800249a:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800249e:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < msg_length; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	f507 52d7 	add.w	r2, r7, #6880	@ 0x1ae0
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e062      	b.n	8002576 <MESSAGE_MERGER+0x10e>
		buffer[buffer_ptr] = msg_buffer[i];
 80024b0:	f507 53d7 	add.w	r3, r7, #6880	@ 0x1ae0
 80024b4:	f103 0306 	add.w	r3, r3, #6
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	4998      	ldr	r1, [pc, #608]	@ (800271c <MESSAGE_MERGER+0x2b4>)
 80024bc:	f507 52d7 	add.w	r2, r7, #6880	@ 0x1ae0
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	440a      	add	r2, r1
 80024c4:	7811      	ldrb	r1, [r2, #0]
 80024c6:	f607 22e8 	addw	r2, r7, #2792	@ 0xae8
 80024ca:	f6a2 22b4 	subw	r2, r2, #2740	@ 0xab4
 80024ce:	54d1      	strb	r1, [r2, r3]
		if (buffer[buffer_ptr] == '^') {
 80024d0:	f507 53d7 	add.w	r3, r7, #6880	@ 0x1ae0
 80024d4:	f103 0306 	add.w	r3, r3, #6
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f607 22e8 	addw	r2, r7, #2792	@ 0xae8
 80024de:	f6a2 22b4 	subw	r2, r2, #2740	@ 0xab4
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	2b5e      	cmp	r3, #94	@ 0x5e
 80024e6:	d12a      	bne.n	800253e <MESSAGE_MERGER+0xd6>
			sscanf(
 80024e8:	f507 53bd 	add.w	r3, r7, #6048	@ 0x17a0
 80024ec:	f103 0304 	add.w	r3, r3, #4
 80024f0:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 80024f4:	f507 52bd 	add.w	r2, r7, #6048	@ 0x17a0
 80024f8:	f102 0204 	add.w	r2, r2, #4
 80024fc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002500:	3814      	subs	r0, #20
 8002502:	f507 53bd 	add.w	r3, r7, #6048	@ 0x17a0
 8002506:	f103 0304 	add.w	r3, r3, #4
 800250a:	33ca      	adds	r3, #202	@ 0xca
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	460b      	mov	r3, r1
 8002510:	4983      	ldr	r1, [pc, #524]	@ (8002720 <MESSAGE_MERGER+0x2b8>)
 8002512:	f006 fce7 	bl	8008ee4 <siscanf>
				"0,\"%128[^\"]\",%d,%700[^\r$]",
				mqttrev.topic,
				&mqttrev.length,
				mqttrev.data
			);
			strcat(str_result, mqttrev.data);
 8002516:	f507 53bd 	add.w	r3, r7, #6048	@ 0x17a0
 800251a:	f103 0304 	add.w	r3, r3, #4
 800251e:	f103 02ca 	add.w	r2, r3, #202	@ 0xca
 8002522:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8002526:	3b04      	subs	r3, #4
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f006 fd51 	bl	8008fd2 <strcat>
			buffer_ptr = 0;  // 复位buffer_ptr
 8002530:	2300      	movs	r3, #0
 8002532:	f507 52d7 	add.w	r2, r7, #6880	@ 0x1ae0
 8002536:	f102 0206 	add.w	r2, r2, #6
 800253a:	8013      	strh	r3, [r2, #0]
 800253c:	e014      	b.n	8002568 <MESSAGE_MERGER+0x100>
		} else {
			buffer_ptr++;
 800253e:	f507 53d7 	add.w	r3, r7, #6880	@ 0x1ae0
 8002542:	f103 0306 	add.w	r3, r3, #6
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	f507 52d7 	add.w	r2, r7, #6880	@ 0x1ae0
 800254e:	f102 0206 	add.w	r2, r2, #6
 8002552:	8013      	strh	r3, [r2, #0]
			if (buffer_ptr >= sizeof(buffer)) {  // 防止buffer溢出
 8002554:	f507 53d7 	add.w	r3, r7, #6880	@ 0x1ae0
 8002558:	f103 0306 	add.w	r3, r3, #6
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002562:	d301      	bcc.n	8002568 <MESSAGE_MERGER+0x100>
				return NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	e0d3      	b.n	8002710 <MESSAGE_MERGER+0x2a8>
	for (int i = 0; i < msg_length; i++) {
 8002568:	f507 53d7 	add.w	r3, r7, #6880	@ 0x1ae0
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	f507 52d7 	add.w	r2, r7, #6880	@ 0x1ae0
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	f507 53d7 	add.w	r3, r7, #6880	@ 0x1ae0
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 8002580:	f103 0314 	add.w	r3, r3, #20
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	db92      	blt.n	80024b0 <MESSAGE_MERGER+0x48>
			}
		}
	}
	cJSON* parsed_json = cJSON_Parse(str_result);
 800258a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800258e:	3b04      	subs	r3, #4
 8002590:	4618      	mov	r0, r3
 8002592:	f004 fca9 	bl	8006ee8 <cJSON_Parse>
 8002596:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 800259a:	f103 0310 	add.w	r3, r3, #16
 800259e:	6018      	str	r0, [r3, #0]
	if (!parsed_json) return NULL;
 80025a0:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 80025a4:	f103 0310 	add.w	r3, r3, #16
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <MESSAGE_MERGER+0x14a>
 80025ae:	2300      	movs	r3, #0
 80025b0:	e0ae      	b.n	8002710 <MESSAGE_MERGER+0x2a8>
	const char* prefix = "request_id=";
 80025b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002724 <MESSAGE_MERGER+0x2bc>)
 80025b4:	f507 52d6 	add.w	r2, r7, #6848	@ 0x1ac0
 80025b8:	f102 020c 	add.w	r2, r2, #12
 80025bc:	6013      	str	r3, [r2, #0]
	const char* requestID_Begin = strstr(mqttrev.topic, prefix);
 80025be:	f507 53bd 	add.w	r3, r7, #6048	@ 0x17a0
 80025c2:	f103 0304 	add.w	r3, r3, #4
 80025c6:	f507 52d6 	add.w	r2, r7, #6848	@ 0x1ac0
 80025ca:	f102 020c 	add.w	r2, r2, #12
 80025ce:	6811      	ldr	r1, [r2, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f006 fd1f 	bl	8009014 <strstr>
 80025d6:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 80025da:	f103 0308 	add.w	r3, r3, #8
 80025de:	6018      	str	r0, [r3, #0]
	if (requestID_Begin) {
 80025e0:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 80025e4:	f103 0308 	add.w	r3, r3, #8
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d077      	beq.n	80026de <MESSAGE_MERGER+0x276>
		char* head = requestID_Begin + strlen(prefix);
 80025ee:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 80025f2:	f103 030c 	add.w	r3, r3, #12
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f7fd fdfc 	bl	80001f4 <strlen>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 8002602:	f103 0308 	add.w	r3, r3, #8
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	f507 52d6 	add.w	r2, r7, #6848	@ 0x1ac0
 800260e:	f102 021c 	add.w	r2, r2, #28
 8002612:	6013      	str	r3, [r2, #0]
		char requestID[40]; uint8_t ptr = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	f507 52d6 	add.w	r2, r7, #6848	@ 0x1ac0
 800261a:	f102 021b 	add.w	r2, r2, #27
 800261e:	7013      	strb	r3, [r2, #0]
		while (*head != '\0' && *head != '/'){
 8002620:	e021      	b.n	8002666 <MESSAGE_MERGER+0x1fe>
			requestID[ptr++] = *head;
 8002622:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 8002626:	f103 031b 	add.w	r3, r3, #27
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	f507 51d6 	add.w	r1, r7, #6848	@ 0x1ac0
 8002632:	f101 011b 	add.w	r1, r1, #27
 8002636:	700a      	strb	r2, [r1, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 800263e:	f103 031c 	add.w	r3, r3, #28
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	7819      	ldrb	r1, [r3, #0]
 8002646:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800264a:	f6a3 23dc 	subw	r3, r3, #2780	@ 0xadc
 800264e:	5499      	strb	r1, [r3, r2]
			head++;
 8002650:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 8002654:	f103 031c 	add.w	r3, r3, #28
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	f507 52d6 	add.w	r2, r7, #6848	@ 0x1ac0
 8002660:	f102 021c 	add.w	r2, r2, #28
 8002664:	6013      	str	r3, [r2, #0]
		while (*head != '\0' && *head != '/'){
 8002666:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 800266a:	f103 031c 	add.w	r3, r3, #28
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <MESSAGE_MERGER+0x21e>
 8002676:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 800267a:	f103 031c 	add.w	r3, r3, #28
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b2f      	cmp	r3, #47	@ 0x2f
 8002684:	d1cd      	bne.n	8002622 <MESSAGE_MERGER+0x1ba>
		}
		requestID[ptr] = '\0';
 8002686:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 800268a:	f103 031b 	add.w	r3, r3, #27
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f607 22e8 	addw	r2, r7, #2792	@ 0xae8
 8002694:	f6a2 22dc 	subw	r2, r2, #2780	@ 0xadc
 8002698:	2100      	movs	r1, #0
 800269a:	54d1      	strb	r1, [r2, r3]

		*_requestID = (char*)malloc(strlen(requestID) + 1);
 800269c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026a0:	3b1c      	subs	r3, #28
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fda6 	bl	80001f4 <strlen>
 80026a8:	4603      	mov	r3, r0
 80026aa:	3301      	adds	r3, #1
 80026ac:	4618      	mov	r0, r3
 80026ae:	f005 fc33 	bl	8007f18 <malloc>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 80026ba:	f6a3 23e4 	subw	r3, r3, #2788	@ 0xae4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	601a      	str	r2, [r3, #0]
		strcpy(*_requestID, requestID);
 80026c2:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 80026c6:	f6a3 23e4 	subw	r3, r3, #2788	@ 0xae4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026d2:	3b1c      	subs	r3, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f006 fd35 	bl	8009146 <strcpy>
 80026dc:	e006      	b.n	80026ec <MESSAGE_MERGER+0x284>
	} else *_requestID = NULL;
 80026de:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 80026e2:	f6a3 23e4 	subw	r3, r3, #2788	@ 0xae4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
	msg_buffer[0] = '\0';
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <MESSAGE_MERGER+0x2b4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
	memset(msg_buffer, 0, 4000);
 80026f2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80026f6:	2100      	movs	r1, #0
 80026f8:	4808      	ldr	r0, [pc, #32]	@ (800271c <MESSAGE_MERGER+0x2b4>)
 80026fa:	f006 fc62 	bl	8008fc2 <memset>
	msg_ptr = -1;            // 已经解析到了JSON，将缓冲区清空，指针归零。
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <MESSAGE_MERGER+0x2c0>)
 8002700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002704:	801a      	strh	r2, [r3, #0]
	return parsed_json;
 8002706:	f507 53d6 	add.w	r3, r7, #6848	@ 0x1ac0
 800270a:	f103 0310 	add.w	r3, r3, #16
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	f507 57d7 	add.w	r7, r7, #6880	@ 0x1ae0
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000858 	.word	0x20000858
 8002720:	0800bbcc 	.word	0x0800bbcc
 8002724:	0800bbe8 	.word	0x0800bbe8
 8002728:	20000052 	.word	0x20000052

0800272c <MESSAGE_Analyse>:

uint8_t MESSAGE_Analyse(cJSON* json) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	cJSON* content = cJSON_GetObjectItemCaseSensitive(json, "content");
 8002734:	490e      	ldr	r1, [pc, #56]	@ (8002770 <MESSAGE_Analyse+0x44>)
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 fa0a 	bl	8007b50 <cJSON_GetObjectItemCaseSensitive>
 800273c:	6178      	str	r0, [r7, #20]
	cJSON* _content = cJSON_Parse(content->valuestring);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fbd0 	bl	8006ee8 <cJSON_Parse>
 8002748:	6138      	str	r0, [r7, #16]
	cJSON* status = cJSON_GetObjectItemCaseSensitive(_content, "status");
 800274a:	490a      	ldr	r1, [pc, #40]	@ (8002774 <MESSAGE_Analyse+0x48>)
 800274c:	6938      	ldr	r0, [r7, #16]
 800274e:	f005 f9ff 	bl	8007b50 <cJSON_GetObjectItemCaseSensitive>
 8002752:	60f8      	str	r0, [r7, #12]
	uint8_t _status = cJSON_IsTrue(status);
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f005 fbb1 	bl	8007ebc <cJSON_IsTrue>
 800275a:	4603      	mov	r3, r0
 800275c:	72fb      	strb	r3, [r7, #11]
	cJSON_Delete(_content);
 800275e:	6938      	ldr	r0, [r7, #16]
 8002760:	f003 fbae 	bl	8005ec0 <cJSON_Delete>
	return _status;
 8002764:	7afb      	ldrb	r3, [r7, #11]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	0800bbf4 	.word	0x0800bbf4
 8002774:	0800bbfc 	.word	0x0800bbfc

08002778 <MFRC_Init>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：MFRC的SPI接口速率为0~10Mbps
 ***************************************************************************************/
void MFRC_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
    RC522_SDA(1);
 800277c:	2201      	movs	r2, #1
 800277e:	2110      	movs	r1, #16
 8002780:	4804      	ldr	r0, [pc, #16]	@ (8002794 <MFRC_Init+0x1c>)
 8002782:	f000 feb5 	bl	80034f0 <HAL_GPIO_WritePin>
    RS522_RST(1);
 8002786:	2201      	movs	r2, #1
 8002788:	2104      	movs	r1, #4
 800278a:	4803      	ldr	r0, [pc, #12]	@ (8002798 <MFRC_Init+0x20>)
 800278c:	f000 feb0 	bl	80034f0 <HAL_GPIO_WritePin>
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400

0800279c <SPI2_RW_Byte>:
 * 入口参数: -byte:要发送的数据
 * 出口参数: -byte:接收到的数据
 ***************************************************************************************/
static uint8_t ret; // 这些函数是HAL与标准库不同的地方【读写函数】
uint8_t SPI2_RW_Byte(uint8_t byte)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
//硬件SPI
    HAL_SPI_TransmitReceive(&hspi1, &byte, &ret, 1, 10); // 把byte 写入，并读出一个值，把它存入ret
 80027a6:	1df9      	adds	r1, r7, #7
 80027a8:	230a      	movs	r3, #10
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2301      	movs	r3, #1
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <SPI2_RW_Byte+0x28>)
 80027b0:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <SPI2_RW_Byte+0x2c>)
 80027b2:	f001 fc00 	bl	8003fb6 <HAL_SPI_TransmitReceive>
    return ret;                                          // 入口是byte 的地址，读取时用的也是ret地址，一次只写入一个值10
 80027b6:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <SPI2_RW_Byte+0x28>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
//  {
//      ret = RC522_SPI_ReadByte();
//  }
//  RC522_SPI_SendByte(byte);
//  return ret;
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200017fd 	.word	0x200017fd
 80027c8:	20000254 	.word	0x20000254

080027cc <MFRC_WriteReg>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：无
 ***************************************************************************************/
void MFRC_WriteReg(uint8_t addr, uint8_t data)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	460a      	mov	r2, r1
 80027d6:	71fb      	strb	r3, [r7, #7]
 80027d8:	4613      	mov	r3, r2
 80027da:	71bb      	strb	r3, [r7, #6]
    uint8_t AddrByte;
    AddrByte = (addr << 1) & 0x7E; // 求出地址字节
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80027e6:	73fb      	strb	r3, [r7, #15]
    RC522_SDA(0);                  // NSS拉低
 80027e8:	2200      	movs	r2, #0
 80027ea:	2110      	movs	r1, #16
 80027ec:	4809      	ldr	r0, [pc, #36]	@ (8002814 <MFRC_WriteReg+0x48>)
 80027ee:	f000 fe7f 	bl	80034f0 <HAL_GPIO_WritePin>
    SPI2_RW_Byte(AddrByte);        // 写地址字节
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ffd1 	bl	800279c <SPI2_RW_Byte>
    SPI2_RW_Byte(data);            // 写数据
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ffcd 	bl	800279c <SPI2_RW_Byte>
    RC522_SDA(1);                  // NSS拉高
 8002802:	2201      	movs	r2, #1
 8002804:	2110      	movs	r1, #16
 8002806:	4803      	ldr	r0, [pc, #12]	@ (8002814 <MFRC_WriteReg+0x48>)
 8002808:	f000 fe72 	bl	80034f0 <HAL_GPIO_WritePin>
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020000 	.word	0x40020000

08002818 <MFRC_ReadReg>:
 * 出口参数：无
 * 返 回 值：-data:读到寄存器的数据
 * 说    明：无
 ***************************************************************************************/
uint8_t MFRC_ReadReg(uint8_t addr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
    uint8_t AddrByte, data;
    AddrByte = ((addr << 1) & 0x7E) | 0x80; // 求出地址字节
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b25b      	sxtb	r3, r3
 8002828:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800282c:	b25b      	sxtb	r3, r3
 800282e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002832:	b25b      	sxtb	r3, r3
 8002834:	73fb      	strb	r3, [r7, #15]
    RC522_SDA(0);                           // NSS拉低
 8002836:	2200      	movs	r2, #0
 8002838:	2110      	movs	r1, #16
 800283a:	480b      	ldr	r0, [pc, #44]	@ (8002868 <MFRC_ReadReg+0x50>)
 800283c:	f000 fe58 	bl	80034f0 <HAL_GPIO_WritePin>
    SPI2_RW_Byte(AddrByte);                 // 写地址字节
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ffaa 	bl	800279c <SPI2_RW_Byte>
    data = SPI2_RW_Byte(0x00);              // 读数据
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff ffa7 	bl	800279c <SPI2_RW_Byte>
 800284e:	4603      	mov	r3, r0
 8002850:	73bb      	strb	r3, [r7, #14]
    RC522_SDA(1);                           // NSS拉高
 8002852:	2201      	movs	r2, #1
 8002854:	2110      	movs	r1, #16
 8002856:	4804      	ldr	r0, [pc, #16]	@ (8002868 <MFRC_ReadReg+0x50>)
 8002858:	f000 fe4a 	bl	80034f0 <HAL_GPIO_WritePin>
    return data;
 800285c:	7bbb      	ldrb	r3, [r7, #14]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40020000 	.word	0x40020000

0800286c <MFRC_SetBitMask>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：无
 ***************************************************************************************/
void MFRC_SetBitMask(uint8_t addr, uint8_t mask)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	460a      	mov	r2, r1
 8002876:	71fb      	strb	r3, [r7, #7]
 8002878:	4613      	mov	r3, r2
 800287a:	71bb      	strb	r3, [r7, #6]
    uint8_t temp;
    temp = MFRC_ReadReg(addr);        // 先读回寄存器的值
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ffca 	bl	8002818 <MFRC_ReadReg>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
    MFRC_WriteReg(addr, temp | mask); // 处理过的数据再写入寄存器
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	79bb      	ldrb	r3, [r7, #6]
 800288c:	4313      	orrs	r3, r2
 800288e:	b2da      	uxtb	r2, r3
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff99 	bl	80027cc <MFRC_WriteReg>
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <MFRC_ClrBitMask>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：无
 ***************************************************************************************/
void MFRC_ClrBitMask(uint8_t addr, uint8_t mask)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	460a      	mov	r2, r1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71bb      	strb	r3, [r7, #6]
    uint8_t temp;
    temp = MFRC_ReadReg(addr);         // 先读回寄存器的值
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ffaf 	bl	8002818 <MFRC_ReadReg>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
    MFRC_WriteReg(addr, temp & ~mask); // 处理过的数据再写入寄存器
 80028be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	b25a      	sxtb	r2, r3
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4013      	ands	r3, r2
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff79 	bl	80027cc <MFRC_WriteReg>
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <MFRC_CmdFrame>:
 *           -pOutLenBit：用于MF1卡返回数据位长度的首地址
 * 返 回 值：-status：错误代码(MFRC_OK、MFRC_NOTAGERR、MFRC_ERR)
 * 说    明：无
 ***************************************************************************************/
char MFRC_CmdFrame(uint8_t cmd, uint8_t *pInData, uint8_t InLenByte, uint8_t *pOutData, uint16_t *pOutLenBit)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	4613      	mov	r3, r2
 80028f4:	73bb      	strb	r3, [r7, #14]
    uint8_t lastBits;
    uint8_t n;
    uint32_t i;
    char status = MFRC_ERR;
 80028f6:	23fe      	movs	r3, #254	@ 0xfe
 80028f8:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75bb      	strb	r3, [r7, #22]
    uint8_t waitFor = 0x00;
 80028fe:	2300      	movs	r3, #0
 8002900:	757b      	strb	r3, [r7, #21]

    /*根据命令设置标志位*/
    switch (cmd)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d006      	beq.n	8002916 <MFRC_CmdFrame+0x32>
 8002908:	2b0e      	cmp	r3, #14
 800290a:	d109      	bne.n	8002920 <MFRC_CmdFrame+0x3c>
    {
    case MFRC_AUTHENT: // Mifare认证
        irqEn = 0x12;
 800290c:	2312      	movs	r3, #18
 800290e:	75bb      	strb	r3, [r7, #22]
        waitFor = 0x10; // idleIRq中断标志
 8002910:	2310      	movs	r3, #16
 8002912:	757b      	strb	r3, [r7, #21]
        break;
 8002914:	e004      	b.n	8002920 <MFRC_CmdFrame+0x3c>
    case MFRC_TRANSCEIVE: // 发送并接收数据
        irqEn = 0x77;
 8002916:	2377      	movs	r3, #119	@ 0x77
 8002918:	75bb      	strb	r3, [r7, #22]
        waitFor = 0x30; // RxIRq和idleIRq中断标志
 800291a:	2330      	movs	r3, #48	@ 0x30
 800291c:	757b      	strb	r3, [r7, #21]
        break;
 800291e:	bf00      	nop
    }

    /*发送命令帧前准备*/
    MFRC_WriteReg(MFRC_ComIEnReg, irqEn | 0x80); // 开中断
 8002920:	7dbb      	ldrb	r3, [r7, #22]
 8002922:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4619      	mov	r1, r3
 800292a:	2002      	movs	r0, #2
 800292c:	f7ff ff4e 	bl	80027cc <MFRC_WriteReg>
    MFRC_ClrBitMask(MFRC_ComIrqReg, 0x80);       // 清除中断标志位SET1
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	2004      	movs	r0, #4
 8002934:	f7ff ffb5 	bl	80028a2 <MFRC_ClrBitMask>
    MFRC_WriteReg(MFRC_CommandReg, MFRC_IDLE);   // 取消当前命令的执行
 8002938:	2100      	movs	r1, #0
 800293a:	2001      	movs	r0, #1
 800293c:	f7ff ff46 	bl	80027cc <MFRC_WriteReg>
    MFRC_SetBitMask(MFRC_FIFOLevelReg, 0x80);    // 清除FIFO缓冲区及其标志位
 8002940:	2180      	movs	r1, #128	@ 0x80
 8002942:	200a      	movs	r0, #10
 8002944:	f7ff ff92 	bl	800286c <MFRC_SetBitMask>

    /*发送命令帧*/
    for (i = 0; i < InLenByte; i++) // 写入命令参数
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	e00a      	b.n	8002964 <MFRC_CmdFrame+0x80>
    {
        MFRC_WriteReg(MFRC_FIFODataReg, pInData[i]); // 写数据进 FIFODataReg
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	2009      	movs	r0, #9
 800295a:	f7ff ff37 	bl	80027cc <MFRC_WriteReg>
    for (i = 0; i < InLenByte; i++) // 写入命令参数
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3301      	adds	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	429a      	cmp	r2, r3
 800296a:	d3f0      	bcc.n	800294e <MFRC_CmdFrame+0x6a>
    }
    MFRC_WriteReg(MFRC_CommandReg, cmd); // 执行命令
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	4619      	mov	r1, r3
 8002970:	2001      	movs	r0, #1
 8002972:	f7ff ff2b 	bl	80027cc <MFRC_WriteReg>
    if (cmd == MFRC_TRANSCEIVE)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d103      	bne.n	8002984 <MFRC_CmdFrame+0xa0>
    {
        MFRC_SetBitMask(MFRC_BitFramingReg, 0x80); // 启动发送
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	200d      	movs	r0, #13
 8002980:	f7ff ff74 	bl	800286c <MFRC_SetBitMask>
    }
    i = 300000; // 根据时钟频率调整,操作M1卡最大等待时间25ms
 8002984:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <MFRC_CmdFrame+0x1a8>)
 8002986:	61bb      	str	r3, [r7, #24]
    do          // 认证 与寻卡等待时间
    {
        n = MFRC_ReadReg(MFRC_ComIrqReg); // 查询事件中断
 8002988:	2004      	movs	r0, #4
 800298a:	f7ff ff45 	bl	8002818 <MFRC_ReadReg>
 800298e:	4603      	mov	r3, r0
 8002990:	77fb      	strb	r3, [r7, #31]
        i--;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	3b01      	subs	r3, #1
 8002996:	61bb      	str	r3, [r7, #24]
    } while ((i != 0) && !(n & 0x01) && !(n & waitFor)); // 等待命令完成
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <MFRC_CmdFrame+0xd0>
 800299e:	7ffb      	ldrb	r3, [r7, #31]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <MFRC_CmdFrame+0xd0>
 80029a8:	7ffa      	ldrb	r2, [r7, #31]
 80029aa:	7d7b      	ldrb	r3, [r7, #21]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0e9      	beq.n	8002988 <MFRC_CmdFrame+0xa4>
    MFRC_ClrBitMask(MFRC_BitFramingReg, 0x80);           // 停止发送
 80029b4:	2180      	movs	r1, #128	@ 0x80
 80029b6:	200d      	movs	r0, #13
 80029b8:	f7ff ff73 	bl	80028a2 <MFRC_ClrBitMask>

    /*处理接收的数据*/
    if (i != 0)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d056      	beq.n	8002a70 <MFRC_CmdFrame+0x18c>
    {
        // 读错误标志寄存器BufferOfI CollErr ParityErr ProtocolErr
        if (!(MFRC_ReadReg(MFRC_ErrorReg) & 0x1B))
 80029c2:	2006      	movs	r0, #6
 80029c4:	f7ff ff28 	bl	8002818 <MFRC_ReadReg>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 031b 	and.w	r3, r3, #27
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d14c      	bne.n	8002a6c <MFRC_CmdFrame+0x188>
        {
            status = MFRC_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
            if (n & irqEn & 0x01) // 是否发生定时器中断
 80029d6:	7ffa      	ldrb	r2, [r7, #31]
 80029d8:	7dbb      	ldrb	r3, [r7, #22]
 80029da:	4013      	ands	r3, r2
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MFRC_CmdFrame+0x106>
            {
                status = MFRC_NOTAGERR;
 80029e6:	23ff      	movs	r3, #255	@ 0xff
 80029e8:	75fb      	strb	r3, [r7, #23]
            }
            if (cmd == MFRC_TRANSCEIVE)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d13f      	bne.n	8002a70 <MFRC_CmdFrame+0x18c>
            {
                // 读FIFO中保存的字节数
                n = MFRC_ReadReg(MFRC_FIFOLevelReg);
 80029f0:	200a      	movs	r0, #10
 80029f2:	f7ff ff11 	bl	8002818 <MFRC_ReadReg>
 80029f6:	4603      	mov	r3, r0
 80029f8:	77fb      	strb	r3, [r7, #31]
                lastBits = MFRC_ReadReg(MFRC_ControlReg) & 0x07; // 最后接收到得字节的有效位数
 80029fa:	200c      	movs	r0, #12
 80029fc:	f7ff ff0c 	bl	8002818 <MFRC_ReadReg>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	753b      	strb	r3, [r7, #20]
                if (lastBits)
 8002a08:	7d3b      	ldrb	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <MFRC_CmdFrame+0x142>
                {
                    *pOutLenBit = (n - 1) * 8 + lastBits; // N个字节数减去1（最后一个字节）+最后一位的位数 读取到的数据总位数
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	7d3b      	ldrb	r3, [r7, #20]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	e005      	b.n	8002a32 <MFRC_CmdFrame+0x14e>
                }
                else
                {
                    *pOutLenBit = n * 8; // 最后接收到的字节整个字节有效
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	801a      	strh	r2, [r3, #0]
                }
                if (n == 0)
 8002a32:	7ffb      	ldrb	r3, [r7, #31]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <MFRC_CmdFrame+0x158>
                {
                    n = 1;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	77fb      	strb	r3, [r7, #31]
                }
                if (n > MFRC_MAXRLEN)
 8002a3c:	7ffb      	ldrb	r3, [r7, #31]
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d901      	bls.n	8002a46 <MFRC_CmdFrame+0x162>
                {
                    n = MFRC_MAXRLEN;
 8002a42:	2312      	movs	r3, #18
 8002a44:	77fb      	strb	r3, [r7, #31]
                }
                for (i = 0; i < n; i++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	e00a      	b.n	8002a62 <MFRC_CmdFrame+0x17e>
                {
                    pOutData[i] = MFRC_ReadReg(MFRC_FIFODataReg);
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	18d4      	adds	r4, r2, r3
 8002a52:	2009      	movs	r0, #9
 8002a54:	f7ff fee0 	bl	8002818 <MFRC_ReadReg>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d3f0      	bcc.n	8002a4c <MFRC_CmdFrame+0x168>
 8002a6a:	e001      	b.n	8002a70 <MFRC_CmdFrame+0x18c>
                }
            }
        }
        else
        {
            status = MFRC_ERR;
 8002a6c:	23fe      	movs	r3, #254	@ 0xfe
 8002a6e:	75fb      	strb	r3, [r7, #23]
        }
    }

    MFRC_SetBitMask(MFRC_ControlReg, 0x80);    // 停止定时器运行
 8002a70:	2180      	movs	r1, #128	@ 0x80
 8002a72:	200c      	movs	r0, #12
 8002a74:	f7ff fefa 	bl	800286c <MFRC_SetBitMask>
    MFRC_WriteReg(MFRC_CommandReg, MFRC_IDLE); // 取消当前命令的执行
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7ff fea6 	bl	80027cc <MFRC_WriteReg>

    return status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	@ 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	000493e0 	.word	0x000493e0

08002a90 <PCD_Reset>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：无
 ***************************************************************************************/
void PCD_Reset(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
    /*硬复位*/
    RS522_RST(1); // 用到复位引脚
 8002a94:	2201      	movs	r2, #1
 8002a96:	2104      	movs	r1, #4
 8002a98:	481e      	ldr	r0, [pc, #120]	@ (8002b14 <PCD_Reset+0x84>)
 8002a9a:	f000 fd29 	bl	80034f0 <HAL_GPIO_WritePin>
    osDelay(2);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f000 f9c2 	bl	8002e28 <HAL_Delay>
    RS522_RST(0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	481a      	ldr	r0, [pc, #104]	@ (8002b14 <PCD_Reset+0x84>)
 8002aaa:	f000 fd21 	bl	80034f0 <HAL_GPIO_WritePin>
    osDelay(2);
 8002aae:	2002      	movs	r0, #2
 8002ab0:	f000 f9ba 	bl	8002e28 <HAL_Delay>
    RS522_RST(1);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	4816      	ldr	r0, [pc, #88]	@ (8002b14 <PCD_Reset+0x84>)
 8002aba:	f000 fd19 	bl	80034f0 <HAL_GPIO_WritePin>
    osDelay(2);
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f000 f9b2 	bl	8002e28 <HAL_Delay>

    /*软复位*/
    MFRC_WriteReg(MFRC_CommandReg, MFRC_RESETPHASE);
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff fe80 	bl	80027cc <MFRC_WriteReg>
    osDelay(2);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f000 f9ab 	bl	8002e28 <HAL_Delay>

    /*复位后的初始化配置*/
    MFRC_WriteReg(MFRC_ModeReg, 0x3D);   // CRC初始值0x6363
 8002ad2:	213d      	movs	r1, #61	@ 0x3d
 8002ad4:	2011      	movs	r0, #17
 8002ad6:	f7ff fe79 	bl	80027cc <MFRC_WriteReg>
    MFRC_WriteReg(MFRC_TReloadRegL, 30); // 定时器重装值
 8002ada:	211e      	movs	r1, #30
 8002adc:	202d      	movs	r0, #45	@ 0x2d
 8002ade:	f7ff fe75 	bl	80027cc <MFRC_WriteReg>
    MFRC_WriteReg(MFRC_TReloadRegH, 0);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	202c      	movs	r0, #44	@ 0x2c
 8002ae6:	f7ff fe71 	bl	80027cc <MFRC_WriteReg>
    MFRC_WriteReg(MFRC_TModeReg, 0x8D);      // 定义内部定时器的设置
 8002aea:	218d      	movs	r1, #141	@ 0x8d
 8002aec:	202a      	movs	r0, #42	@ 0x2a
 8002aee:	f7ff fe6d 	bl	80027cc <MFRC_WriteReg>
    MFRC_WriteReg(MFRC_TPrescalerReg, 0x3E); // 设置定时器预分频值
 8002af2:	213e      	movs	r1, #62	@ 0x3e
 8002af4:	202b      	movs	r0, #43	@ 0x2b
 8002af6:	f7ff fe69 	bl	80027cc <MFRC_WriteReg>
    MFRC_WriteReg(MFRC_TxAutoReg, 0x40);     // 调制发送信号为100%ASK
 8002afa:	2140      	movs	r1, #64	@ 0x40
 8002afc:	2015      	movs	r0, #21
 8002afe:	f7ff fe65 	bl	80027cc <MFRC_WriteReg>

    PCD_AntennaOff(); // 关天线
 8002b02:	f000 f81e 	bl	8002b42 <PCD_AntennaOff>
    osDelay(2);
 8002b06:	2002      	movs	r0, #2
 8002b08:	f000 f98e 	bl	8002e28 <HAL_Delay>
    PCD_AntennaOn(); // 开天线
 8002b0c:	f000 f804 	bl	8002b18 <PCD_AntennaOn>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40020400 	.word	0x40020400

08002b18 <PCD_AntennaOn>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：每次开启或关闭天线之间应至少有1ms的间隔
 ***************************************************************************************/
void PCD_AntennaOn(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
    uint8_t temp;
    temp = MFRC_ReadReg(MFRC_TxControlReg);
 8002b1e:	2014      	movs	r0, #20
 8002b20:	f7ff fe7a 	bl	8002818 <MFRC_ReadReg>
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03))
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <PCD_AntennaOn+0x22>
    {
        MFRC_SetBitMask(MFRC_TxControlReg, 0x03);
 8002b32:	2103      	movs	r1, #3
 8002b34:	2014      	movs	r0, #20
 8002b36:	f7ff fe99 	bl	800286c <MFRC_SetBitMask>
    }
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <PCD_AntennaOff>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：每次开启或关闭天线之间应至少有1ms的间隔
 ***************************************************************************************/
void PCD_AntennaOff(void)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
    MFRC_ClrBitMask(MFRC_TxControlReg, 0x03);
 8002b46:	2103      	movs	r1, #3
 8002b48:	2014      	movs	r0, #20
 8002b4a:	f7ff feaa 	bl	80028a2 <MFRC_ClrBitMask>
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <PCD_Init>:
 * 出口参数：无
 * 返 回 值：无
 * 说    明：无
 ***************************************************************************************/
void PCD_Init(void)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	af00      	add	r7, sp, #0
    MFRC_Init();      // MFRC管脚配置
 8002b56:	f7ff fe0f 	bl	8002778 <MFRC_Init>
    PCD_Reset();      // PCD复位  并初始化配置
 8002b5a:	f7ff ff99 	bl	8002a90 <PCD_Reset>
    PCD_AntennaOff(); // 关闭天线
 8002b5e:	f7ff fff0 	bl	8002b42 <PCD_AntennaOff>
    PCD_AntennaOn();  // 开启天线
 8002b62:	f7ff ffd9 	bl	8002b18 <PCD_AntennaOn>
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <PCD_Request>:
 *                       0x4403：Mifare_DESFire
 * 返 回 值：-status：错误代码(PCD_OK、PCD_NOTAGERR、PCD_ERR)
 * 说    明：无
 ***************************************************************************************/
char PCD_Request(uint8_t RequestMode, uint8_t *pCardType)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b08a      	sub	sp, #40	@ 0x28
 8002b6e:	af02      	add	r7, sp, #8
 8002b70:	4603      	mov	r3, r0
 8002b72:	6039      	str	r1, [r7, #0]
 8002b74:	71fb      	strb	r3, [r7, #7]
    int status;
    uint16_t unLen;
    uint8_t CmdFrameBuf[MFRC_MAXRLEN];

    MFRC_ClrBitMask(MFRC_Status2Reg, 0x08);   // 关内部温度传感器
 8002b76:	2108      	movs	r1, #8
 8002b78:	2008      	movs	r0, #8
 8002b7a:	f7ff fe92 	bl	80028a2 <MFRC_ClrBitMask>
    MFRC_WriteReg(MFRC_BitFramingReg, 0x07);  // 存储模式，发送模式，是否启动发送等
 8002b7e:	2107      	movs	r1, #7
 8002b80:	200d      	movs	r0, #13
 8002b82:	f7ff fe23 	bl	80027cc <MFRC_WriteReg>
    MFRC_SetBitMask(MFRC_TxControlReg, 0x03); // 配置调制信号13.56MHZ
 8002b86:	2103      	movs	r1, #3
 8002b88:	2014      	movs	r0, #20
 8002b8a:	f7ff fe6f 	bl	800286c <MFRC_SetBitMask>

    CmdFrameBuf[0] = RequestMode; // 存入 卡片命令字
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	723b      	strb	r3, [r7, #8]

    status = MFRC_CmdFrame(MFRC_TRANSCEIVE, CmdFrameBuf, 1, CmdFrameBuf, &unLen);
 8002b92:	f107 0208 	add.w	r2, r7, #8
 8002b96:	f107 0108 	add.w	r1, r7, #8
 8002b9a:	f107 031a 	add.w	r3, r7, #26
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	200c      	movs	r0, #12
 8002ba6:	f7ff fe9d 	bl	80028e4 <MFRC_CmdFrame>
 8002baa:	4603      	mov	r3, r0
 8002bac:	61fb      	str	r3, [r7, #28]

    if ((status == PCD_OK) && (unLen == 0x10)) // 寻卡成功返回卡类型
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <PCD_Request+0x5e>
 8002bb4:	8b7b      	ldrh	r3, [r7, #26]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d106      	bne.n	8002bc8 <PCD_Request+0x5e>
    {
        *pCardType = CmdFrameBuf[0];
 8002bba:	7a3a      	ldrb	r2, [r7, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	701a      	strb	r2, [r3, #0]
        *(pCardType + 1) = CmdFrameBuf[1];
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	7a7a      	ldrb	r2, [r7, #9]
 8002bc6:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	b2db      	uxtb	r3, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <PCD_Anticoll>:
 * 出口参数：-pSnr：卡片序列号,4字节
 * 返 回 值：-status：错误代码(PCD_OK、PCD_NOTAGERR、PCD_ERR)
 * 说    明：无
 ***************************************************************************************/
char PCD_Anticoll(uint8_t *pSnr)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
    char status;
    uint8_t i, snr_check = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	777b      	strb	r3, [r7, #29]
    uint16_t unLen;
    uint8_t CmdFrameBuf[MFRC_MAXRLEN];

    MFRC_ClrBitMask(MFRC_Status2Reg, 0x08);  // 清MFCryptol On位 只有成功执行MFAuthent命令后，该位才能置位
 8002be0:	2108      	movs	r1, #8
 8002be2:	2008      	movs	r0, #8
 8002be4:	f7ff fe5d 	bl	80028a2 <MFRC_ClrBitMask>
    MFRC_WriteReg(MFRC_BitFramingReg, 0x00); // 清理寄存器 停止收发
 8002be8:	2100      	movs	r1, #0
 8002bea:	200d      	movs	r0, #13
 8002bec:	f7ff fdee 	bl	80027cc <MFRC_WriteReg>
    MFRC_ClrBitMask(MFRC_CollReg, 0x80);     // 清ValuesAfterColl所有接收的位在冲突后被清除
 8002bf0:	2180      	movs	r1, #128	@ 0x80
 8002bf2:	200e      	movs	r0, #14
 8002bf4:	f7ff fe55 	bl	80028a2 <MFRC_ClrBitMask>

    CmdFrameBuf[0] = PICC_ANTICOLL1; // 卡片防冲突命令
 8002bf8:	2393      	movs	r3, #147	@ 0x93
 8002bfa:	723b      	strb	r3, [r7, #8]
    CmdFrameBuf[1] = 0x20;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	727b      	strb	r3, [r7, #9]

    status = MFRC_CmdFrame(MFRC_TRANSCEIVE, CmdFrameBuf, 2, CmdFrameBuf, &unLen); // 与卡片通信
 8002c00:	f107 0208 	add.w	r2, r7, #8
 8002c04:	f107 0108 	add.w	r1, r7, #8
 8002c08:	f107 031a 	add.w	r3, r7, #26
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	2202      	movs	r2, #2
 8002c12:	200c      	movs	r0, #12
 8002c14:	f7ff fe66 	bl	80028e4 <MFRC_CmdFrame>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	77fb      	strb	r3, [r7, #31]

    if (status == PCD_OK) // 通信成功
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d123      	bne.n	8002c6a <PCD_Anticoll+0x96>
    {
        for (i = 0; i < 4; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	77bb      	strb	r3, [r7, #30]
 8002c26:	e013      	b.n	8002c50 <PCD_Anticoll+0x7c>
        {
            *(pSnr + i) = CmdFrameBuf[i]; // 读出UID
 8002c28:	7fba      	ldrb	r2, [r7, #30]
 8002c2a:	7fbb      	ldrb	r3, [r7, #30]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	440b      	add	r3, r1
 8002c30:	3220      	adds	r2, #32
 8002c32:	443a      	add	r2, r7
 8002c34:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002c38:	701a      	strb	r2, [r3, #0]
            snr_check ^= CmdFrameBuf[i];
 8002c3a:	7fbb      	ldrb	r3, [r7, #30]
 8002c3c:	3320      	adds	r3, #32
 8002c3e:	443b      	add	r3, r7
 8002c40:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002c44:	7f7b      	ldrb	r3, [r7, #29]
 8002c46:	4053      	eors	r3, r2
 8002c48:	777b      	strb	r3, [r7, #29]
        for (i = 0; i < 4; i++)
 8002c4a:	7fbb      	ldrb	r3, [r7, #30]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	77bb      	strb	r3, [r7, #30]
 8002c50:	7fbb      	ldrb	r3, [r7, #30]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d9e8      	bls.n	8002c28 <PCD_Anticoll+0x54>
        }
        if (snr_check != CmdFrameBuf[i])
 8002c56:	7fbb      	ldrb	r3, [r7, #30]
 8002c58:	3320      	adds	r3, #32
 8002c5a:	443b      	add	r3, r7
 8002c5c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002c60:	7f7a      	ldrb	r2, [r7, #29]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <PCD_Anticoll+0x96>
        {
            status = PCD_ERR;
 8002c66:	23fe      	movs	r3, #254	@ 0xfe
 8002c68:	77fb      	strb	r3, [r7, #31]
        }
    }

    MFRC_SetBitMask(MFRC_CollReg, 0x80);
 8002c6a:	2180      	movs	r1, #128	@ 0x80
 8002c6c:	200e      	movs	r0, #14
 8002c6e:	f7ff fdfd 	bl	800286c <MFRC_SetBitMask>
    return status;
 8002c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <RFID_GET_UUID>:



uint8_t lastCardUid[4];

uint8_t RFID_GET_UUID(char uid[]) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	6078      	str	r0, [r7, #4]
	PCD_Reset();
 8002c84:	f7ff ff04 	bl	8002a90 <PCD_Reset>
	uint8_t card_type[2];
	uint8_t pSnr[4];
	if (PCD_Request(PICC_REQALL, card_type) == PCD_OK) {
 8002c88:	f107 0310 	add.w	r3, r7, #16
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	2052      	movs	r0, #82	@ 0x52
 8002c90:	f7ff ff6b 	bl	8002b6a <PCD_Request>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d14a      	bne.n	8002d30 <RFID_GET_UUID+0xb4>
		if (PCD_Anticoll(pSnr) == PCD_OK) {
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff98 	bl	8002bd4 <PCD_Anticoll>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d142      	bne.n	8002d30 <RFID_GET_UUID+0xb4>
			uint8_t sameBit = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	77fb      	strb	r3, [r7, #31]
			for (int i = 0; i < 4; i++) if (pSnr[i] == lastCardUid[i]) sameBit++;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e010      	b.n	8002cd6 <RFID_GET_UUID+0x5a>
 8002cb4:	f107 020c 	add.w	r2, r7, #12
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	491f      	ldr	r1, [pc, #124]	@ (8002d3c <RFID_GET_UUID+0xc0>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	440b      	add	r3, r1
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d102      	bne.n	8002cd0 <RFID_GET_UUID+0x54>
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	ddeb      	ble.n	8002cb4 <RFID_GET_UUID+0x38>
			if (sameBit < 4) {
 8002cdc:	7ffb      	ldrb	r3, [r7, #31]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d826      	bhi.n	8002d30 <RFID_GET_UUID+0xb4>
				BUZZER_BUZZ_TWICE(100, 100);
 8002ce2:	2164      	movs	r1, #100	@ 0x64
 8002ce4:	2064      	movs	r0, #100	@ 0x64
 8002ce6:	f7fe ff75 	bl	8001bd4 <BUZZER_BUZZ_TWICE>
				for (int i = 0; i < 4; i++) lastCardUid[i] = pSnr[i];
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e00c      	b.n	8002d0a <RFID_GET_UUID+0x8e>
 8002cf0:	f107 020c 	add.w	r2, r7, #12
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	7819      	ldrb	r1, [r3, #0]
 8002cfa:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <RFID_GET_UUID+0xc0>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4413      	add	r3, r2
 8002d00:	460a      	mov	r2, r1
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	ddef      	ble.n	8002cf0 <RFID_GET_UUID+0x74>
				sprintf(
					uid,
					"%02X%02X%02X%02X",
					pSnr[0], pSnr[1], pSnr[2], pSnr[3]
 8002d10:	7b3b      	ldrb	r3, [r7, #12]
				sprintf(
 8002d12:	4619      	mov	r1, r3
					pSnr[0], pSnr[1], pSnr[2], pSnr[3]
 8002d14:	7b7b      	ldrb	r3, [r7, #13]
				sprintf(
 8002d16:	4618      	mov	r0, r3
					pSnr[0], pSnr[1], pSnr[2], pSnr[3]
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
				sprintf(
 8002d1c:	9201      	str	r2, [sp, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4603      	mov	r3, r0
 8002d22:	460a      	mov	r2, r1
 8002d24:	4906      	ldr	r1, [pc, #24]	@ (8002d40 <RFID_GET_UUID+0xc4>)
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f006 f8bc 	bl	8008ea4 <siprintf>
				);
				return 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <RFID_GET_UUID+0xb6>
			}
		}
	}
	return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20001800 	.word	0x20001800
 8002d40:	0800bc04 	.word	0x0800bc04

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d48:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <HAL_Init+0x40>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_Init+0x40>)
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a07      	ldr	r2, [pc, #28]	@ (8002d84 <HAL_Init+0x40>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	f000 f94f 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d72:	200f      	movs	r0, #15
 8002d74:	f000 f808 	bl	8002d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d78:	f7fe fbb8 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00

08002d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_InitTick+0x54>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_InitTick+0x58>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f967 	bl	800307a <HAL_SYSTICK_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00e      	b.n	8002dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b0f      	cmp	r3, #15
 8002dba:	d80a      	bhi.n	8002dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f000 f92f 	bl	8003026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc8:	4a06      	ldr	r2, [pc, #24]	@ (8002de4 <HAL_InitTick+0x5c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000058 	.word	0x20000058
 8002de4:	20000054 	.word	0x20000054

08002de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_IncTick+0x20>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_IncTick+0x24>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <HAL_IncTick+0x24>)
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000058 	.word	0x20000058
 8002e0c:	20001804 	.word	0x20001804

08002e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_GetTick+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20001804 	.word	0x20001804

08002e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff ffee 	bl	8002e10 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d005      	beq.n	8002e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_Delay+0x44>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4e:	bf00      	nop
 8002e50:	f7ff ffde 	bl	8002e10 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d8f7      	bhi.n	8002e50 <HAL_Delay+0x28>
  {
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000058 	.word	0x20000058

08002e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e80:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea2:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	60d3      	str	r3, [r2, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 0307 	and.w	r3, r3, #7
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	db0b      	blt.n	8002efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4907      	ldr	r1, [pc, #28]	@ (8002f0c <__NVIC_EnableIRQ+0x38>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	db0a      	blt.n	8002f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	490c      	ldr	r1, [pc, #48]	@ (8002f5c <__NVIC_SetPriority+0x4c>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	440b      	add	r3, r1
 8002f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f38:	e00a      	b.n	8002f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <__NVIC_SetPriority+0x50>)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3b04      	subs	r3, #4
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	761a      	strb	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	@ 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf28      	it	cs
 8002f82:	2304      	movcs	r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d902      	bls.n	8002f94 <NVIC_EncodePriority+0x30>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3b03      	subs	r3, #3
 8002f92:	e000      	b.n	8002f96 <NVIC_EncodePriority+0x32>
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	4313      	orrs	r3, r2
         );
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff8e 	bl	8002f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	@ (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff29 	bl	8002e70 <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003038:	f7ff ff3e 	bl	8002eb8 <__NVIC_GetPriorityGrouping>
 800303c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff ff8e 	bl	8002f64 <NVIC_EncodePriority>
 8003048:	4602      	mov	r2, r0
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff5d 	bl	8002f10 <__NVIC_SetPriority>
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff31 	bl	8002ed4 <__NVIC_EnableIRQ>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffa2 	bl	8002fcc <SysTick_Config>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff feb6 	bl	8002e10 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d008      	beq.n	80030c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e052      	b.n	800316a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0216 	bic.w	r2, r2, #22
 80030d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <HAL_DMA_Abort+0x62>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0208 	bic.w	r2, r2, #8
 8003102:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003114:	e013      	b.n	800313e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003116:	f7ff fe7b 	bl	8002e10 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b05      	cmp	r3, #5
 8003122:	d90c      	bls.n	800313e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2203      	movs	r2, #3
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e015      	b.n	800316a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e4      	bne.n	8003116 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	223f      	movs	r2, #63	@ 0x3f
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d004      	beq.n	8003190 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2280      	movs	r2, #128	@ 0x80
 800318a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e00c      	b.n	80031aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2205      	movs	r2, #5
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	@ 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e159      	b.n	8003488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d4:	2201      	movs	r2, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f040 8148 	bne.w	8003482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d005      	beq.n	800320a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003206:	2b02      	cmp	r3, #2
 8003208:	d130      	bne.n	800326c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	2203      	movs	r2, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003240:	2201      	movs	r2, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 0201 	and.w	r2, r3, #1
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b03      	cmp	r3, #3
 8003276:	d017      	beq.n	80032a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d123      	bne.n	80032fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	69b9      	ldr	r1, [r7, #24]
 80032f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a2 	beq.w	8003482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b57      	ldr	r3, [pc, #348]	@ (80034a0 <HAL_GPIO_Init+0x2e8>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	4a56      	ldr	r2, [pc, #344]	@ (80034a0 <HAL_GPIO_Init+0x2e8>)
 8003348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800334c:	6453      	str	r3, [r2, #68]	@ 0x44
 800334e:	4b54      	ldr	r3, [pc, #336]	@ (80034a0 <HAL_GPIO_Init+0x2e8>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335a:	4a52      	ldr	r2, [pc, #328]	@ (80034a4 <HAL_GPIO_Init+0x2ec>)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	220f      	movs	r2, #15
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a49      	ldr	r2, [pc, #292]	@ (80034a8 <HAL_GPIO_Init+0x2f0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d019      	beq.n	80033ba <HAL_GPIO_Init+0x202>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a48      	ldr	r2, [pc, #288]	@ (80034ac <HAL_GPIO_Init+0x2f4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_GPIO_Init+0x1fe>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a47      	ldr	r2, [pc, #284]	@ (80034b0 <HAL_GPIO_Init+0x2f8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00d      	beq.n	80033b2 <HAL_GPIO_Init+0x1fa>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a46      	ldr	r2, [pc, #280]	@ (80034b4 <HAL_GPIO_Init+0x2fc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x1f6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a45      	ldr	r2, [pc, #276]	@ (80034b8 <HAL_GPIO_Init+0x300>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_GPIO_Init+0x1f2>
 80033a6:	2304      	movs	r3, #4
 80033a8:	e008      	b.n	80033bc <HAL_GPIO_Init+0x204>
 80033aa:	2307      	movs	r3, #7
 80033ac:	e006      	b.n	80033bc <HAL_GPIO_Init+0x204>
 80033ae:	2303      	movs	r3, #3
 80033b0:	e004      	b.n	80033bc <HAL_GPIO_Init+0x204>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e002      	b.n	80033bc <HAL_GPIO_Init+0x204>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_GPIO_Init+0x204>
 80033ba:	2300      	movs	r3, #0
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f002 0203 	and.w	r2, r2, #3
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	4093      	lsls	r3, r2
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033cc:	4935      	ldr	r1, [pc, #212]	@ (80034a4 <HAL_GPIO_Init+0x2ec>)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	3302      	adds	r3, #2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <HAL_GPIO_Init+0x304>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033fe:	4a2f      	ldr	r2, [pc, #188]	@ (80034bc <HAL_GPIO_Init+0x304>)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003404:	4b2d      	ldr	r3, [pc, #180]	@ (80034bc <HAL_GPIO_Init+0x304>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003428:	4a24      	ldr	r2, [pc, #144]	@ (80034bc <HAL_GPIO_Init+0x304>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800342e:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <HAL_GPIO_Init+0x304>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003452:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <HAL_GPIO_Init+0x304>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003458:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <HAL_GPIO_Init+0x304>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800347c:	4a0f      	ldr	r2, [pc, #60]	@ (80034bc <HAL_GPIO_Init+0x304>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	f67f aea2 	bls.w	80031d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3724      	adds	r7, #36	@ 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40013800 	.word	0x40013800
 80034a8:	40020000 	.word	0x40020000
 80034ac:	40020400 	.word	0x40020400
 80034b0:	40020800 	.word	0x40020800
 80034b4:	40020c00 	.word	0x40020c00
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40013c00 	.word	0x40013c00

080034c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e001      	b.n	80034e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	041a      	lsls	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e267      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d075      	beq.n	800362e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003542:	4b88      	ldr	r3, [pc, #544]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d00c      	beq.n	8003568 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4b85      	ldr	r3, [pc, #532]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003556:	2b08      	cmp	r3, #8
 8003558:	d112      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4b82      	ldr	r3, [pc, #520]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003566:	d10b      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	4b7e      	ldr	r3, [pc, #504]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05b      	beq.n	800362c <HAL_RCC_OscConfig+0x108>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d157      	bne.n	800362c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e242      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003588:	d106      	bne.n	8003598 <HAL_RCC_OscConfig+0x74>
 800358a:	4b76      	ldr	r3, [pc, #472]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a75      	ldr	r2, [pc, #468]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e01d      	b.n	80035d4 <HAL_RCC_OscConfig+0xb0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x98>
 80035a2:	4b70      	ldr	r3, [pc, #448]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0xb0>
 80035bc:	4b69      	ldr	r3, [pc, #420]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a68      	ldr	r2, [pc, #416]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b66      	ldr	r3, [pc, #408]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a65      	ldr	r2, [pc, #404]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7ff fc18 	bl	8002e10 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7ff fc14 	bl	8002e10 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e207      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0xc0>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7ff fc04 	bl	8002e10 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7ff fc00 	bl	8002e10 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1f3      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	4b51      	ldr	r3, [pc, #324]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0xe8>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d063      	beq.n	8003702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800363a:	4b4a      	ldr	r3, [pc, #296]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800364e:	2b08      	cmp	r3, #8
 8003650:	d11c      	bne.n	800368c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b44      	ldr	r3, [pc, #272]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d116      	bne.n	800368c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	4b41      	ldr	r3, [pc, #260]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_RCC_OscConfig+0x152>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e1c7      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4937      	ldr	r1, [pc, #220]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	e03a      	b.n	8003702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003694:	4b34      	ldr	r3, [pc, #208]	@ (8003768 <HAL_RCC_OscConfig+0x244>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7ff fbb9 	bl	8002e10 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a2:	f7ff fbb5 	bl	8002e10 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1a8      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4925      	ldr	r1, [pc, #148]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d6:	4b24      	ldr	r3, [pc, #144]	@ (8003768 <HAL_RCC_OscConfig+0x244>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7ff fb98 	bl	8002e10 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e4:	f7ff fb94 	bl	8002e10 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e187      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d036      	beq.n	800377c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <HAL_RCC_OscConfig+0x248>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7ff fb78 	bl	8002e10 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003724:	f7ff fb74 	bl	8002e10 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e167      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCC_OscConfig+0x240>)
 8003738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x200>
 8003742:	e01b      	b.n	800377c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <HAL_RCC_OscConfig+0x248>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7ff fb61 	bl	8002e10 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	e00e      	b.n	8003770 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003752:	f7ff fb5d 	bl	8002e10 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d907      	bls.n	8003770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e150      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
 8003764:	40023800 	.word	0x40023800
 8003768:	42470000 	.word	0x42470000
 800376c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	4b88      	ldr	r3, [pc, #544]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ea      	bne.n	8003752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8097 	beq.w	80038b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378e:	4b81      	ldr	r3, [pc, #516]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	4b7d      	ldr	r3, [pc, #500]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b77      	ldr	r3, [pc, #476]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d118      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c6:	4b74      	ldr	r3, [pc, #464]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a73      	ldr	r2, [pc, #460]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7ff fb1d 	bl	8002e10 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7ff fb19 	bl	8002e10 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e10c      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003998 <HAL_RCC_OscConfig+0x474>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x2ea>
 8003800:	4b64      	ldr	r3, [pc, #400]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003804:	4a63      	ldr	r2, [pc, #396]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	@ 0x70
 800380c:	e01c      	b.n	8003848 <HAL_RCC_OscConfig+0x324>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b05      	cmp	r3, #5
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x30c>
 8003816:	4b5f      	ldr	r3, [pc, #380]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	4a5e      	ldr	r2, [pc, #376]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	6713      	str	r3, [r2, #112]	@ 0x70
 8003822:	4b5c      	ldr	r3, [pc, #368]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4a5b      	ldr	r2, [pc, #364]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	6713      	str	r3, [r2, #112]	@ 0x70
 800382e:	e00b      	b.n	8003848 <HAL_RCC_OscConfig+0x324>
 8003830:	4b58      	ldr	r3, [pc, #352]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	4a57      	ldr	r2, [pc, #348]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6713      	str	r3, [r2, #112]	@ 0x70
 800383c:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003840:	4a54      	ldr	r2, [pc, #336]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003842:	f023 0304 	bic.w	r3, r3, #4
 8003846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7ff fade 	bl	8002e10 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7ff fada 	bl	8002e10 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0cb      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386e:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ee      	beq.n	8003858 <HAL_RCC_OscConfig+0x334>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387c:	f7ff fac8 	bl	8002e10 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003882:	e00a      	b.n	800389a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7ff fac4 	bl	8002e10 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0b5      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389a:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ee      	bne.n	8003884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ac:	4b39      	ldr	r3, [pc, #228]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4a38      	ldr	r2, [pc, #224]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80a1 	beq.w	8003a04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c2:	4b34      	ldr	r3, [pc, #208]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d05c      	beq.n	8003988 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d141      	bne.n	800395a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_RCC_OscConfig+0x478>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7ff fa98 	bl	8002e10 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7ff fa94 	bl	8002e10 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e087      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69da      	ldr	r2, [r3, #28]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	019b      	lsls	r3, r3, #6
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	3b01      	subs	r3, #1
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	491b      	ldr	r1, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x478>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7ff fa6d 	bl	8002e10 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7ff fa69 	bl	8002e10 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e05c      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x416>
 8003958:	e054      	b.n	8003a04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <HAL_RCC_OscConfig+0x478>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7ff fa56 	bl	8002e10 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7ff fa52 	bl	8002e10 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e045      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_RCC_OscConfig+0x470>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x444>
 8003986:	e03d      	b.n	8003a04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e038      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x4ec>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d028      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d121      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d11a      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0cc      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b68      	ldr	r3, [pc, #416]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d90c      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b65      	ldr	r3, [pc, #404]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0b8      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4b59      	ldr	r3, [pc, #356]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a80:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a52      	ldr	r2, [pc, #328]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	494d      	ldr	r1, [pc, #308]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d044      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d119      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e06f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e067      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b37      	ldr	r3, [pc, #220]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4934      	ldr	r1, [pc, #208]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7ff f984 	bl	8002e10 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7ff f980 	bl	8002e10 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e04f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d20c      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4916      	ldr	r1, [pc, #88]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490e      	ldr	r1, [pc, #56]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b9a:	f000 f889 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490a      	ldr	r1, [pc, #40]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f8e4 	bl	8002d88 <HAL_InitTick>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023c00 	.word	0x40023c00
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800bdc8 	.word	0x0800bdc8
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000054 	.word	0x20000054

08003be0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	@ 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d129      	bne.n	8003c46 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c02:	4b28      	ldr	r3, [pc, #160]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c20:	2300      	movs	r3, #0
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003c24:	f107 031c 	add.w	r3, r7, #28
 8003c28:	4619      	mov	r1, r3
 8003c2a:	481f      	ldr	r0, [pc, #124]	@ (8003ca8 <HAL_RCC_MCOConfig+0xc8>)
 8003c2c:	f7ff fac4 	bl	80031b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003c30:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	4919      	ldr	r1, [pc, #100]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003c44:	e029      	b.n	8003c9a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c56:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003c62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	480b      	ldr	r0, [pc, #44]	@ (8003cac <HAL_RCC_MCOConfig+0xcc>)
 8003c80:	f7ff fa9a 	bl	80031b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003c84:	4b07      	ldr	r3, [pc, #28]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	00d9      	lsls	r1, r3, #3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_MCOConfig+0xc4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	3730      	adds	r7, #48	@ 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020800 	.word	0x40020800

08003cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb4:	b090      	sub	sp, #64	@ 0x40
 8003cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc8:	4b59      	ldr	r3, [pc, #356]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	f200 80a1 	bhi.w	8003e1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ce2:	e09b      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ce8:	e09b      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cea:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cee:	e098      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d028      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b4a      	ldr	r3, [pc, #296]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d1c:	fb03 f201 	mul.w	r2, r3, r1
 8003d20:	2300      	movs	r3, #0
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	4a43      	ldr	r2, [pc, #268]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d30:	460a      	mov	r2, r1
 8003d32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d36:	4413      	add	r3, r2
 8003d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	61fa      	str	r2, [r7, #28]
 8003d42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d4a:	f7fc ff65 	bl	8000c18 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4613      	mov	r3, r2
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d56:	e053      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d58:	4b35      	ldr	r3, [pc, #212]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	2200      	movs	r2, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	617a      	str	r2, [r7, #20]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d6a:	f04f 0b00 	mov.w	fp, #0
 8003d6e:	4652      	mov	r2, sl
 8003d70:	465b      	mov	r3, fp
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	0159      	lsls	r1, r3, #5
 8003d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d80:	0150      	lsls	r0, r2, #5
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	ebb2 080a 	subs.w	r8, r2, sl
 8003d8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003da2:	ebb2 0408 	subs.w	r4, r2, r8
 8003da6:	eb63 0509 	sbc.w	r5, r3, r9
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	00eb      	lsls	r3, r5, #3
 8003db4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db8:	00e2      	lsls	r2, r4, #3
 8003dba:	4614      	mov	r4, r2
 8003dbc:	461d      	mov	r5, r3
 8003dbe:	eb14 030a 	adds.w	r3, r4, sl
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	eb45 030b 	adc.w	r3, r5, fp
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	028b      	lsls	r3, r1, #10
 8003dda:	4621      	mov	r1, r4
 8003ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003de0:	4621      	mov	r1, r4
 8003de2:	028a      	lsls	r2, r1, #10
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	2200      	movs	r2, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df4:	f7fc ff10 	bl	8000c18 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3740      	adds	r7, #64	@ 0x40
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	017d7840 	.word	0x017d7840

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b03      	ldr	r3, [pc, #12]	@ (8003e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000000 	.word	0x20000000

08003e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e58:	f7ff fff0 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0a9b      	lsrs	r3, r3, #10
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4903      	ldr	r1, [pc, #12]	@ (8003e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	0800bdd8 	.word	0x0800bdd8

08003e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e80:	f7ff ffdc 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0b5b      	lsrs	r3, r3, #13
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	@ (8003ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	0800bdd8 	.word	0x0800bdd8

08003ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07b      	b.n	8003fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec6:	d009      	beq.n	8003edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
 8003ece:	e005      	b.n	8003edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd fb20 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0104 	and.w	r1, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	f003 0210 	and.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08a      	sub	sp, #40	@ 0x28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc8:	f7fe ff22 	bl	8002e10 <HAL_GetTick>
 8003fcc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fd4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fe0:	7ffb      	ldrb	r3, [r7, #31]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d00c      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x4a>
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fec:	d106      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_SPI_TransmitReceive+0x46>
 8003ff6:	7ffb      	ldrb	r3, [r7, #31]
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d001      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e17f      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x5c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x5c>
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e174      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x6e>
 8004020:	2302      	movs	r3, #2
 8004022:	e16d      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b04      	cmp	r3, #4
 8004036:	d003      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2205      	movs	r2, #5
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	887a      	ldrh	r2, [r7, #2]
 8004056:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d007      	beq.n	8004094 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800409c:	d17e      	bne.n	800419c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_SPI_TransmitReceive+0xf6>
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d16c      	bne.n	8004186 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d0:	e059      	b.n	8004186 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d11b      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x162>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d016      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x162>
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d113      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	881a      	ldrh	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d119      	bne.n	800415a <HAL_SPI_TransmitReceive+0x1a4>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d014      	beq.n	800415a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	b292      	uxth	r2, r2
 800413c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004156:	2301      	movs	r3, #1
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800415a:	f7fe fe59 	bl	8002e10 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004166:	429a      	cmp	r2, r3
 8004168:	d80d      	bhi.n	8004186 <HAL_SPI_TransmitReceive+0x1d0>
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d009      	beq.n	8004186 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e0bc      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1a0      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x11c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d19b      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x11c>
 800419a:	e082      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_SPI_TransmitReceive+0x1f4>
 80041a4:	8afb      	ldrh	r3, [r7, #22]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d171      	bne.n	800428e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d0:	e05d      	b.n	800428e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d11c      	bne.n	800421a <HAL_SPI_TransmitReceive+0x264>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <HAL_SPI_TransmitReceive+0x264>
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d114      	bne.n	800421a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d119      	bne.n	800425c <HAL_SPI_TransmitReceive+0x2a6>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d014      	beq.n	800425c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004258:	2301      	movs	r3, #1
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800425c:	f7fe fdd8 	bl	8002e10 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004268:	429a      	cmp	r2, r3
 800426a:	d803      	bhi.n	8004274 <HAL_SPI_TransmitReceive+0x2be>
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d102      	bne.n	800427a <HAL_SPI_TransmitReceive+0x2c4>
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e038      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d19c      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x21c>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d197      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a2:	6a3a      	ldr	r2, [r7, #32]
 80042a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8b6 	bl	8004418 <SPI_EndRxTxTransaction>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e01d      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3728      	adds	r7, #40	@ 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004318:	f7fe fd7a 	bl	8002e10 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	4413      	add	r3, r2
 8004326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004328:	f7fe fd72 	bl	8002e10 <HAL_GetTick>
 800432c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	015b      	lsls	r3, r3, #5
 8004334:	0d1b      	lsrs	r3, r3, #20
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433e:	e054      	b.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d050      	beq.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004348:	f7fe fd62 	bl	8002e10 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	429a      	cmp	r2, r3
 8004356:	d902      	bls.n	800435e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d13d      	bne.n	80043da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800436c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004376:	d111      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004380:	d004      	beq.n	800438c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d107      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800439a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a4:	d10f      	bne.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e017      	b.n	800440a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	429a      	cmp	r2, r3
 8004406:	d19b      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000000 	.word	0x20000000

08004418 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2201      	movs	r2, #1
 800442c:	2102      	movs	r1, #2
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff ff6a 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e032      	b.n	80044b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800444a:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <SPI_EndRxTxTransaction+0xa0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <SPI_EndRxTxTransaction+0xa4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0d5b      	lsrs	r3, r3, #21
 8004456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004468:	d112      	bne.n	8004490 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2200      	movs	r2, #0
 8004472:	2180      	movs	r1, #128	@ 0x80
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff ff47 	bl	8004308 <SPI_WaitFlagStateUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e00f      	b.n	80044b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3b01      	subs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a6:	2b80      	cmp	r3, #128	@ 0x80
 80044a8:	d0f2      	beq.n	8004490 <SPI_EndRxTxTransaction+0x78>
 80044aa:	e000      	b.n	80044ae <SPI_EndRxTxTransaction+0x96>
        break;
 80044ac:	bf00      	nop
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000000 	.word	0x20000000
 80044bc:	165e9f81 	.word	0x165e9f81

080044c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e042      	b.n	8004558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fd f870 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	@ 0x24
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fdbd 	bl	8005084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	d175      	bne.n	800466c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Transmit+0x2c>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e06e      	b.n	800466e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	@ 0x21
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800459e:	f7fe fc37 	bl	8002e10 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b8:	d108      	bne.n	80045cc <HAL_UART_Transmit+0x6c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e003      	b.n	80045d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045d4:	e02e      	b.n	8004634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	@ 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fb1f 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e03a      	b.n	800466e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3302      	adds	r3, #2
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	e007      	b.n	8004626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	3301      	adds	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1cb      	bne.n	80045d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2140      	movs	r1, #64	@ 0x40
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 faeb 	bl	8004c24 <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	4613      	mov	r3, r2
 8004682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d112      	bne.n	80046b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_UART_Receive_IT+0x26>
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e00b      	b.n	80046b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	461a      	mov	r2, r3
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fb12 	bl	8004cd6 <UART_Start_Receive_IT>
 80046b2:	4603      	mov	r3, r0
 80046b4:	e000      	b.n	80046b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0ba      	sub	sp, #232	@ 0xe8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_UART_IRQHandler+0x66>
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fbf2 	bl	8004f08 <UART_Receive_IT>
      return;
 8004724:	e25b      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80de 	beq.w	80048ec <HAL_UART_IRQHandler+0x22c>
 8004730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004740:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80d1 	beq.w	80048ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_UART_IRQHandler+0xae>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_UART_IRQHandler+0xd2>
 800477a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
 800479e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d011      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
 80047c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0208 	orr.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 81f2 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_UART_IRQHandler+0x14e>
 80047fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fb7d 	bl	8004f08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_UART_IRQHandler+0x17a>
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d04f      	beq.n	80048da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fa85 	bl	8004d4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484a:	2b40      	cmp	r3, #64	@ 0x40
 800484c:	d141      	bne.n	80048d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3314      	adds	r3, #20
 8004876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800487a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800487e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1d9      	bne.n	800484e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa0 <HAL_UART_IRQHandler+0x3e0>)
 80048a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fc5f 	bl	8003172 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00e      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f994 	bl	8004bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00a      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f990 	bl	8004bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e006      	b.n	80048e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f98c 	bl	8004bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048e6:	e175      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e8:	bf00      	nop
    return;
 80048ea:	e173      	b.n	8004bd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	f040 814f 	bne.w	8004b94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8148 	beq.w	8004b94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8141 	beq.w	8004b94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	2b40      	cmp	r3, #64	@ 0x40
 8004934:	f040 80b6 	bne.w	8004aa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8145 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004956:	429a      	cmp	r2, r3
 8004958:	f080 813e 	bcs.w	8004bd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004962:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496e:	f000 8088 	beq.w	8004a82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800498c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800499e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1d9      	bne.n	8004972 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e1      	bne.n	80049be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fb08 	bl	8003092 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8b7 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a9e:	e09b      	b.n	8004bd8 <HAL_UART_IRQHandler+0x518>
 8004aa0:	08004e11 	.word	0x08004e11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 808e 	beq.w	8004bdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8089 	beq.w	8004bdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004aee:	647a      	str	r2, [r7, #68]	@ 0x44
 8004af0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e3      	bne.n	8004aca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	623b      	str	r3, [r7, #32]
   return(result);
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b26:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e3      	bne.n	8004b02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0310 	bic.w	r3, r3, #16
 8004b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b6c:	61fa      	str	r2, [r7, #28]
 8004b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	69b9      	ldr	r1, [r7, #24]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e3      	bne.n	8004b48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f83d 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b92:	e023      	b.n	8004bdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x4f4>
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f943 	bl	8004e38 <UART_Transmit_IT>
    return;
 8004bb2:	e014      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <HAL_UART_IRQHandler+0x51e>
 8004bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f983 	bl	8004ed8 <UART_EndTransmit_IT>
    return;
 8004bd2:	e004      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
    return;
 8004bd4:	bf00      	nop
 8004bd6:	e002      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
      return;
 8004bd8:	bf00      	nop
 8004bda:	e000      	b.n	8004bde <HAL_UART_IRQHandler+0x51e>
      return;
 8004bdc:	bf00      	nop
  }
}
 8004bde:	37e8      	adds	r7, #232	@ 0xe8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c34:	e03b      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d037      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fe f8e7 	bl	8002e10 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e03a      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d023      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b80      	cmp	r3, #128	@ 0x80
 8004c6a:	d020      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d01d      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d116      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f857 	bl	8004d4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00f      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0b4      	beq.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2222      	movs	r2, #34	@ 0x22
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0220 	orr.w	r2, r2, #32
 8004d3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b095      	sub	sp, #84	@ 0x54
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d72:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d119      	bne.n	8004df6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004de2:	61ba      	str	r2, [r7, #24]
 8004de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e5      	bne.n	8004dc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e04:	bf00      	nop
 8004e06:	3754      	adds	r7, #84	@ 0x54
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fee4 	bl	8004bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b21      	cmp	r3, #33	@ 0x21
 8004e4a:	d13e      	bne.n	8004eca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e54:	d114      	bne.n	8004e80 <UART_Transmit_IT+0x48>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	1c9a      	adds	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]
 8004e7e:	e008      	b.n	8004e92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6211      	str	r1, [r2, #32]
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fe73 	bl	8004be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	@ 0x30
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b22      	cmp	r3, #34	@ 0x22
 8004f1a:	f040 80ae 	bne.w	800507a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f26:	d117      	bne.n	8004f58 <UART_Receive_IT+0x50>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d113      	bne.n	8004f58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f56:	e026      	b.n	8004fa6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6a:	d007      	beq.n	8004f7c <UART_Receive_IT+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <UART_Receive_IT+0x82>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e008      	b.n	8004f9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d15d      	bne.n	8005076 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0220 	bic.w	r2, r2, #32
 8004fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d135      	bne.n	800506c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	613b      	str	r3, [r7, #16]
   return(result);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f023 0310 	bic.w	r3, r3, #16
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005026:	623a      	str	r2, [r7, #32]
 8005028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	69f9      	ldr	r1, [r7, #28]
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	61bb      	str	r3, [r7, #24]
   return(result);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d10a      	bne.n	800505e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fdd1 	bl	8004c0c <HAL_UARTEx_RxEventCallback>
 800506a:	e002      	b.n	8005072 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc fa1d 	bl	80014ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e002      	b.n	800507c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3730      	adds	r7, #48	@ 0x30
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005088:	b0c0      	sub	sp, #256	@ 0x100
 800508a:	af00      	add	r7, sp, #0
 800508c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a0:	68d9      	ldr	r1, [r3, #12]
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	ea40 0301 	orr.w	r3, r0, r1
 80050ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050dc:	f021 010c 	bic.w	r1, r1, #12
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050ea:	430b      	orrs	r3, r1
 80050ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fe:	6999      	ldr	r1, [r3, #24]
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	ea40 0301 	orr.w	r3, r0, r1
 800510a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b8f      	ldr	r3, [pc, #572]	@ (8005350 <UART_SetConfig+0x2cc>)
 8005114:	429a      	cmp	r2, r3
 8005116:	d005      	beq.n	8005124 <UART_SetConfig+0xa0>
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b8d      	ldr	r3, [pc, #564]	@ (8005354 <UART_SetConfig+0x2d0>)
 8005120:	429a      	cmp	r2, r3
 8005122:	d104      	bne.n	800512e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005124:	f7fe feaa 	bl	8003e7c <HAL_RCC_GetPCLK2Freq>
 8005128:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800512c:	e003      	b.n	8005136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800512e:	f7fe fe91 	bl	8003e54 <HAL_RCC_GetPCLK1Freq>
 8005132:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005140:	f040 810c 	bne.w	800535c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800514e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005156:	4622      	mov	r2, r4
 8005158:	462b      	mov	r3, r5
 800515a:	1891      	adds	r1, r2, r2
 800515c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800515e:	415b      	adcs	r3, r3
 8005160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005166:	4621      	mov	r1, r4
 8005168:	eb12 0801 	adds.w	r8, r2, r1
 800516c:	4629      	mov	r1, r5
 800516e:	eb43 0901 	adc.w	r9, r3, r1
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800517e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005186:	4690      	mov	r8, r2
 8005188:	4699      	mov	r9, r3
 800518a:	4623      	mov	r3, r4
 800518c:	eb18 0303 	adds.w	r3, r8, r3
 8005190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005194:	462b      	mov	r3, r5
 8005196:	eb49 0303 	adc.w	r3, r9, r3
 800519a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051b2:	460b      	mov	r3, r1
 80051b4:	18db      	adds	r3, r3, r3
 80051b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051b8:	4613      	mov	r3, r2
 80051ba:	eb42 0303 	adc.w	r3, r2, r3
 80051be:	657b      	str	r3, [r7, #84]	@ 0x54
 80051c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051c8:	f7fb fd26 	bl	8000c18 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b61      	ldr	r3, [pc, #388]	@ (8005358 <UART_SetConfig+0x2d4>)
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	011c      	lsls	r4, r3, #4
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051f4:	415b      	adcs	r3, r3
 80051f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051fc:	4641      	mov	r1, r8
 80051fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005202:	4649      	mov	r1, r9
 8005204:	eb43 0b01 	adc.w	fp, r3, r1
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800521c:	4692      	mov	sl, r2
 800521e:	469b      	mov	fp, r3
 8005220:	4643      	mov	r3, r8
 8005222:	eb1a 0303 	adds.w	r3, sl, r3
 8005226:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800522a:	464b      	mov	r3, r9
 800522c:	eb4b 0303 	adc.w	r3, fp, r3
 8005230:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005240:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005248:	460b      	mov	r3, r1
 800524a:	18db      	adds	r3, r3, r3
 800524c:	643b      	str	r3, [r7, #64]	@ 0x40
 800524e:	4613      	mov	r3, r2
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	647b      	str	r3, [r7, #68]	@ 0x44
 8005256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800525a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800525e:	f7fb fcdb 	bl	8000c18 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4611      	mov	r1, r2
 8005268:	4b3b      	ldr	r3, [pc, #236]	@ (8005358 <UART_SetConfig+0x2d4>)
 800526a:	fba3 2301 	umull	r2, r3, r3, r1
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2264      	movs	r2, #100	@ 0x64
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	1acb      	subs	r3, r1, r3
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800527e:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <UART_SetConfig+0x2d4>)
 8005280:	fba3 2302 	umull	r2, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800528c:	441c      	add	r4, r3
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005298:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800529c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052a8:	415b      	adcs	r3, r3
 80052aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052b0:	4641      	mov	r1, r8
 80052b2:	1851      	adds	r1, r2, r1
 80052b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80052b6:	4649      	mov	r1, r9
 80052b8:	414b      	adcs	r3, r1
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052c8:	4659      	mov	r1, fp
 80052ca:	00cb      	lsls	r3, r1, #3
 80052cc:	4651      	mov	r1, sl
 80052ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d2:	4651      	mov	r1, sl
 80052d4:	00ca      	lsls	r2, r1, #3
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	4642      	mov	r2, r8
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052e4:	464b      	mov	r3, r9
 80052e6:	460a      	mov	r2, r1
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005304:	460b      	mov	r3, r1
 8005306:	18db      	adds	r3, r3, r3
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530a:	4613      	mov	r3, r2
 800530c:	eb42 0303 	adc.w	r3, r2, r3
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800531a:	f7fb fc7d 	bl	8000c18 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <UART_SetConfig+0x2d4>)
 8005324:	fba3 1302 	umull	r1, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2164      	movs	r1, #100	@ 0x64
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	3332      	adds	r3, #50	@ 0x32
 8005336:	4a08      	ldr	r2, [pc, #32]	@ (8005358 <UART_SetConfig+0x2d4>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 0207 	and.w	r2, r3, #7
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4422      	add	r2, r4
 800534a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800534c:	e106      	b.n	800555c <UART_SetConfig+0x4d8>
 800534e:	bf00      	nop
 8005350:	40011000 	.word	0x40011000
 8005354:	40011400 	.word	0x40011400
 8005358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800535c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005360:	2200      	movs	r2, #0
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005366:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800536a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800536e:	4642      	mov	r2, r8
 8005370:	464b      	mov	r3, r9
 8005372:	1891      	adds	r1, r2, r2
 8005374:	6239      	str	r1, [r7, #32]
 8005376:	415b      	adcs	r3, r3
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
 800537a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800537e:	4641      	mov	r1, r8
 8005380:	1854      	adds	r4, r2, r1
 8005382:	4649      	mov	r1, r9
 8005384:	eb43 0501 	adc.w	r5, r3, r1
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	00eb      	lsls	r3, r5, #3
 8005392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005396:	00e2      	lsls	r2, r4, #3
 8005398:	4614      	mov	r4, r2
 800539a:	461d      	mov	r5, r3
 800539c:	4643      	mov	r3, r8
 800539e:	18e3      	adds	r3, r4, r3
 80053a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053a4:	464b      	mov	r3, r9
 80053a6:	eb45 0303 	adc.w	r3, r5, r3
 80053aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053ca:	4629      	mov	r1, r5
 80053cc:	008b      	lsls	r3, r1, #2
 80053ce:	4621      	mov	r1, r4
 80053d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d4:	4621      	mov	r1, r4
 80053d6:	008a      	lsls	r2, r1, #2
 80053d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053dc:	f7fb fc1c 	bl	8000c18 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b60      	ldr	r3, [pc, #384]	@ (8005568 <UART_SetConfig+0x4e4>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	011c      	lsls	r4, r3, #4
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	61b9      	str	r1, [r7, #24]
 8005408:	415b      	adcs	r3, r3
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6139      	str	r1, [r7, #16]
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005444:	464b      	mov	r3, r9
 8005446:	460a      	mov	r2, r1
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800545a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005468:	4649      	mov	r1, r9
 800546a:	008b      	lsls	r3, r1, #2
 800546c:	4641      	mov	r1, r8
 800546e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005472:	4641      	mov	r1, r8
 8005474:	008a      	lsls	r2, r1, #2
 8005476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800547a:	f7fb fbcd 	bl	8000c18 <__aeabi_uldivmod>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4611      	mov	r1, r2
 8005484:	4b38      	ldr	r3, [pc, #224]	@ (8005568 <UART_SetConfig+0x4e4>)
 8005486:	fba3 2301 	umull	r2, r3, r3, r1
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	2264      	movs	r2, #100	@ 0x64
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	1acb      	subs	r3, r1, r3
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	3332      	adds	r3, #50	@ 0x32
 8005498:	4a33      	ldr	r2, [pc, #204]	@ (8005568 <UART_SetConfig+0x4e4>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a4:	441c      	add	r4, r3
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054aa:	2200      	movs	r2, #0
 80054ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80054ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80054b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	415b      	adcs	r3, r3
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c4:	4641      	mov	r1, r8
 80054c6:	1851      	adds	r1, r2, r1
 80054c8:	6039      	str	r1, [r7, #0]
 80054ca:	4649      	mov	r1, r9
 80054cc:	414b      	adcs	r3, r1
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054dc:	4659      	mov	r1, fp
 80054de:	00cb      	lsls	r3, r1, #3
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e6:	4651      	mov	r1, sl
 80054e8:	00ca      	lsls	r2, r1, #3
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	4642      	mov	r2, r8
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054f6:	464b      	mov	r3, r9
 80054f8:	460a      	mov	r2, r1
 80054fa:	eb42 0303 	adc.w	r3, r2, r3
 80054fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	663b      	str	r3, [r7, #96]	@ 0x60
 800550a:	667a      	str	r2, [r7, #100]	@ 0x64
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005518:	4649      	mov	r1, r9
 800551a:	008b      	lsls	r3, r1, #2
 800551c:	4641      	mov	r1, r8
 800551e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005522:	4641      	mov	r1, r8
 8005524:	008a      	lsls	r2, r1, #2
 8005526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800552a:	f7fb fb75 	bl	8000c18 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <UART_SetConfig+0x4e4>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	@ 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	3332      	adds	r3, #50	@ 0x32
 8005546:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <UART_SetConfig+0x4e4>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 020f 	and.w	r2, r3, #15
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4422      	add	r2, r4
 800555a:	609a      	str	r2, [r3, #8]
}
 800555c:	bf00      	nop
 800555e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005562:	46bd      	mov	sp, r7
 8005564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005568:	51eb851f 	.word	0x51eb851f

0800556c <USER_SetUser>:

#include "user.h"

User_TypeDef user;

uint8_t USER_SetUser(char* username) {
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	user.username = username;
 8005574:	4a04      	ldr	r2, [pc, #16]	@ (8005588 <USER_SetUser+0x1c>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
	return 1;
 800557a:	2301      	movs	r3, #1
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20001808 	.word	0x20001808

0800558c <USER_GetUser>:

User_TypeDef* USER_GetUser() {
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
	return &user;
 8005590:	4b02      	ldr	r3, [pc, #8]	@ (800559c <USER_GetUser+0x10>)
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20001808 	.word	0x20001808

080055a0 <WIFI_OPEN_RECEIVE>:
extern uint32_t updateTime;
uint32_t startTime;
//uint8_t msg_receiving = 0;
MQTTRev_Struct mqttrev;

void WIFI_OPEN_RECEIVE() {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer, 1);
 80055a4:	2201      	movs	r2, #1
 80055a6:	4903      	ldr	r1, [pc, #12]	@ (80055b4 <WIFI_OPEN_RECEIVE+0x14>)
 80055a8:	4803      	ldr	r0, [pc, #12]	@ (80055b8 <WIFI_OPEN_RECEIVE+0x18>)
 80055aa:	f7ff f864 	bl	8004676 <HAL_UART_Receive_IT>
}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20001810 	.word	0x20001810
 80055b8:	200002ac 	.word	0x200002ac

080055bc <WIFI_CONNECT>:

uint8_t WIFI_CONNECT(const WIFI_Struct* const wifi) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0aa      	sub	sp, #168	@ 0xa8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	_buffer_ptr = 0; it_status = _NONE;
 80055c4:	4b23      	ldr	r3, [pc, #140]	@ (8005654 <WIFI_CONNECT+0x98>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	4b23      	ldr	r3, [pc, #140]	@ (8005658 <WIFI_CONNECT+0x9c>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	701a      	strb	r2, [r3, #0]

	char total_str[160];
	sprintf((char*)total_str, "AT+CWJAP=\"%s\",\"%s\"\r\n", wifi->ssid, wifi->password);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f107 0008 	add.w	r0, r7, #8
 80055dc:	491f      	ldr	r1, [pc, #124]	@ (800565c <WIFI_CONNECT+0xa0>)
 80055de:	f003 fc61 	bl	8008ea4 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) total_str, strlen(total_str), 50);
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fa fe04 	bl	80001f4 <strlen>
 80055ec:	4603      	mov	r3, r0
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	f107 0108 	add.w	r1, r7, #8
 80055f4:	2332      	movs	r3, #50	@ 0x32
 80055f6:	481a      	ldr	r0, [pc, #104]	@ (8005660 <WIFI_CONNECT+0xa4>)
 80055f8:	f7fe ffb2 	bl	8004560 <HAL_UART_Transmit>
//	HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer + 0, 1);
	startTime = HAL_GetTick();
 80055fc:	f7fd fc08 	bl	8002e10 <HAL_GetTick>
 8005600:	4603      	mov	r3, r0
 8005602:	4a18      	ldr	r2, [pc, #96]	@ (8005664 <WIFI_CONNECT+0xa8>)
 8005604:	6013      	str	r3, [r2, #0]
	while (it_status == _NONE || it_status == WIFI_DISCONNECTED) {
 8005606:	e00b      	b.n	8005620 <WIFI_CONNECT+0x64>
		if (HAL_GetTick() - startTime > 10000) return 0;
 8005608:	f7fd fc02 	bl	8002e10 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	4b15      	ldr	r3, [pc, #84]	@ (8005664 <WIFI_CONNECT+0xa8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <WIFI_CONNECT+0x64>
 800561c:	2300      	movs	r3, #0
 800561e:	e014      	b.n	800564a <WIFI_CONNECT+0x8e>
	while (it_status == _NONE || it_status == WIFI_DISCONNECTED) {
 8005620:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <WIFI_CONNECT+0x9c>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ee      	beq.n	8005608 <WIFI_CONNECT+0x4c>
 800562a:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <WIFI_CONNECT+0x9c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b03      	cmp	r3, #3
 8005632:	d0e9      	beq.n	8005608 <WIFI_CONNECT+0x4c>
	}

	if (it_status != _SUCCESS) return 0;
 8005634:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <WIFI_CONNECT+0x9c>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d001      	beq.n	8005642 <WIFI_CONNECT+0x86>
 800563e:	2300      	movs	r3, #0
 8005640:	e003      	b.n	800564a <WIFI_CONNECT+0x8e>
	it_status = _NONE;
 8005642:	4b05      	ldr	r3, [pc, #20]	@ (8005658 <WIFI_CONNECT+0x9c>)
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]

	return 1;
 8005648:	2301      	movs	r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	37a8      	adds	r7, #168	@ 0xa8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20001a9a 	.word	0x20001a9a
 8005658:	2000180c 	.word	0x2000180c
 800565c:	0800bc3c 	.word	0x0800bc3c
 8005660:	200002ac 	.word	0x200002ac
 8005664:	20001a9c 	.word	0x20001a9c

08005668 <WIFI_MQTT_USERCFG>:

uint8_t WIFI_MQTT_USERCFG(const MQTTUser_Struct* const mqttuser) {
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566a:	b0c9      	sub	sp, #292	@ 0x124
 800566c:	af06      	add	r7, sp, #24
 800566e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005676:	6018      	str	r0, [r3, #0]
	_buffer_ptr = 0; it_status = _NONE;
 8005678:	4b52      	ldr	r3, [pc, #328]	@ (80057c4 <WIFI_MQTT_USERCFG+0x15c>)
 800567a:	2200      	movs	r2, #0
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	4b52      	ldr	r3, [pc, #328]	@ (80057c8 <WIFI_MQTT_USERCFG+0x160>)
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
	while (huart1.gState != HAL_UART_STATE_READY);
 8005684:	bf00      	nop
 8005686:	4b51      	ldr	r3, [pc, #324]	@ (80057cc <WIFI_MQTT_USERCFG+0x164>)
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	d1f9      	bne.n	8005686 <WIFI_MQTT_USERCFG+0x1e>
	if (HAL_UART_Transmit(&huart1, (uint8_t*) "AT+MQTTCLEAN=0\r\n", strlen("AT+MQTTCLEAN=0\r\n"), 50) != HAL_OK)
 8005692:	2332      	movs	r3, #50	@ 0x32
 8005694:	2210      	movs	r2, #16
 8005696:	494e      	ldr	r1, [pc, #312]	@ (80057d0 <WIFI_MQTT_USERCFG+0x168>)
 8005698:	484c      	ldr	r0, [pc, #304]	@ (80057cc <WIFI_MQTT_USERCFG+0x164>)
 800569a:	f7fe ff61 	bl	8004560 <HAL_UART_Transmit>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <WIFI_MQTT_USERCFG+0x40>
		return 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e088      	b.n	80057ba <WIFI_MQTT_USERCFG+0x152>
	while (huart1.gState != HAL_UART_STATE_READY);
 80056a8:	bf00      	nop
 80056aa:	4b48      	ldr	r3, [pc, #288]	@ (80057cc <WIFI_MQTT_USERCFG+0x164>)
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d1f9      	bne.n	80056aa <WIFI_MQTT_USERCFG+0x42>
//	if (HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer + 0, 1) != HAL_OK)
//		return 0;
	startTime = HAL_GetTick();
 80056b6:	f7fd fbab 	bl	8002e10 <HAL_GetTick>
 80056ba:	4603      	mov	r3, r0
 80056bc:	4a45      	ldr	r2, [pc, #276]	@ (80057d4 <WIFI_MQTT_USERCFG+0x16c>)
 80056be:	6013      	str	r3, [r2, #0]
	while (it_status == _NONE) {
 80056c0:	e00b      	b.n	80056da <WIFI_MQTT_USERCFG+0x72>
		if (HAL_GetTick() - startTime > 10000) return 0;
 80056c2:	f7fd fba5 	bl	8002e10 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b42      	ldr	r3, [pc, #264]	@ (80057d4 <WIFI_MQTT_USERCFG+0x16c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <WIFI_MQTT_USERCFG+0x72>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e06f      	b.n	80057ba <WIFI_MQTT_USERCFG+0x152>
	while (it_status == _NONE) {
 80056da:	4b3b      	ldr	r3, [pc, #236]	@ (80057c8 <WIFI_MQTT_USERCFG+0x160>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ee      	beq.n	80056c2 <WIFI_MQTT_USERCFG+0x5a>
	}
	it_status = _NONE;
 80056e4:	4b38      	ldr	r3, [pc, #224]	@ (80057c8 <WIFI_MQTT_USERCFG+0x160>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]

	char usercfg_str[255]="";
 80056ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	3304      	adds	r3, #4
 80056f8:	22fb      	movs	r2, #251	@ 0xfb
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f003 fc60 	bl	8008fc2 <memset>
	sprintf(usercfg_str,
			"AT+MQTTUSERCFG=0,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"\r\n",
			mqttuser->scheme,
 8005702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
	sprintf(usercfg_str,
 800570e:	469c      	mov	ip, r3
			mqttuser->client_id,
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685c      	ldr	r4, [r3, #4]
			mqttuser->username,
 800571c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
			mqttuser->password,
 8005728:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800572c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	68d2      	ldr	r2, [r2, #12]
			mqttuser->cert_key_ID,
 8005734:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8005738:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800573c:	6809      	ldr	r1, [r1, #0]
 800573e:	7c09      	ldrb	r1, [r1, #16]
	sprintf(usercfg_str,
 8005740:	460d      	mov	r5, r1
			mqttuser->CA_ID,
 8005742:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8005746:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800574a:	6809      	ldr	r1, [r1, #0]
 800574c:	7c49      	ldrb	r1, [r1, #17]
	sprintf(usercfg_str,
 800574e:	460e      	mov	r6, r1
			mqttuser->path
 8005750:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8005754:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8005758:	6809      	ldr	r1, [r1, #0]
 800575a:	6949      	ldr	r1, [r1, #20]
	sprintf(usercfg_str,
 800575c:	f107 0008 	add.w	r0, r7, #8
 8005760:	9104      	str	r1, [sp, #16]
 8005762:	9603      	str	r6, [sp, #12]
 8005764:	9502      	str	r5, [sp, #8]
 8005766:	9201      	str	r2, [sp, #4]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	4623      	mov	r3, r4
 800576c:	4662      	mov	r2, ip
 800576e:	491a      	ldr	r1, [pc, #104]	@ (80057d8 <WIFI_MQTT_USERCFG+0x170>)
 8005770:	f003 fb98 	bl	8008ea4 <siprintf>
	);
//	HAL_Delay(500);
	if (HAL_UART_Transmit(&huart1, (uint8_t*) usercfg_str, strlen(usercfg_str), 50) != HAL_OK)
 8005774:	f107 0308 	add.w	r3, r7, #8
 8005778:	4618      	mov	r0, r3
 800577a:	f7fa fd3b 	bl	80001f4 <strlen>
 800577e:	4603      	mov	r3, r0
 8005780:	b29a      	uxth	r2, r3
 8005782:	f107 0108 	add.w	r1, r7, #8
 8005786:	2332      	movs	r3, #50	@ 0x32
 8005788:	4810      	ldr	r0, [pc, #64]	@ (80057cc <WIFI_MQTT_USERCFG+0x164>)
 800578a:	f7fe fee9 	bl	8004560 <HAL_UART_Transmit>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <WIFI_MQTT_USERCFG+0x130>
		return 0;
 8005794:	2300      	movs	r3, #0
 8005796:	e010      	b.n	80057ba <WIFI_MQTT_USERCFG+0x152>
//	if (HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer + 0, 1) != HAL_OK)
//		return 0;
	while (it_status == _NONE);
 8005798:	bf00      	nop
 800579a:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <WIFI_MQTT_USERCFG+0x160>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0fa      	beq.n	800579a <WIFI_MQTT_USERCFG+0x132>
	if (it_status == _FAIL) return 0;
 80057a4:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <WIFI_MQTT_USERCFG+0x160>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d101      	bne.n	80057b2 <WIFI_MQTT_USERCFG+0x14a>
 80057ae:	2300      	movs	r3, #0
 80057b0:	e003      	b.n	80057ba <WIFI_MQTT_USERCFG+0x152>
	it_status = _NONE;
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <WIFI_MQTT_USERCFG+0x160>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
	return 1;
 80057b8:	2301      	movs	r3, #1
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c4:	20001a9a 	.word	0x20001a9a
 80057c8:	2000180c 	.word	0x2000180c
 80057cc:	200002ac 	.word	0x200002ac
 80057d0:	0800bc54 	.word	0x0800bc54
 80057d4:	20001a9c 	.word	0x20001a9c
 80057d8:	0800bc68 	.word	0x0800bc68

080057dc <WIFI_MQTT_CONN>:

uint8_t WIFI_MQTT_CONN(const MQTTConn_Struct * const mqttconn) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b0c4      	sub	sp, #272	@ 0x110
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057ea:	6018      	str	r0, [r3, #0]
	_buffer_ptr = 0; it_status = _NONE;
 80057ec:	4b2c      	ldr	r3, [pc, #176]	@ (80058a0 <WIFI_MQTT_CONN+0xc4>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	4b2c      	ldr	r3, [pc, #176]	@ (80058a4 <WIFI_MQTT_CONN+0xc8>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]

	char mqttconn_str[255];
	sprintf(
			mqttconn_str,
			"AT+MQTTCONN=0,\"%s\",%d,%d\r\n",
			mqttconn->host,
 80057f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
			mqttconn->port,
 8005804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	889b      	ldrh	r3, [r3, #4]
	sprintf(
 8005810:	4619      	mov	r1, r3
			mqttconn->reconnect
 8005812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	799b      	ldrb	r3, [r3, #6]
	sprintf(
 800581e:	f107 0008 	add.w	r0, r7, #8
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	460b      	mov	r3, r1
 8005826:	4920      	ldr	r1, [pc, #128]	@ (80058a8 <WIFI_MQTT_CONN+0xcc>)
 8005828:	f003 fb3c 	bl	8008ea4 <siprintf>
	);
	if (HAL_UART_Transmit(&huart1, (uint8_t*) mqttconn_str, strlen(mqttconn_str), 50) != HAL_OK)
 800582c:	f107 0308 	add.w	r3, r7, #8
 8005830:	4618      	mov	r0, r3
 8005832:	f7fa fcdf 	bl	80001f4 <strlen>
 8005836:	4603      	mov	r3, r0
 8005838:	b29a      	uxth	r2, r3
 800583a:	f107 0108 	add.w	r1, r7, #8
 800583e:	2332      	movs	r3, #50	@ 0x32
 8005840:	481a      	ldr	r0, [pc, #104]	@ (80058ac <WIFI_MQTT_CONN+0xd0>)
 8005842:	f7fe fe8d 	bl	8004560 <HAL_UART_Transmit>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <WIFI_MQTT_CONN+0x74>
		return 0;
 800584c:	2300      	movs	r3, #0
 800584e:	e021      	b.n	8005894 <WIFI_MQTT_CONN+0xb8>
//	if (HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer + 0, 1) != HAL_OK)
//		return 0;
	startTime = HAL_GetTick();
 8005850:	f7fd fade 	bl	8002e10 <HAL_GetTick>
 8005854:	4603      	mov	r3, r0
 8005856:	4a16      	ldr	r2, [pc, #88]	@ (80058b0 <WIFI_MQTT_CONN+0xd4>)
 8005858:	6013      	str	r3, [r2, #0]
	while (it_status == _NONE)
 800585a:	e00b      	b.n	8005874 <WIFI_MQTT_CONN+0x98>
		if (HAL_GetTick() - startTime > 6000) return 0;
 800585c:	f7fd fad8 	bl	8002e10 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <WIFI_MQTT_CONN+0xd4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f241 7270 	movw	r2, #6000	@ 0x1770
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <WIFI_MQTT_CONN+0x98>
 8005870:	2300      	movs	r3, #0
 8005872:	e00f      	b.n	8005894 <WIFI_MQTT_CONN+0xb8>
	while (it_status == _NONE)
 8005874:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <WIFI_MQTT_CONN+0xc8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0ee      	beq.n	800585c <WIFI_MQTT_CONN+0x80>

	if (it_status != _SUCCESS) return 0;
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <WIFI_MQTT_CONN+0xc8>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d001      	beq.n	800588c <WIFI_MQTT_CONN+0xb0>
 8005888:	2300      	movs	r3, #0
 800588a:	e003      	b.n	8005894 <WIFI_MQTT_CONN+0xb8>
	it_status = _NONE;
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <WIFI_MQTT_CONN+0xc8>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]

	return 1;
 8005892:	2301      	movs	r3, #1
}
 8005894:	4618      	mov	r0, r3
 8005896:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20001a9a 	.word	0x20001a9a
 80058a4:	2000180c 	.word	0x2000180c
 80058a8:	0800bc98 	.word	0x0800bc98
 80058ac:	200002ac 	.word	0x200002ac
 80058b0:	20001a9c 	.word	0x20001a9c

080058b4 <WIFI_MQTT_TOPIC_SUB>:
	it_status = _NONE;
	HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer + 0, 1);
	return 1;
}

uint8_t WIFI_MQTT_TOPIC_SUB(const MQTTSub_Struct* const mqttsub) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b0c2      	sub	sp, #264	@ 0x108
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058c2:	6018      	str	r0, [r3, #0]
	char mqttsub_str[255] = "";
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	3304      	adds	r3, #4
 80058d2:	22fb      	movs	r2, #251	@ 0xfb
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f003 fb73 	bl	8008fc2 <memset>
	sprintf(
			mqttsub_str,
			"AT+MQTTSUB=0,\"%s\",%d\r\n",
			mqttsub->topic,
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
			mqttsub->qos
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	791b      	ldrb	r3, [r3, #4]
	sprintf(
 80058f4:	f107 0008 	add.w	r0, r7, #8
 80058f8:	491d      	ldr	r1, [pc, #116]	@ (8005970 <WIFI_MQTT_TOPIC_SUB+0xbc>)
 80058fa:	f003 fad3 	bl	8008ea4 <siprintf>
	);
	if (HAL_UART_Transmit(&huart1, (uint8_t*) mqttsub_str, strlen(mqttsub_str), 50) != HAL_OK)
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fc76 	bl	80001f4 <strlen>
 8005908:	4603      	mov	r3, r0
 800590a:	b29a      	uxth	r2, r3
 800590c:	f107 0108 	add.w	r1, r7, #8
 8005910:	2332      	movs	r3, #50	@ 0x32
 8005912:	4818      	ldr	r0, [pc, #96]	@ (8005974 <WIFI_MQTT_TOPIC_SUB+0xc0>)
 8005914:	f7fe fe24 	bl	8004560 <HAL_UART_Transmit>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <WIFI_MQTT_TOPIC_SUB+0x6e>
		return 0;
 800591e:	2300      	movs	r3, #0
 8005920:	e021      	b.n	8005966 <WIFI_MQTT_TOPIC_SUB+0xb2>
//	if (HAL_UART_Receive_IT(&huart1, (uint8_t*)_buffer + 0, 1) != HAL_OK)
//		return 0;
	startTime = HAL_GetTick();
 8005922:	f7fd fa75 	bl	8002e10 <HAL_GetTick>
 8005926:	4603      	mov	r3, r0
 8005928:	4a13      	ldr	r2, [pc, #76]	@ (8005978 <WIFI_MQTT_TOPIC_SUB+0xc4>)
 800592a:	6013      	str	r3, [r2, #0]
	while (it_status == _NONE)
 800592c:	e00b      	b.n	8005946 <WIFI_MQTT_TOPIC_SUB+0x92>
		if (HAL_GetTick() - startTime > 5000) return 0;
 800592e:	f7fd fa6f 	bl	8002e10 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <WIFI_MQTT_TOPIC_SUB+0xc4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <WIFI_MQTT_TOPIC_SUB+0x92>
 8005942:	2300      	movs	r3, #0
 8005944:	e00f      	b.n	8005966 <WIFI_MQTT_TOPIC_SUB+0xb2>
	while (it_status == _NONE)
 8005946:	4b0d      	ldr	r3, [pc, #52]	@ (800597c <WIFI_MQTT_TOPIC_SUB+0xc8>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <WIFI_MQTT_TOPIC_SUB+0x7a>
	if (it_status != _SUCCESS) return 0;
 8005950:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <WIFI_MQTT_TOPIC_SUB+0xc8>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <WIFI_MQTT_TOPIC_SUB+0xaa>
 800595a:	2300      	movs	r3, #0
 800595c:	e003      	b.n	8005966 <WIFI_MQTT_TOPIC_SUB+0xb2>
	it_status = _NONE;
 800595e:	4b07      	ldr	r3, [pc, #28]	@ (800597c <WIFI_MQTT_TOPIC_SUB+0xc8>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]

	return 1;
 8005964:	2301      	movs	r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	0800bcd4 	.word	0x0800bcd4
 8005974:	200002ac 	.word	0x200002ac
 8005978:	20001a9c 	.word	0x20001a9c
 800597c:	2000180c 	.word	0x2000180c

08005980 <WIFI_MQTT_PUBRAW>:

uint8_t WIFI_MQTT_PUBRAW(MQTTPubRaw_Struct* pubraw) {
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b0c5      	sub	sp, #276	@ 0x114
 8005984:	af02      	add	r7, sp, #8
 8005986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598e:	6018      	str	r0, [r3, #0]
	_buffer_ptr = 0; it_status = _NONE;
 8005990:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac0 <WIFI_MQTT_PUBRAW+0x140>)
 8005992:	2200      	movs	r2, #0
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
	char pubraw_buffer[256];
	sprintf(
 800599c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6859      	ldr	r1, [r3, #4]
			pubraw_buffer,
			"AT+MQTTPUBRAW=0,\"%s\",%d,%d,%d\r\n",
			pubraw->topic,
			pubraw->length,
			pubraw->qos,
 80059b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(
 80059c0:	461c      	mov	r4, r3
			pubraw->retain
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(
 80059ce:	f107 0008 	add.w	r0, r7, #8
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	9400      	str	r4, [sp, #0]
 80059d6:	460b      	mov	r3, r1
 80059d8:	493b      	ldr	r1, [pc, #236]	@ (8005ac8 <WIFI_MQTT_PUBRAW+0x148>)
 80059da:	f003 fa63 	bl	8008ea4 <siprintf>
	);
	if (HAL_UART_Transmit(&huart1, (uint8_t*) pubraw_buffer, strlen(pubraw_buffer), 50) != HAL_OK)
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fa fc06 	bl	80001f4 <strlen>
 80059e8:	4603      	mov	r3, r0
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f107 0108 	add.w	r1, r7, #8
 80059f0:	2332      	movs	r3, #50	@ 0x32
 80059f2:	4836      	ldr	r0, [pc, #216]	@ (8005acc <WIFI_MQTT_PUBRAW+0x14c>)
 80059f4:	f7fe fdb4 	bl	8004560 <HAL_UART_Transmit>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <WIFI_MQTT_PUBRAW+0x82>
		return 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e058      	b.n	8005ab4 <WIFI_MQTT_PUBRAW+0x134>
	startTime = HAL_GetTick();
 8005a02:	f7fd fa05 	bl	8002e10 <HAL_GetTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a31      	ldr	r2, [pc, #196]	@ (8005ad0 <WIFI_MQTT_PUBRAW+0x150>)
 8005a0a:	6013      	str	r3, [r2, #0]
	while (it_status == _NONE)
 8005a0c:	e00b      	b.n	8005a26 <WIFI_MQTT_PUBRAW+0xa6>
		if (HAL_GetTick() - startTime > 5000) return 0;
 8005a0e:	f7fd f9ff 	bl	8002e10 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad0 <WIFI_MQTT_PUBRAW+0x150>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <WIFI_MQTT_PUBRAW+0xa6>
 8005a22:	2300      	movs	r3, #0
 8005a24:	e046      	b.n	8005ab4 <WIFI_MQTT_PUBRAW+0x134>
	while (it_status == _NONE)
 8005a26:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ee      	beq.n	8005a0e <WIFI_MQTT_PUBRAW+0x8e>
	if (it_status != _SUCCESS) return 0;
 8005a30:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d001      	beq.n	8005a3e <WIFI_MQTT_PUBRAW+0xbe>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e03a      	b.n	8005ab4 <WIFI_MQTT_PUBRAW+0x134>
	it_status = _NONE;
 8005a3e:	4b21      	ldr	r3, [pc, #132]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]

//	for (int i = 0; i < pubraw->length; i++) {
//		if (HAL_UART_Transmit(&huart1, (uint8_t*) pubraw->msg + i, 1, 50) != HAL_OK)
//			return 0;
//	}
	if (HAL_UART_Transmit(&huart1, (uint8_t*) pubraw->msg, pubraw->length, 50) != HAL_OK)
 8005a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
 8005a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	2332      	movs	r3, #50	@ 0x32
 8005a60:	481a      	ldr	r0, [pc, #104]	@ (8005acc <WIFI_MQTT_PUBRAW+0x14c>)
 8005a62:	f7fe fd7d 	bl	8004560 <HAL_UART_Transmit>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <WIFI_MQTT_PUBRAW+0xf0>
		return 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e021      	b.n	8005ab4 <WIFI_MQTT_PUBRAW+0x134>
	startTime = HAL_GetTick();
 8005a70:	f7fd f9ce 	bl	8002e10 <HAL_GetTick>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a16      	ldr	r2, [pc, #88]	@ (8005ad0 <WIFI_MQTT_PUBRAW+0x150>)
 8005a78:	6013      	str	r3, [r2, #0]
	while (it_status == _NONE)
 8005a7a:	e00b      	b.n	8005a94 <WIFI_MQTT_PUBRAW+0x114>
		if (HAL_GetTick() - startTime > 5000) return 0;
 8005a7c:	f7fd f9c8 	bl	8002e10 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <WIFI_MQTT_PUBRAW+0x150>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <WIFI_MQTT_PUBRAW+0x114>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e00f      	b.n	8005ab4 <WIFI_MQTT_PUBRAW+0x134>
	while (it_status == _NONE)
 8005a94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0ee      	beq.n	8005a7c <WIFI_MQTT_PUBRAW+0xfc>
	if (it_status != PUBRAW_OK) return 0;
 8005a9e:	4b09      	ldr	r3, [pc, #36]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d001      	beq.n	8005aac <WIFI_MQTT_PUBRAW+0x12c>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e003      	b.n	8005ab4 <WIFI_MQTT_PUBRAW+0x134>
	it_status = _NONE;
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <WIFI_MQTT_PUBRAW+0x144>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
	return 1;
 8005ab2:	2301      	movs	r3, #1
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20001a9a 	.word	0x20001a9a
 8005ac4:	2000180c 	.word	0x2000180c
 8005ac8:	0800bcec 	.word	0x0800bcec
 8005acc:	200002ac 	.word	0x200002ac
 8005ad0:	20001a9c 	.word	0x20001a9c

08005ad4 <WIFI_DEVICE_WIFI_CONNECT>:
//}




uint8_t WIFI_DEVICE_WIFI_CONNECT() {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
	return WIFI_CONNECT(&deviceWifiStruct);
 8005ad8:	4802      	ldr	r0, [pc, #8]	@ (8005ae4 <WIFI_DEVICE_WIFI_CONNECT+0x10>)
 8005ada:	f7ff fd6f 	bl	80055bc <WIFI_CONNECT>
 8005ade:	4603      	mov	r3, r0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000005c 	.word	0x2000005c

08005ae8 <WIFI_RST>:


// 当WIFI模块可能死机，执行RST重置WIFI模块
uint8_t WIFI_RST() {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (WIFI_RST_GPIO ,WIFI_RST_PIN, GPIO_PIN_RESET);
 8005aec:	2200      	movs	r2, #0
 8005aee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005af2:	4808      	ldr	r0, [pc, #32]	@ (8005b14 <WIFI_RST+0x2c>)
 8005af4:	f7fd fcfc 	bl	80034f0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8005af8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005afc:	f7fd f994 	bl	8002e28 <HAL_Delay>
	HAL_GPIO_WritePin (WIFI_RST_GPIO ,WIFI_RST_PIN, GPIO_PIN_SET);
 8005b00:	2201      	movs	r2, #1
 8005b02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b06:	4803      	ldr	r0, [pc, #12]	@ (8005b14 <WIFI_RST+0x2c>)
 8005b08:	f7fd fcf2 	bl	80034f0 <HAL_GPIO_WritePin>
	return 1;
 8005b0c:	2301      	movs	r3, #1
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40020000 	.word	0x40020000

08005b18 <WIFI_INIT>:

uint8_t WIFI_INIT() {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	71fb      	strb	r3, [r7, #7]
	uint8_t connected = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	71bb      	strb	r3, [r7, #6]
	while (!connected) {
 8005b26:	e014      	b.n	8005b52 <WIFI_INIT+0x3a>
		if (retry == 3) return 0;
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d101      	bne.n	8005b32 <WIFI_INIT+0x1a>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e013      	b.n	8005b5a <WIFI_INIT+0x42>
		connected = WIFI_DEVICE_WIFI_CONNECT();
 8005b32:	f7ff ffcf 	bl	8005ad4 <WIFI_DEVICE_WIFI_CONNECT>
 8005b36:	4603      	mov	r3, r0
 8005b38:	71bb      	strb	r3, [r7, #6]
		if (!connected) {
 8005b3a:	79bb      	ldrb	r3, [r7, #6]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d108      	bne.n	8005b52 <WIFI_INIT+0x3a>
			WIFI_RST();
 8005b40:	f7ff ffd2 	bl	8005ae8 <WIFI_RST>
			HAL_Delay(1000);
 8005b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b48:	f7fd f96e 	bl	8002e28 <HAL_Delay>
			retry++;
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	71fb      	strb	r3, [r7, #7]
	while (!connected) {
 8005b52:	79bb      	ldrb	r3, [r7, #6]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0e7      	beq.n	8005b28 <WIFI_INIT+0x10>
		}
	}
	return connected;
 8005b58:	79bb      	ldrb	r3, [r7, #6]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <WIFI_CALLBACK>:

void WIFI_CALLBACK() {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
//	if (strncmp(_buffer, "+MQTTSUBRECV:", strlen("+MQTTSUBRECV:")) == 0) {
	if (strstr(_buffer, "MQTTSUBRECV:") != NULL) {
 8005b68:	4967      	ldr	r1, [pc, #412]	@ (8005d08 <WIFI_CALLBACK+0x1a4>)
 8005b6a:	4868      	ldr	r0, [pc, #416]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005b6c:	f003 fa52 	bl	8009014 <strstr>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d050      	beq.n	8005c18 <WIFI_CALLBACK+0xb4>
		updateTime = HAL_GetTick();
 8005b76:	f7fd f94b 	bl	8002e10 <HAL_GetTick>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4a64      	ldr	r2, [pc, #400]	@ (8005d10 <WIFI_CALLBACK+0x1ac>)
 8005b7e:	6013      	str	r3, [r2, #0]
		if (msg_ptr == 4000) msg_ptr = -1;
 8005b80:	4b64      	ldr	r3, [pc, #400]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b21b      	sxth	r3, r3
 8005b86:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005b8a:	d103      	bne.n	8005b94 <WIFI_CALLBACK+0x30>
 8005b8c:	4b61      	ldr	r3, [pc, #388]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005b8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b92:	801a      	strh	r2, [r3, #0]
		if (msg_buffer[msg_ptr] != '\n') {
 8005b94:	4b5f      	ldr	r3, [pc, #380]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b21b      	sxth	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8005d18 <WIFI_CALLBACK+0x1b4>)
 8005b9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ba0:	2b0a      	cmp	r3, #10
 8005ba2:	d014      	beq.n	8005bce <WIFI_CALLBACK+0x6a>
			msg_ptr++;
 8005ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b21b      	sxth	r3, r3
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3301      	adds	r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	b21a      	sxth	r2, r3
 8005bb2:	4b58      	ldr	r3, [pc, #352]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005bb4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, (uint8_t*) msg_buffer + msg_ptr, 1);
 8005bb6:	4b57      	ldr	r3, [pc, #348]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b21b      	sxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b56      	ldr	r3, [pc, #344]	@ (8005d18 <WIFI_CALLBACK+0x1b4>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4855      	ldr	r0, [pc, #340]	@ (8005d1c <WIFI_CALLBACK+0x1b8>)
 8005bc8:	f7fe fd55 	bl	8004676 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) _buffer + _buffer_ptr, 1);
	} else {
		_buffer_ptr++;
		HAL_UART_Receive_IT(&huart1, (uint8_t*) _buffer + _buffer_ptr, 1);
	}
}
 8005bcc:	e09a      	b.n	8005d04 <WIFI_CALLBACK+0x1a0>
			msg_is_checked = 0;
 8005bce:	4b54      	ldr	r3, [pc, #336]	@ (8005d20 <WIFI_CALLBACK+0x1bc>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
			_buffer_ptr = 0;
 8005bd4:	4b53      	ldr	r3, [pc, #332]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
			msg_buffer[msg_ptr] = '^';
 8005bda:	4b4e      	ldr	r3, [pc, #312]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b4d      	ldr	r3, [pc, #308]	@ (8005d18 <WIFI_CALLBACK+0x1b4>)
 8005be4:	215e      	movs	r1, #94	@ 0x5e
 8005be6:	5499      	strb	r1, [r3, r2]
			msg_buffer[msg_ptr+1] = '\0';
 8005be8:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <WIFI_CALLBACK+0x1b0>)
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	4a49      	ldr	r2, [pc, #292]	@ (8005d18 <WIFI_CALLBACK+0x1b4>)
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	54d1      	strb	r1, [r2, r3]
			memset(_buffer, 0, 15);
 8005bf6:	220f      	movs	r2, #15
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4844      	ldr	r0, [pc, #272]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005bfc:	f003 f9e1 	bl	8008fc2 <memset>
			HAL_UART_Receive_IT(&huart1, (uint8_t*) _buffer + _buffer_ptr, 1);
 8005c00:	4b48      	ldr	r3, [pc, #288]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b40      	ldr	r3, [pc, #256]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c0a:	4413      	add	r3, r2
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4842      	ldr	r0, [pc, #264]	@ (8005d1c <WIFI_CALLBACK+0x1b8>)
 8005c12:	f7fe fd30 	bl	8004676 <HAL_UART_Receive_IT>
}
 8005c16:	e075      	b.n	8005d04 <WIFI_CALLBACK+0x1a0>
	} else if (_buffer[_buffer_ptr] == '\n') {
 8005c18:	4b42      	ldr	r3, [pc, #264]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b3a      	ldr	r3, [pc, #232]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c22:	5c9b      	ldrb	r3, [r3, r2]
 8005c24:	2b0a      	cmp	r3, #10
 8005c26:	d15b      	bne.n	8005ce0 <WIFI_CALLBACK+0x17c>
		if (strncmp(_buffer, "OK\r\n", strlen("OK\r\n")) == 0) { // 模块返回OK
 8005c28:	2204      	movs	r2, #4
 8005c2a:	493f      	ldr	r1, [pc, #252]	@ (8005d28 <WIFI_CALLBACK+0x1c4>)
 8005c2c:	4837      	ldr	r0, [pc, #220]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c2e:	f003 f9df 	bl	8008ff0 <strncmp>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <WIFI_CALLBACK+0xdc>
			it_status = _SUCCESS;
 8005c38:	4b3c      	ldr	r3, [pc, #240]	@ (8005d2c <WIFI_CALLBACK+0x1c8>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e039      	b.n	8005cb4 <WIFI_CALLBACK+0x150>
		} else if (strncmp(_buffer, "ERROR\r\n", strlen("ERROR\r\n")) == 0) {
 8005c40:	2207      	movs	r2, #7
 8005c42:	493b      	ldr	r1, [pc, #236]	@ (8005d30 <WIFI_CALLBACK+0x1cc>)
 8005c44:	4831      	ldr	r0, [pc, #196]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c46:	f003 f9d3 	bl	8008ff0 <strncmp>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <WIFI_CALLBACK+0xf4>
			it_status = _FAIL;
 8005c50:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <WIFI_CALLBACK+0x1c8>)
 8005c52:	2202      	movs	r2, #2
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e02d      	b.n	8005cb4 <WIFI_CALLBACK+0x150>
		} else if ((strncmp(_buffer, "WIFI DISCONNECT\r\n", strlen("WIFI DISCONNECT\r\n")) == 0)) {
 8005c58:	2211      	movs	r2, #17
 8005c5a:	4936      	ldr	r1, [pc, #216]	@ (8005d34 <WIFI_CALLBACK+0x1d0>)
 8005c5c:	482b      	ldr	r0, [pc, #172]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c5e:	f003 f9c7 	bl	8008ff0 <strncmp>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <WIFI_CALLBACK+0x112>
			it_status = WIFI_DISCONNECTED;
 8005c68:	4b30      	ldr	r3, [pc, #192]	@ (8005d2c <WIFI_CALLBACK+0x1c8>)
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	701a      	strb	r2, [r3, #0]
			work = 0;
 8005c6e:	4b32      	ldr	r3, [pc, #200]	@ (8005d38 <WIFI_CALLBACK+0x1d4>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e01e      	b.n	8005cb4 <WIFI_CALLBACK+0x150>
		} else if (strncmp(_buffer, ">+MQTTPUB:OK\r\n", strlen(">+MQTTPUB:OK\r\n")) == 0 ||
 8005c76:	220e      	movs	r2, #14
 8005c78:	4930      	ldr	r1, [pc, #192]	@ (8005d3c <WIFI_CALLBACK+0x1d8>)
 8005c7a:	4824      	ldr	r0, [pc, #144]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c7c:	f003 f9b8 	bl	8008ff0 <strncmp>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <WIFI_CALLBACK+0x132>
				strncmp(_buffer, "+MQTTPUB:OK\r\n", strlen("+MQTTPUB:OK\r\n")) == 0) {
 8005c86:	220d      	movs	r2, #13
 8005c88:	492d      	ldr	r1, [pc, #180]	@ (8005d40 <WIFI_CALLBACK+0x1dc>)
 8005c8a:	4820      	ldr	r0, [pc, #128]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005c8c:	f003 f9b0 	bl	8008ff0 <strncmp>
 8005c90:	4603      	mov	r3, r0
		} else if (strncmp(_buffer, ">+MQTTPUB:OK\r\n", strlen(">+MQTTPUB:OK\r\n")) == 0 ||
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <WIFI_CALLBACK+0x13a>
			it_status = PUBRAW_OK;
 8005c96:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <WIFI_CALLBACK+0x1c8>)
 8005c98:	2205      	movs	r2, #5
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e00a      	b.n	8005cb4 <WIFI_CALLBACK+0x150>
		} else if (strncmp(_buffer, "+MQTTPUB:FAIL\r\n", strlen("+MQTTPUB:FAIL\r\n")) == 0) {
 8005c9e:	220f      	movs	r2, #15
 8005ca0:	4928      	ldr	r1, [pc, #160]	@ (8005d44 <WIFI_CALLBACK+0x1e0>)
 8005ca2:	481a      	ldr	r0, [pc, #104]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005ca4:	f003 f9a4 	bl	8008ff0 <strncmp>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <WIFI_CALLBACK+0x150>
			it_status = PUBRAW_FAIL;
 8005cae:	4b1f      	ldr	r3, [pc, #124]	@ (8005d2c <WIFI_CALLBACK+0x1c8>)
 8005cb0:	2206      	movs	r2, #6
 8005cb2:	701a      	strb	r2, [r3, #0]
		_buffer[_buffer_ptr+1] = '\0';
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	4a13      	ldr	r2, [pc, #76]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	54d1      	strb	r1, [r2, r3]
		_buffer_ptr = 0;
 8005cc2:	4b18      	ldr	r3, [pc, #96]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*) _buffer + _buffer_ptr, 1);
 8005cc8:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005cd2:	4413      	add	r3, r2
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4810      	ldr	r0, [pc, #64]	@ (8005d1c <WIFI_CALLBACK+0x1b8>)
 8005cda:	f7fe fccc 	bl	8004676 <HAL_UART_Receive_IT>
}
 8005cde:	e011      	b.n	8005d04 <WIFI_CALLBACK+0x1a0>
		_buffer_ptr++;
 8005ce0:	4b10      	ldr	r3, [pc, #64]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	4b0e      	ldr	r3, [pc, #56]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005cec:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*) _buffer + _buffer_ptr, 1);
 8005cee:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <WIFI_CALLBACK+0x1c0>)
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <WIFI_CALLBACK+0x1a8>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4807      	ldr	r0, [pc, #28]	@ (8005d1c <WIFI_CALLBACK+0x1b8>)
 8005d00:	f7fe fcb9 	bl	8004676 <HAL_UART_Receive_IT>
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	0800bd0c 	.word	0x0800bd0c
 8005d0c:	20001810 	.word	0x20001810
 8005d10:	200017f8 	.word	0x200017f8
 8005d14:	20000052 	.word	0x20000052
 8005d18:	20000858 	.word	0x20000858
 8005d1c:	200002ac 	.word	0x200002ac
 8005d20:	200017fc 	.word	0x200017fc
 8005d24:	20001a9a 	.word	0x20001a9a
 8005d28:	0800bd1c 	.word	0x0800bd1c
 8005d2c:	2000180c 	.word	0x2000180c
 8005d30:	0800bd24 	.word	0x0800bd24
 8005d34:	0800bd2c 	.word	0x0800bd2c
 8005d38:	2000033c 	.word	0x2000033c
 8005d3c:	0800bd40 	.word	0x0800bd40
 8005d40:	0800bd50 	.word	0x0800bd50
 8005d44:	0800bd60 	.word	0x0800bd60

08005d48 <cJSON_GetStringValue>:
{
    return (const char*) (global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsString(item))
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f002 f8ca 	bl	8007eea <cJSON_IsString>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <cJSON_GetStringValue+0x18>
    {
        return NULL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e001      	b.n	8005d64 <cJSON_GetStringValue+0x1c>
    }

    return item->valuestring;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <case_insensitive_strcmp+0x16>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e056      	b.n	8005e34 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10d      	bne.n	8005daa <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e050      	b.n	8005e34 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <case_insensitive_strcmp+0x32>
        {
            return 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e04a      	b.n	8005e34 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3301      	adds	r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a22      	ldr	r2, [pc, #136]	@ (8005e40 <case_insensitive_strcmp+0xd4>)
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d103      	bne.n	8005dca <case_insensitive_strcmp+0x5e>
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	f103 0220 	add.w	r2, r3, #32
 8005dc8:	e000      	b.n	8005dcc <case_insensitive_strcmp+0x60>
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	73bb      	strb	r3, [r7, #14]
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	491a      	ldr	r1, [pc, #104]	@ (8005e40 <case_insensitive_strcmp+0xd4>)
 8005dd8:	440b      	add	r3, r1
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d102      	bne.n	8005dea <case_insensitive_strcmp+0x7e>
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	3320      	adds	r3, #32
 8005de8:	e000      	b.n	8005dec <case_insensitive_strcmp+0x80>
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d0d0      	beq.n	8005d92 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	737b      	strb	r3, [r7, #13]
 8005df6:	7b7b      	ldrb	r3, [r7, #13]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	4a11      	ldr	r2, [pc, #68]	@ (8005e40 <case_insensitive_strcmp+0xd4>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d103      	bne.n	8005e10 <case_insensitive_strcmp+0xa4>
 8005e08:	7b7b      	ldrb	r3, [r7, #13]
 8005e0a:	f103 0220 	add.w	r2, r3, #32
 8005e0e:	e000      	b.n	8005e12 <case_insensitive_strcmp+0xa6>
 8005e10:	7b7a      	ldrb	r2, [r7, #13]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	733b      	strb	r3, [r7, #12]
 8005e18:	7b3b      	ldrb	r3, [r7, #12]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	4908      	ldr	r1, [pc, #32]	@ (8005e40 <case_insensitive_strcmp+0xd4>)
 8005e1e:	440b      	add	r3, r1
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <case_insensitive_strcmp+0xc4>
 8005e2a:	7b3b      	ldrb	r3, [r7, #12]
 8005e2c:	3320      	adds	r3, #32
 8005e2e:	e000      	b.n	8005e32 <case_insensitive_strcmp+0xc6>
 8005e30:	7b3b      	ldrb	r3, [r7, #12]
 8005e32:	1ad3      	subs	r3, r2, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	0800be48 	.word	0x0800be48

08005e44 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <cJSON_strdup+0x1c>
    {
        return NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e015      	b.n	8005e8c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fa f9c7 	bl	80001f4 <strlen>
 8005e66:	4603      	mov	r3, r0
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	4798      	blx	r3
 8005e74:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <cJSON_strdup+0x3c>
    {
        return NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e005      	b.n	8005e8c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	68b8      	ldr	r0, [r7, #8]
 8005e86:	f003 f966 	bl	8009156 <memcpy>

    return copy;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2028      	movs	r0, #40	@ 0x28
 8005ea2:	4798      	blx	r3
 8005ea4:	60f8      	str	r0, [r7, #12]
    if (node)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8005eac:	2228      	movs	r2, #40	@ 0x28
 8005eae:	2100      	movs	r1, #0
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f003 f886 	bl	8008fc2 <memset>
    }

    return node;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8005ecc:	e03d      	b.n	8005f4a <cJSON_Delete+0x8a>
    {
        next = item->next;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <cJSON_Delete+0x32>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ffe7 	bl	8005ec0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <cJSON_Delete+0x58>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8005f06:	4b15      	ldr	r3, [pc, #84]	@ (8005f5c <cJSON_Delete+0x9c>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6912      	ldr	r2, [r2, #16]
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4798      	blx	r3
            item->valuestring = NULL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10c      	bne.n	8005f3e <cJSON_Delete+0x7e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <cJSON_Delete+0x9c>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6a12      	ldr	r2, [r2, #32]
 8005f34:	4610      	mov	r0, r2
 8005f36:	4798      	blx	r3
            item->string = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8005f3e:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <cJSON_Delete+0x9c>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
        item = next;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1be      	bne.n	8005ece <cJSON_Delete+0xe>
    }
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000064 	.word	0x20000064

08005f60 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8005f64:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b098      	sub	sp, #96	@ 0x60
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
    double number = 0;
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8005f8a:	f7ff ffe9 	bl	8005f60 <get_decimal_point>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <parse_number+0x36>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <parse_number+0x3a>
    {
        return false;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e0a0      	b.n	80060ec <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fae:	e03d      	b.n	800602c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
 8005fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fba:	440b      	add	r3, r1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b45      	cmp	r3, #69	@ 0x45
 8005fc2:	dc17      	bgt.n	8005ff4 <parse_number+0x84>
 8005fc4:	2b2b      	cmp	r3, #43	@ 0x2b
 8005fc6:	db40      	blt.n	800604a <parse_number+0xda>
 8005fc8:	3b2b      	subs	r3, #43	@ 0x2b
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	4b4c      	ldr	r3, [pc, #304]	@ (8006100 <parse_number+0x190>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <parse_number+0x88>
 8005fe0:	f002 0308 	and.w	r3, r2, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bf14      	ite	ne
 8005fe8:	2301      	movne	r3, #1
 8005fea:	2300      	moveq	r3, #0
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d111      	bne.n	8006016 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8005ff2:	e02a      	b.n	800604a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8005ff4:	2b65      	cmp	r3, #101	@ 0x65
 8005ff6:	d128      	bne.n	800604a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6899      	ldr	r1, [r3, #8]
 8006000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006002:	440b      	add	r3, r1
 8006004:	4413      	add	r3, r2
 8006006:	7819      	ldrb	r1, [r3, #0]
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800600e:	4413      	add	r3, r2
 8006010:	460a      	mov	r2, r1
 8006012:	701a      	strb	r2, [r3, #0]
                break;
 8006014:	e007      	b.n	8006026 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8006016:	f107 0208 	add.w	r2, r7, #8
 800601a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800601c:	4413      	add	r3, r2
 800601e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006022:	701a      	strb	r2, [r3, #0]
                break;
 8006024:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8006026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006028:	3301      	adds	r3, #1
 800602a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800602c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800602e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006030:	d80d      	bhi.n	800604e <parse_number+0xde>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <parse_number+0xde>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800603e:	441a      	add	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d3b3      	bcc.n	8005fb0 <parse_number+0x40>
        }
    }
loop_end:
 8006048:	e001      	b.n	800604e <parse_number+0xde>
                goto loop_end;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <parse_number+0xe0>
loop_end:
 800604e:	bf00      	nop
    number_c_string[i] = '\0';
 8006050:	f107 0208 	add.w	r2, r7, #8
 8006054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006056:	4413      	add	r3, r2
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800605c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8006060:	f107 0308 	add.w	r3, r7, #8
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f002 fe4e 	bl	8008d08 <strtod>
 800606c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8006070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	429a      	cmp	r2, r3
 8006078:	d101      	bne.n	800607e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800607a:	2300      	movs	r3, #0
 800607c:	e036      	b.n	80060ec <parse_number+0x17c>
    }

    item->valuedouble = number;
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006084:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8006088:	a31b      	add	r3, pc, #108	@ (adr r3, 80060f8 <parse_number+0x188>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006092:	f7fa fd4f 	bl	8000b34 <__aeabi_dcmpge>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d004      	beq.n	80060a6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80060a2:	615a      	str	r2, [r3, #20]
 80060a4:	e015      	b.n	80060d2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <parse_number+0x194>)
 80060ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80060b0:	f7fa fd36 	bl	8000b20 <__aeabi_dcmple>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80060c0:	615a      	str	r2, [r3, #20]
 80060c2:	e006      	b.n	80060d2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80060c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80060c8:	f7fa fd5e 	bl	8000b88 <__aeabi_d2iz>
 80060cc:	4602      	mov	r2, r0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2208      	movs	r2, #8
 80060d6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80060de:	f107 0208 	add.w	r2, r7, #8
 80060e2:	1a8a      	subs	r2, r1, r2
 80060e4:	441a      	add	r2, r3
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	609a      	str	r2, [r3, #8]
    return true;
 80060ea:	2301      	movs	r3, #1
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3760      	adds	r7, #96	@ 0x60
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	f3af 8000 	nop.w
 80060f8:	ffc00000 	.word	0xffc00000
 80060fc:	41dfffff 	.word	0x41dfffff
 8006100:	04007fe5 	.word	0x04007fe5
 8006104:	c1e00000 	.word	0xc1e00000

08006108 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <ensure+0x20>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <ensure+0x24>
    {
        return NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	e083      	b.n	8006234 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <ensure+0x3c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d301      	bcc.n	8006144 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	e077      	b.n	8006234 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da01      	bge.n	800614e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	e072      	b.n	8006234 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	4413      	add	r3, r2
 8006156:	3301      	adds	r3, #1
 8006158:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d805      	bhi.n	8006170 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4413      	add	r3, r2
 800616e:	e061      	b.n	8006234 <ensure+0x12c>
    }

    if (p->noalloc) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <ensure+0x74>
        return NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	e05b      	b.n	8006234 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006182:	d308      	bcc.n	8006196 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	db03      	blt.n	8006192 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800618a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	e004      	b.n	800619c <ensure+0x94>
        }
        else
        {
            return NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	e04e      	b.n	8006234 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d018      	beq.n	80061d6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	4610      	mov	r0, r2
 80061b0:	4798      	blx	r3
 80061b2:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d132      	bne.n	8006220 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	4610      	mov	r0, r2
 80061c4:	4798      	blx	r3
            p->length = 0;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

            return NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e02e      	b.n	8006234 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	68b8      	ldr	r0, [r7, #8]
 80061dc:	4798      	blx	r3
 80061de:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10d      	bne.n	8006202 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	4610      	mov	r0, r2
 80061f0:	4798      	blx	r3
            p->length = 0;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]

            return NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	e018      	b.n	8006234 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6819      	ldr	r1, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	3301      	adds	r3, #1
 800620c:	461a      	mov	r2, r3
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f002 ffa1 	bl	8009156 <memcpy>
        p->hooks.deallocate(p->buffer);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
    }
    p->length = newsize;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4413      	add	r3, r2
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d013      	beq.n	8006276 <update_offset+0x3a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	4413      	add	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689c      	ldr	r4, [r3, #8]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7f9 ffc4 	bl	80001f4 <strlen>
 800626c:	4603      	mov	r3, r0
 800626e:	18e2      	adds	r2, r4, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	609a      	str	r2, [r3, #8]
 8006274:	e000      	b.n	8006278 <update_offset+0x3c>
        return;
 8006276:	bf00      	nop
}
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	bd90      	pop	{r4, r7, pc}
	...

08006280 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8006280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006284:	b087      	sub	sp, #28
 8006286:	af00      	add	r7, sp, #0
 8006288:	ed87 0b02 	vstr	d0, [r7, #8]
 800628c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8006290:	68b8      	ldr	r0, [r7, #8]
 8006292:	68fe      	ldr	r6, [r7, #12]
 8006294:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	687e      	ldr	r6, [r7, #4]
 800629c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80062a0:	f7fa fc52 	bl	8000b48 <__aeabi_dcmpgt>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <compare_double+0x34>
 80062aa:	68bc      	ldr	r4, [r7, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80062b2:	e003      	b.n	80062bc <compare_double+0x3c>
 80062b4:	683c      	ldr	r4, [r7, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80062bc:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80062c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062c8:	f7f9 fff6 	bl	80002b8 <__aeabi_dsub>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4690      	mov	r8, r2
 80062d2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	4b0c      	ldr	r3, [pc, #48]	@ (800630c <compare_double+0x8c>)
 80062dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062e0:	f7fa f9a2 	bl	8000628 <__aeabi_dmul>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	2101      	movs	r1, #1
 80062ea:	460c      	mov	r4, r1
 80062ec:	4640      	mov	r0, r8
 80062ee:	4649      	mov	r1, r9
 80062f0:	f7fa fc16 	bl	8000b20 <__aeabi_dcmple>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <compare_double+0x7e>
 80062fa:	2300      	movs	r3, #0
 80062fc:	461c      	mov	r4, r3
 80062fe:	b2e3      	uxtb	r3, r4
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800630a:	bf00      	nop
 800630c:	3cb00000 	.word	0x3cb00000

08006310 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8006310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006312:	b093      	sub	sp, #76	@ 0x4c
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006324:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	f107 0318 	add.w	r3, r7, #24
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	609a      	str	r2, [r3, #8]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	611a      	str	r2, [r3, #16]
 8006344:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8006346:	f7ff fe0b 	bl	8005f60 <get_decimal_point>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <print_number+0x56>
    {
        return false;
 8006362:	2300      	movs	r3, #0
 8006364:	e0b4      	b.n	80064d0 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8006366:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800636a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800636e:	f7fa fbf5 	bl	8000b5c <__aeabi_dcmpun>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d121      	bne.n	80063bc <print_number+0xac>
 8006378:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800637a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8006380:	2301      	movs	r3, #1
 8006382:	461e      	mov	r6, r3
 8006384:	f04f 32ff 	mov.w	r2, #4294967295
 8006388:	4b53      	ldr	r3, [pc, #332]	@ (80064d8 <print_number+0x1c8>)
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fbe5 	bl	8000b5c <__aeabi_dcmpun>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <print_number+0xa0>
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	4b4e      	ldr	r3, [pc, #312]	@ (80064d8 <print_number+0x1c8>)
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7fa fbbd 	bl	8000b20 <__aeabi_dcmple>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <print_number+0xa0>
 80063ac:	2300      	movs	r3, #0
 80063ae:	461e      	mov	r6, r3
 80063b0:	b2f3      	uxtb	r3, r6
 80063b2:	f083 0301 	eor.w	r3, r3, #1
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80063bc:	f107 0314 	add.w	r3, r7, #20
 80063c0:	4946      	ldr	r1, [pc, #280]	@ (80064dc <print_number+0x1cc>)
 80063c2:	4618      	mov	r0, r3
 80063c4:	f002 fd6e 	bl	8008ea4 <siprintf>
 80063c8:	6478      	str	r0, [r7, #68]	@ 0x44
 80063ca:	e03f      	b.n	800644c <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fa f8bf 	bl	8000554 <__aeabi_i2d>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80063de:	f7fa fb8b 	bl	8000af8 <__aeabi_dcmpeq>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	f107 0314 	add.w	r3, r7, #20
 80063f0:	493b      	ldr	r1, [pc, #236]	@ (80064e0 <print_number+0x1d0>)
 80063f2:	4618      	mov	r0, r3
 80063f4:	f002 fd56 	bl	8008ea4 <siprintf>
 80063f8:	6478      	str	r0, [r7, #68]	@ 0x44
 80063fa:	e027      	b.n	800644c <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80063fc:	f107 0014 	add.w	r0, r7, #20
 8006400:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006404:	4937      	ldr	r1, [pc, #220]	@ (80064e4 <print_number+0x1d4>)
 8006406:	f002 fd4d 	bl	8008ea4 <siprintf>
 800640a:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800640c:	f107 0208 	add.w	r2, r7, #8
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	4934      	ldr	r1, [pc, #208]	@ (80064e8 <print_number+0x1d8>)
 8006416:	4618      	mov	r0, r3
 8006418:	f002 fd64 	bl	8008ee4 <siscanf>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d10c      	bne.n	800643c <print_number+0x12c>
 8006422:	ed97 7b02 	vldr	d7, [r7, #8]
 8006426:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800642a:	eeb0 0a47 	vmov.f32	s0, s14
 800642e:	eef0 0a67 	vmov.f32	s1, s15
 8006432:	f7ff ff25 	bl	8006280 <compare_double>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d107      	bne.n	800644c <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800643c:	f107 0014 	add.w	r0, r7, #20
 8006440:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006444:	4929      	ldr	r1, [pc, #164]	@ (80064ec <print_number+0x1dc>)
 8006446:	f002 fd2d 	bl	8008ea4 <siprintf>
 800644a:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800644c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800644e:	2b00      	cmp	r3, #0
 8006450:	db02      	blt.n	8006458 <print_number+0x148>
 8006452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006454:	2b19      	cmp	r3, #25
 8006456:	dd01      	ble.n	800645c <print_number+0x14c>
    {
        return false;
 8006458:	2300      	movs	r3, #0
 800645a:	e039      	b.n	80064d0 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800645c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645e:	3301      	adds	r3, #1
 8006460:	4619      	mov	r1, r3
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f7ff fe50 	bl	8006108 <ensure>
 8006468:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <print_number+0x164>
    {
        return false;
 8006470:	2300      	movs	r3, #0
 8006472:	e02d      	b.n	80064d0 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8006474:	2300      	movs	r3, #0
 8006476:	643b      	str	r3, [r7, #64]	@ 0x40
 8006478:	e01a      	b.n	80064b0 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800647a:	f107 0214 	add.w	r2, r7, #20
 800647e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006480:	4413      	add	r3, r2
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006488:	429a      	cmp	r2, r3
 800648a:	d105      	bne.n	8006498 <print_number+0x188>
        {
            output_pointer[i] = '.';
 800648c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800648e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006490:	4413      	add	r3, r2
 8006492:	222e      	movs	r2, #46	@ 0x2e
 8006494:	701a      	strb	r2, [r3, #0]
            continue;
 8006496:	e008      	b.n	80064aa <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8006498:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800649a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800649c:	4413      	add	r3, r2
 800649e:	f107 0114 	add.w	r1, r7, #20
 80064a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064a4:	440a      	add	r2, r1
 80064a6:	7812      	ldrb	r2, [r2, #0]
 80064a8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80064aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ac:	3301      	adds	r3, #1
 80064ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80064b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d3e0      	bcc.n	800647a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 80064b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064bc:	4413      	add	r3, r2
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c8:	441a      	add	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	609a      	str	r2, [r3, #8]

    return true;
 80064ce:	2301      	movs	r3, #1
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	374c      	adds	r7, #76	@ 0x4c
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d8:	7fefffff 	.word	0x7fefffff
 80064dc:	0800bd7c 	.word	0x0800bd7c
 80064e0:	0800bd84 	.word	0x0800bd84
 80064e4:	0800bd88 	.word	0x0800bd88
 80064e8:	0800bd90 	.word	0x0800bd90
 80064ec:	0800bd94 	.word	0x0800bd94

080064f0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8006500:	2300      	movs	r3, #0
 8006502:	60bb      	str	r3, [r7, #8]
 8006504:	e04c      	b.n	80065a0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4413      	add	r3, r2
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006510:	d90f      	bls.n	8006532 <parse_hex4+0x42>
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4413      	add	r3, r2
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b39      	cmp	r3, #57	@ 0x39
 800651c:	d809      	bhi.n	8006532 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	3b30      	subs	r3, #48	@ 0x30
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e02d      	b.n	800658e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4413      	add	r3, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b40      	cmp	r3, #64	@ 0x40
 800653c:	d90f      	bls.n	800655e <parse_hex4+0x6e>
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b46      	cmp	r3, #70	@ 0x46
 8006548:	d809      	bhi.n	800655e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4413      	add	r3, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	3b37      	subs	r3, #55	@ 0x37
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e017      	b.n	800658e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4413      	add	r3, r2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b60      	cmp	r3, #96	@ 0x60
 8006568:	d90f      	bls.n	800658a <parse_hex4+0x9a>
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b66      	cmp	r3, #102	@ 0x66
 8006574:	d809      	bhi.n	800658a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4413      	add	r3, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	3b57      	subs	r3, #87	@ 0x57
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e001      	b.n	800658e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800658a:	2300      	movs	r3, #0
 800658c:	e00c      	b.n	80065a8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d802      	bhi.n	800659a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3301      	adds	r3, #1
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d9af      	bls.n	8006506 <parse_hex4+0x16>
        }
    }

    return h;
 80065a6:	68fb      	ldr	r3, [r7, #12]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	@ 0x28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	f340 80b7 	ble.w	800675e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	3302      	adds	r3, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff ff7b 	bl	80064f0 <parse_hex4>
 80065fa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006602:	d304      	bcc.n	800660e <utf16_literal_to_utf8+0x5a>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800660a:	f0c0 80aa 	bcc.w	8006762 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8006614:	d337      	bcc.n	8006686 <utf16_literal_to_utf8+0xd2>
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800661c:	d233      	bcs.n	8006686 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	3306      	adds	r3, #6
 8006622:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8006628:	230c      	movs	r3, #12
 800662a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b05      	cmp	r3, #5
 8006636:	f340 8096 	ble.w	8006766 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b5c      	cmp	r3, #92	@ 0x5c
 8006640:	f040 8093 	bne.w	800676a <utf16_literal_to_utf8+0x1b6>
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3301      	adds	r3, #1
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b75      	cmp	r3, #117	@ 0x75
 800664c:	f040 808d 	bne.w	800676a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	3302      	adds	r3, #2
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff ff4b 	bl	80064f0 <parse_hex4>
 800665a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006662:	f0c0 8084 	bcc.w	800676e <utf16_literal_to_utf8+0x1ba>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800666c:	d27f      	bcs.n	800676e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	029a      	lsls	r2, r3, #10
 8006672:	4b43      	ldr	r3, [pc, #268]	@ (8006780 <utf16_literal_to_utf8+0x1cc>)
 8006674:	4013      	ands	r3, r2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800667c:	4313      	orrs	r3, r2
 800667e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8006684:	e004      	b.n	8006690 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8006686:	2306      	movs	r3, #6
 8006688:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	2b7f      	cmp	r3, #127	@ 0x7f
 8006694:	d803      	bhi.n	800669e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669c:	e01f      	b.n	80066de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a4:	d206      	bcs.n	80066b4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80066a6:	2302      	movs	r3, #2
 80066a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80066ac:	23c0      	movs	r3, #192	@ 0xc0
 80066ae:	f887 3020 	strb.w	r3, [r7, #32]
 80066b2:	e014      	b.n	80066de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ba:	d206      	bcs.n	80066ca <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80066bc:	2303      	movs	r3, #3
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80066c2:	23e0      	movs	r3, #224	@ 0xe0
 80066c4:	f887 3020 	strb.w	r3, [r7, #32]
 80066c8:	e009      	b.n	80066de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80066d0:	d24f      	bcs.n	8006772 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80066d2:	2304      	movs	r3, #4
 80066d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80066d8:	23f0      	movs	r3, #240	@ 0xf0
 80066da:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80066de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066e2:	3b01      	subs	r3, #1
 80066e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066e8:	e015      	b.n	8006716 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6819      	ldr	r1, [r3, #0]
 80066f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80066fc:	440b      	add	r3, r1
 80066fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	099b      	lsrs	r3, r3, #6
 800670a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800670c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006710:	3b01      	subs	r3, #1
 8006712:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006716:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800671e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006722:	2b01      	cmp	r3, #1
 8006724:	d909      	bls.n	800673a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	b2d9      	uxtb	r1, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006732:	430a      	orrs	r2, r1
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e007      	b.n	800674a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	b2da      	uxtb	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8006758:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800675c:	e00b      	b.n	8006776 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800675e:	bf00      	nop
 8006760:	e008      	b.n	8006774 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8006762:	bf00      	nop
 8006764:	e006      	b.n	8006774 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8006766:	bf00      	nop
 8006768:	e004      	b.n	8006774 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8006772:	bf00      	nop

fail:
    return 0;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3728      	adds	r7, #40	@ 0x28
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	000ffc00 	.word	0x000ffc00

08006784 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	@ 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	3301      	adds	r3, #1
 8006798:	4413      	add	r3, r2
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	3301      	adds	r3, #1
 80067a6:	4413      	add	r3, r2
 80067a8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4413      	add	r3, r2
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b22      	cmp	r3, #34	@ 0x22
 80067c0:	f040 8103 	bne.w	80069ca <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80067cc:	e017      	b.n	80067fe <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80067d4:	d110      	bne.n	80067f8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	f080 80f1 	bcs.w	80069ce <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	3301      	adds	r3, #1
 80067f0:	61bb      	str	r3, [r7, #24]
                input_end++;
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	3301      	adds	r3, #1
 80067f6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	3301      	adds	r3, #1
 80067fc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	461a      	mov	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d203      	bcs.n	8006818 <parse_string+0x94>
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b22      	cmp	r3, #34	@ 0x22
 8006816:	d1da      	bne.n	80067ce <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6a3a      	ldr	r2, [r7, #32]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	461a      	mov	r2, r3
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	f080 80d3 	bcs.w	80069d2 <parse_string+0x24e>
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b22      	cmp	r3, #34	@ 0x22
 8006832:	f040 80ce 	bne.w	80069d2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	4413      	add	r3, r2
 8006840:	6a3a      	ldr	r2, [r7, #32]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	461a      	mov	r2, r3
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	3201      	adds	r2, #1
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
 8006858:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80ba 	beq.w	80069d6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8006866:	e094      	b.n	8006992 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b5c      	cmp	r3, #92	@ 0x5c
 800686e:	d008      	beq.n	8006882 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8006870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006872:	1c53      	adds	r3, r2, #1
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	1c59      	adds	r1, r3, #1
 800687a:	60f9      	str	r1, [r7, #12]
 800687c:	7812      	ldrb	r2, [r2, #0]
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e087      	b.n	8006992 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8006882:	2302      	movs	r3, #2
 8006884:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	f340 80a4 	ble.w	80069da <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	3301      	adds	r3, #1
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b75      	cmp	r3, #117	@ 0x75
 800689a:	f300 80a0 	bgt.w	80069de <parse_string+0x25a>
 800689e:	2b5c      	cmp	r3, #92	@ 0x5c
 80068a0:	da04      	bge.n	80068ac <parse_string+0x128>
 80068a2:	2b22      	cmp	r3, #34	@ 0x22
 80068a4:	d05c      	beq.n	8006960 <parse_string+0x1dc>
 80068a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80068a8:	d05a      	beq.n	8006960 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80068aa:	e098      	b.n	80069de <parse_string+0x25a>
            switch (input_pointer[1])
 80068ac:	3b5c      	subs	r3, #92	@ 0x5c
 80068ae:	2b19      	cmp	r3, #25
 80068b0:	f200 8095 	bhi.w	80069de <parse_string+0x25a>
 80068b4:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <parse_string+0x138>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	08006961 	.word	0x08006961
 80068c0:	080069df 	.word	0x080069df
 80068c4:	080069df 	.word	0x080069df
 80068c8:	080069df 	.word	0x080069df
 80068cc:	080069df 	.word	0x080069df
 80068d0:	080069df 	.word	0x080069df
 80068d4:	08006925 	.word	0x08006925
 80068d8:	080069df 	.word	0x080069df
 80068dc:	080069df 	.word	0x080069df
 80068e0:	080069df 	.word	0x080069df
 80068e4:	08006931 	.word	0x08006931
 80068e8:	080069df 	.word	0x080069df
 80068ec:	080069df 	.word	0x080069df
 80068f0:	080069df 	.word	0x080069df
 80068f4:	080069df 	.word	0x080069df
 80068f8:	080069df 	.word	0x080069df
 80068fc:	080069df 	.word	0x080069df
 8006900:	080069df 	.word	0x080069df
 8006904:	0800693d 	.word	0x0800693d
 8006908:	080069df 	.word	0x080069df
 800690c:	080069df 	.word	0x080069df
 8006910:	080069df 	.word	0x080069df
 8006914:	08006949 	.word	0x08006949
 8006918:	080069df 	.word	0x080069df
 800691c:	08006955 	.word	0x08006955
 8006920:	08006971 	.word	0x08006971
                    *output_pointer++ = '\b';
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	60fa      	str	r2, [r7, #12]
 800692a:	2208      	movs	r2, #8
 800692c:	701a      	strb	r2, [r3, #0]
                    break;
 800692e:	e02c      	b.n	800698a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	60fa      	str	r2, [r7, #12]
 8006936:	220c      	movs	r2, #12
 8006938:	701a      	strb	r2, [r3, #0]
                    break;
 800693a:	e026      	b.n	800698a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	60fa      	str	r2, [r7, #12]
 8006942:	220a      	movs	r2, #10
 8006944:	701a      	strb	r2, [r3, #0]
                    break;
 8006946:	e020      	b.n	800698a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	60fa      	str	r2, [r7, #12]
 800694e:	220d      	movs	r2, #13
 8006950:	701a      	strb	r2, [r3, #0]
                    break;
 8006952:	e01a      	b.n	800698a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	60fa      	str	r2, [r7, #12]
 800695a:	2209      	movs	r2, #9
 800695c:	701a      	strb	r2, [r3, #0]
                    break;
 800695e:	e014      	b.n	800698a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	60f9      	str	r1, [r7, #12]
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	701a      	strb	r2, [r3, #0]
                    break;
 800696e:	e00c      	b.n	800698a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8006970:	f107 030c 	add.w	r3, r7, #12
 8006974:	461a      	mov	r2, r3
 8006976:	6a39      	ldr	r1, [r7, #32]
 8006978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800697a:	f7ff fe1b 	bl	80065b4 <utf16_literal_to_utf8>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02c      	beq.n	80069e2 <parse_string+0x25e>
                    break;
 8006988:	bf00      	nop
            }
            input_pointer += sequence_length;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	4413      	add	r3, r2
 8006990:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8006992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	429a      	cmp	r2, r3
 8006998:	f4ff af66 	bcc.w	8006868 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2210      	movs	r2, #16
 80069a6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	609a      	str	r2, [r3, #8]

    return true;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e020      	b.n	8006a0c <parse_string+0x288>
        goto fail;
 80069ca:	bf00      	nop
 80069cc:	e00a      	b.n	80069e4 <parse_string+0x260>
                    goto fail;
 80069ce:	bf00      	nop
 80069d0:	e008      	b.n	80069e4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 80069d2:	bf00      	nop
 80069d4:	e006      	b.n	80069e4 <parse_string+0x260>
            goto fail; /* allocation failure */
 80069d6:	bf00      	nop
 80069d8:	e004      	b.n	80069e4 <parse_string+0x260>
                goto fail;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <parse_string+0x260>
                    goto fail;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <parse_string+0x260>
                        goto fail;
 80069e2:	bf00      	nop

fail:
    if (output != NULL)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	69f8      	ldr	r0, [r7, #28]
 80069f0:	4798      	blx	r3
        output = NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	609a      	str	r2, [r3, #8]
    }

    return false;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3728      	adds	r7, #40	@ 0x28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <print_string_ptr+0x28>
    {
        return false;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e110      	b.n	8006c5e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d111      	bne.n	8006a66 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8006a42:	2103      	movs	r1, #3
 8006a44:	6838      	ldr	r0, [r7, #0]
 8006a46:	f7ff fb5f 	bl	8006108 <ensure>
 8006a4a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <print_string_ptr+0x42>
        {
            return false;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e103      	b.n	8006c5e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4a83      	ldr	r2, [pc, #524]	@ (8006c68 <print_string_ptr+0x254>)
 8006a5a:	8811      	ldrh	r1, [r2, #0]
 8006a5c:	7892      	ldrb	r2, [r2, #2]
 8006a5e:	8019      	strh	r1, [r3, #0]
 8006a60:	709a      	strb	r2, [r3, #2]

        return true;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e0fb      	b.n	8006c5e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	e024      	b.n	8006ab6 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b22      	cmp	r3, #34	@ 0x22
 8006a72:	dc0f      	bgt.n	8006a94 <print_string_ptr+0x80>
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	db13      	blt.n	8006aa0 <print_string_ptr+0x8c>
 8006a78:	3b08      	subs	r3, #8
 8006a7a:	4a7c      	ldr	r2, [pc, #496]	@ (8006c6c <print_string_ptr+0x258>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <print_string_ptr+0x84>
 8006a92:	e005      	b.n	8006aa0 <print_string_ptr+0x8c>
 8006a94:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a96:	d103      	bne.n	8006aa0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
                break;
 8006a9e:	e007      	b.n	8006ab0 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b1f      	cmp	r3, #31
 8006aa6:	d802      	bhi.n	8006aae <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3305      	adds	r3, #5
 8006aac:	617b      	str	r3, [r7, #20]
                }
                break;
 8006aae:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1d6      	bne.n	8006a6c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3303      	adds	r3, #3
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6838      	ldr	r0, [r7, #0]
 8006ad4:	f7ff fb18 	bl	8006108 <ensure>
 8006ad8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <print_string_ptr+0xd0>
    {
        return false;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e0bc      	b.n	8006c5e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d117      	bne.n	8006b1a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2222      	movs	r2, #34	@ 0x22
 8006aee:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3301      	adds	r3, #1
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f002 fb2c 	bl	8009156 <memcpy>
        output[output_length + 1] = '\"';
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	2222      	movs	r2, #34	@ 0x22
 8006b08:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4413      	add	r3, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]

        return true;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0a1      	b.n	8006c5e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2222      	movs	r2, #34	@ 0x22
 8006b1e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	3301      	adds	r3, #1
 8006b24:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	e086      	b.n	8006c3a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b1f      	cmp	r3, #31
 8006b32:	d90c      	bls.n	8006b4e <print_string_ptr+0x13a>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b22      	cmp	r3, #34	@ 0x22
 8006b3a:	d008      	beq.n	8006b4e <print_string_ptr+0x13a>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b42:	d004      	beq.n	8006b4e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	e06f      	b.n	8006c2e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	61ba      	str	r2, [r7, #24]
 8006b54:	225c      	movs	r2, #92	@ 0x5c
 8006b56:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b22      	cmp	r3, #34	@ 0x22
 8006b5e:	dc3d      	bgt.n	8006bdc <print_string_ptr+0x1c8>
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	db59      	blt.n	8006c18 <print_string_ptr+0x204>
 8006b64:	3b08      	subs	r3, #8
 8006b66:	2b1a      	cmp	r3, #26
 8006b68:	d856      	bhi.n	8006c18 <print_string_ptr+0x204>
 8006b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b70 <print_string_ptr+0x15c>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006bf1 	.word	0x08006bf1
 8006b74:	08006c11 	.word	0x08006c11
 8006b78:	08006c01 	.word	0x08006c01
 8006b7c:	08006c19 	.word	0x08006c19
 8006b80:	08006bf9 	.word	0x08006bf9
 8006b84:	08006c09 	.word	0x08006c09
 8006b88:	08006c19 	.word	0x08006c19
 8006b8c:	08006c19 	.word	0x08006c19
 8006b90:	08006c19 	.word	0x08006c19
 8006b94:	08006c19 	.word	0x08006c19
 8006b98:	08006c19 	.word	0x08006c19
 8006b9c:	08006c19 	.word	0x08006c19
 8006ba0:	08006c19 	.word	0x08006c19
 8006ba4:	08006c19 	.word	0x08006c19
 8006ba8:	08006c19 	.word	0x08006c19
 8006bac:	08006c19 	.word	0x08006c19
 8006bb0:	08006c19 	.word	0x08006c19
 8006bb4:	08006c19 	.word	0x08006c19
 8006bb8:	08006c19 	.word	0x08006c19
 8006bbc:	08006c19 	.word	0x08006c19
 8006bc0:	08006c19 	.word	0x08006c19
 8006bc4:	08006c19 	.word	0x08006c19
 8006bc8:	08006c19 	.word	0x08006c19
 8006bcc:	08006c19 	.word	0x08006c19
 8006bd0:	08006c19 	.word	0x08006c19
 8006bd4:	08006c19 	.word	0x08006c19
 8006bd8:	08006be9 	.word	0x08006be9
 8006bdc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bde:	d11b      	bne.n	8006c18 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	225c      	movs	r2, #92	@ 0x5c
 8006be4:	701a      	strb	r2, [r3, #0]
                    break;
 8006be6:	e022      	b.n	8006c2e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2222      	movs	r2, #34	@ 0x22
 8006bec:	701a      	strb	r2, [r3, #0]
                    break;
 8006bee:	e01e      	b.n	8006c2e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2262      	movs	r2, #98	@ 0x62
 8006bf4:	701a      	strb	r2, [r3, #0]
                    break;
 8006bf6:	e01a      	b.n	8006c2e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2266      	movs	r2, #102	@ 0x66
 8006bfc:	701a      	strb	r2, [r3, #0]
                    break;
 8006bfe:	e016      	b.n	8006c2e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	226e      	movs	r2, #110	@ 0x6e
 8006c04:	701a      	strb	r2, [r3, #0]
                    break;
 8006c06:	e012      	b.n	8006c2e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	2272      	movs	r2, #114	@ 0x72
 8006c0c:	701a      	strb	r2, [r3, #0]
                    break;
 8006c0e:	e00e      	b.n	8006c2e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2274      	movs	r2, #116	@ 0x74
 8006c14:	701a      	strb	r2, [r3, #0]
                    break;
 8006c16:	e00a      	b.n	8006c2e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4914      	ldr	r1, [pc, #80]	@ (8006c70 <print_string_ptr+0x25c>)
 8006c20:	69b8      	ldr	r0, [r7, #24]
 8006c22:	f002 f93f 	bl	8008ea4 <siprintf>
                    output_pointer += 4;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	61bb      	str	r3, [r7, #24]
                    break;
 8006c2c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	3301      	adds	r3, #1
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	3301      	adds	r3, #1
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f47f af74 	bne.w	8006b2c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	2222      	movs	r2, #34	@ 0x22
 8006c4e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3302      	adds	r3, #2
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]

    return true;
 8006c5c:	2301      	movs	r3, #1
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	0800bd9c 	.word	0x0800bd9c
 8006c6c:	04000037 	.word	0x04000037
 8006c70:	0800bda0 	.word	0x0800bda0

08006c74 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fec5 	bl	8006a14 <print_string_ptr>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <buffer_skip_whitespace+0x16>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e02c      	b.n	8006d08 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <buffer_skip_whitespace+0x2c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d306      	bcc.n	8006cce <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	e021      	b.n	8006d08 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00d      	beq.n	8006cf0 <buffer_skip_whitespace+0x5c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d207      	bcs.n	8006cf0 <buffer_skip_whitespace+0x5c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d9e9      	bls.n	8006cc4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d104      	bne.n	8006d06 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8006d06:	687b      	ldr	r3, [r7, #4]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <skip_utf8_bom+0x1e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <skip_utf8_bom+0x1e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <skip_utf8_bom+0x22>
    {
        return NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e01c      	b.n	8006d70 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d018      	beq.n	8006d6e <skip_utf8_bom+0x5a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	1d1a      	adds	r2, r3, #4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d211      	bcs.n	8006d6e <skip_utf8_bom+0x5a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4413      	add	r3, r2
 8006d54:	2203      	movs	r2, #3
 8006d56:	4908      	ldr	r1, [pc, #32]	@ (8006d78 <skip_utf8_bom+0x64>)
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f002 f949 	bl	8008ff0 <strncmp>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	1cda      	adds	r2, r3, #3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8006d6e:	687b      	ldr	r3, [r7, #4]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	0800bda8 	.word	0x0800bda8

08006d7c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e00c      	b.n	8006dac <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7f9 fa2e 	bl	80001f4 <strlen>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	6979      	ldr	r1, [r7, #20]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f805 	bl	8006db4 <cJSON_ParseWithLengthOpts>
 8006daa:	4603      	mov	r3, r0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08e      	sub	sp, #56	@ 0x38
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8006dc2:	f107 0318 	add.w	r3, r7, #24
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	605a      	str	r2, [r3, #4]
 8006dcc:	609a      	str	r2, [r3, #8]
 8006dce:	60da      	str	r2, [r3, #12]
 8006dd0:	611a      	str	r2, [r3, #16]
 8006dd2:	615a      	str	r2, [r3, #20]
 8006dd4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8006dda:	4b41      	ldr	r3, [pc, #260]	@ (8006ee0 <cJSON_ParseWithLengthOpts+0x12c>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8006de0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ee0 <cJSON_ParseWithLengthOpts+0x12c>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d042      	beq.n	8006e72 <cJSON_ParseWithLengthOpts+0xbe>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d03f      	beq.n	8006e72 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8006dfe:	4a39      	ldr	r2, [pc, #228]	@ (8006ee4 <cJSON_ParseWithLengthOpts+0x130>)
 8006e00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8006e0a:	4836      	ldr	r0, [pc, #216]	@ (8006ee4 <cJSON_ParseWithLengthOpts+0x130>)
 8006e0c:	f7ff f842 	bl	8005e94 <cJSON_New_Item>
 8006e10:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02e      	beq.n	8006e76 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8006e18:	f107 0318 	add.w	r3, r7, #24
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff ff79 	bl	8006d14 <skip_utf8_bom>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff ff35 	bl	8006c94 <buffer_skip_whitespace>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e30:	f000 f902 	bl	8007038 <parse_value>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d01f      	beq.n	8006e7a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00e      	beq.n	8006e5e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8006e40:	f107 0318 	add.w	r3, r7, #24
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff25 	bl	8006c94 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8006e4a:	6a3a      	ldr	r2, [r7, #32]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d215      	bcs.n	8006e7e <cJSON_ParseWithLengthOpts+0xca>
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	4413      	add	r3, r2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10f      	bne.n	8006e7e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	441a      	add	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	e031      	b.n	8006ed6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8006e72:	bf00      	nop
 8006e74:	e004      	b.n	8006e80 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8006e76:	bf00      	nop
 8006e78:	e002      	b.n	8006e80 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8006e7a:	bf00      	nop
 8006e7c:	e000      	b.n	8006e80 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8006e7e:	bf00      	nop

fail:
    if (item != NULL)
 8006e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8006e86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e88:	f7ff f81a 	bl	8005ec0 <cJSON_Delete>
    }

    if (value != NULL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8006e9a:	6a3a      	ldr	r2, [r7, #32]
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d202      	bcs.n	8006ea8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	e005      	b.n	8006eb4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	441a      	add	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <cJSON_ParseWithLengthOpts+0x12c>)
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f107 0310 	add.w	r3, r7, #16
 8006ecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ed0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3738      	adds	r7, #56	@ 0x38
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20001aa0 	.word	0x20001aa0
 8006ee4:	20000064 	.word	0x20000064

08006ee8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff ff41 	bl	8006d7c <cJSON_ParseWithOpts>
 8006efa:	4603      	mov	r3, r0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	@ 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8006f14:	f107 0310 	add.w	r3, r7, #16
 8006f18:	2224      	movs	r2, #36	@ 0x24
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f002 f850 	bl	8008fc2 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a3b      	ldr	r2, [pc, #236]	@ (8007014 <print+0x110>)
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8006f32:	4b38      	ldr	r3, [pc, #224]	@ (8007014 <print+0x110>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f42:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d042      	beq.n	8006fd4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8006f4e:	f107 0310 	add.w	r3, r7, #16
 8006f52:	4619      	mov	r1, r3
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f95b 	bl	8007210 <print_value>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d03b      	beq.n	8006fd8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8006f60:	f107 0310 	add.w	r3, r7, #16
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff f969 	bl	800623c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	6938      	ldr	r0, [r7, #16]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4798      	blx	r3
 8006f80:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8006f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d029      	beq.n	8006fdc <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e020      	b.n	8006fd0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	3201      	adds	r2, #1
 8006f96:	4610      	mov	r0, r2
 8006f98:	4798      	blx	r3
 8006f9a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01e      	beq.n	8006fe0 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8006fa2:	6939      	ldr	r1, [r7, #16]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	bf28      	it	cs
 8006fae:	4613      	movcs	r3, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006fb4:	f002 f8cf 	bl	8009156 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
        buffer->buffer = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	e01a      	b.n	800700a <print+0x106>
        goto fail;
 8006fd4:	bf00      	nop
 8006fd6:	e004      	b.n	8006fe2 <print+0xde>
        goto fail;
 8006fd8:	bf00      	nop
 8006fda:	e002      	b.n	8006fe2 <print+0xde>
            goto fail;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <print+0xde>
            goto fail;
 8006fe0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4798      	blx	r3
        buffer->buffer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <print+0x104>
    {
        hooks->deallocate(printed);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007002:	4798      	blx	r3
        printed = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3738      	adds	r7, #56	@ 0x38
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	0800bde0 	.word	0x0800bde0

08007018 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8007020:	4a04      	ldr	r2, [pc, #16]	@ (8007034 <cJSON_PrintUnformatted+0x1c>)
 8007022:	2100      	movs	r1, #0
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ff6d 	bl	8006f04 <print>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000064 	.word	0x20000064

08007038 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <parse_value+0x18>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <parse_value+0x1c>
    {
        return false; /* no input */
 8007050:	2300      	movs	r3, #0
 8007052:	e0d2      	b.n	80071fa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d01d      	beq.n	8007096 <parse_value+0x5e>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	1d1a      	adds	r2, r3, #4
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d816      	bhi.n	8007096 <parse_value+0x5e>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4413      	add	r3, r2
 8007072:	2204      	movs	r2, #4
 8007074:	4963      	ldr	r1, [pc, #396]	@ (8007204 <parse_value+0x1cc>)
 8007076:	4618      	mov	r0, r3
 8007078:	f001 ffba 	bl	8008ff0 <strncmp>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2204      	movs	r2, #4
 8007086:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	1d1a      	adds	r2, r3, #4
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	609a      	str	r2, [r3, #8]
        return true;
 8007092:	2301      	movs	r3, #1
 8007094:	e0b1      	b.n	80071fa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01d      	beq.n	80070d8 <parse_value+0xa0>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	1d5a      	adds	r2, r3, #5
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d816      	bhi.n	80070d8 <parse_value+0xa0>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	4413      	add	r3, r2
 80070b4:	2205      	movs	r2, #5
 80070b6:	4954      	ldr	r1, [pc, #336]	@ (8007208 <parse_value+0x1d0>)
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 ff99 	bl	8008ff0 <strncmp>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	1d5a      	adds	r2, r3, #5
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	609a      	str	r2, [r3, #8]
        return true;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e090      	b.n	80071fa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d020      	beq.n	8007120 <parse_value+0xe8>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	1d1a      	adds	r2, r3, #4
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d819      	bhi.n	8007120 <parse_value+0xe8>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	4413      	add	r3, r2
 80070f6:	2204      	movs	r2, #4
 80070f8:	4944      	ldr	r1, [pc, #272]	@ (800720c <parse_value+0x1d4>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 ff78 	bl	8008ff0 <strncmp>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10c      	bne.n	8007120 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2202      	movs	r2, #2
 800710a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	609a      	str	r2, [r3, #8]
        return true;
 800711c:	2301      	movs	r3, #1
 800711e:	e06c      	b.n	80071fa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d013      	beq.n	800714e <parse_value+0x116>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689a      	ldr	r2, [r3, #8]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	429a      	cmp	r2, r3
 8007130:	d20d      	bcs.n	800714e <parse_value+0x116>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	4413      	add	r3, r2
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b22      	cmp	r3, #34	@ 0x22
 8007140:	d105      	bne.n	800714e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fb1d 	bl	8006784 <parse_string>
 800714a:	4603      	mov	r3, r0
 800714c:	e055      	b.n	80071fa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d023      	beq.n	800719c <parse_value+0x164>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d21d      	bcs.n	800719c <parse_value+0x164>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	4413      	add	r3, r2
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	2b2d      	cmp	r3, #45	@ 0x2d
 800716e:	d00f      	beq.n	8007190 <parse_value+0x158>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4413      	add	r3, r2
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b2f      	cmp	r3, #47	@ 0x2f
 800717e:	d90d      	bls.n	800719c <parse_value+0x164>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	4413      	add	r3, r2
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b39      	cmp	r3, #57	@ 0x39
 800718e:	d805      	bhi.n	800719c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fe feec 	bl	8005f70 <parse_number>
 8007198:	4603      	mov	r3, r0
 800719a:	e02e      	b.n	80071fa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d013      	beq.n	80071ca <parse_value+0x192>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d20d      	bcs.n	80071ca <parse_value+0x192>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4413      	add	r3, r2
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80071bc:	d105      	bne.n	80071ca <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f909 	bl	80073d8 <parse_array>
 80071c6:	4603      	mov	r3, r0
 80071c8:	e017      	b.n	80071fa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <parse_value+0x1c0>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d20d      	bcs.n	80071f8 <parse_value+0x1c0>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b7b      	cmp	r3, #123	@ 0x7b
 80071ea:	d105      	bne.n	80071f8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa3c 	bl	800766c <parse_object>
 80071f4:	4603      	mov	r3, r0
 80071f6:	e000      	b.n	80071fa <parse_value+0x1c2>
    }

    return false;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	0800bd7c 	.word	0x0800bd7c
 8007208:	0800bdac 	.word	0x0800bdac
 800720c:	0800bdb4 	.word	0x0800bdb4

08007210 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <print_value+0x1a>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <print_value+0x1e>
    {
        return false;
 800722a:	2300      	movs	r3, #0
 800722c:	e0c9      	b.n	80073c2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b80      	cmp	r3, #128	@ 0x80
 8007236:	f000 808e 	beq.w	8007356 <print_value+0x146>
 800723a:	2b80      	cmp	r3, #128	@ 0x80
 800723c:	f300 80c0 	bgt.w	80073c0 <print_value+0x1b0>
 8007240:	2b20      	cmp	r3, #32
 8007242:	dc49      	bgt.n	80072d8 <print_value+0xc8>
 8007244:	2b00      	cmp	r3, #0
 8007246:	f340 80bb 	ble.w	80073c0 <print_value+0x1b0>
 800724a:	3b01      	subs	r3, #1
 800724c:	2b1f      	cmp	r3, #31
 800724e:	f200 80b7 	bhi.w	80073c0 <print_value+0x1b0>
 8007252:	a201      	add	r2, pc, #4	@ (adr r2, 8007258 <print_value+0x48>)
 8007254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007258:	08007303 	.word	0x08007303
 800725c:	08007327 	.word	0x08007327
 8007260:	080073c1 	.word	0x080073c1
 8007264:	080072df 	.word	0x080072df
 8007268:	080073c1 	.word	0x080073c1
 800726c:	080073c1 	.word	0x080073c1
 8007270:	080073c1 	.word	0x080073c1
 8007274:	0800734b 	.word	0x0800734b
 8007278:	080073c1 	.word	0x080073c1
 800727c:	080073c1 	.word	0x080073c1
 8007280:	080073c1 	.word	0x080073c1
 8007284:	080073c1 	.word	0x080073c1
 8007288:	080073c1 	.word	0x080073c1
 800728c:	080073c1 	.word	0x080073c1
 8007290:	080073c1 	.word	0x080073c1
 8007294:	0800739d 	.word	0x0800739d
 8007298:	080073c1 	.word	0x080073c1
 800729c:	080073c1 	.word	0x080073c1
 80072a0:	080073c1 	.word	0x080073c1
 80072a4:	080073c1 	.word	0x080073c1
 80072a8:	080073c1 	.word	0x080073c1
 80072ac:	080073c1 	.word	0x080073c1
 80072b0:	080073c1 	.word	0x080073c1
 80072b4:	080073c1 	.word	0x080073c1
 80072b8:	080073c1 	.word	0x080073c1
 80072bc:	080073c1 	.word	0x080073c1
 80072c0:	080073c1 	.word	0x080073c1
 80072c4:	080073c1 	.word	0x080073c1
 80072c8:	080073c1 	.word	0x080073c1
 80072cc:	080073c1 	.word	0x080073c1
 80072d0:	080073c1 	.word	0x080073c1
 80072d4:	080073a9 	.word	0x080073a9
 80072d8:	2b40      	cmp	r3, #64	@ 0x40
 80072da:	d06b      	beq.n	80073b4 <print_value+0x1a4>
 80072dc:	e070      	b.n	80073c0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80072de:	2105      	movs	r1, #5
 80072e0:	6838      	ldr	r0, [r7, #0]
 80072e2:	f7fe ff11 	bl	8006108 <ensure>
 80072e6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <print_value+0xe2>
            {
                return false;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e067      	b.n	80073c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a35      	ldr	r2, [pc, #212]	@ (80073cc <print_value+0x1bc>)
 80072f6:	6810      	ldr	r0, [r2, #0]
 80072f8:	6018      	str	r0, [r3, #0]
 80072fa:	7912      	ldrb	r2, [r2, #4]
 80072fc:	711a      	strb	r2, [r3, #4]
            return true;
 80072fe:	2301      	movs	r3, #1
 8007300:	e05f      	b.n	80073c2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8007302:	2106      	movs	r1, #6
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f7fe feff 	bl	8006108 <ensure>
 800730a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <print_value+0x106>
            {
                return false;
 8007312:	2300      	movs	r3, #0
 8007314:	e055      	b.n	80073c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a2d      	ldr	r2, [pc, #180]	@ (80073d0 <print_value+0x1c0>)
 800731a:	6810      	ldr	r0, [r2, #0]
 800731c:	6018      	str	r0, [r3, #0]
 800731e:	8892      	ldrh	r2, [r2, #4]
 8007320:	809a      	strh	r2, [r3, #4]
            return true;
 8007322:	2301      	movs	r3, #1
 8007324:	e04d      	b.n	80073c2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8007326:	2105      	movs	r1, #5
 8007328:	6838      	ldr	r0, [r7, #0]
 800732a:	f7fe feed 	bl	8006108 <ensure>
 800732e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <print_value+0x12a>
            {
                return false;
 8007336:	2300      	movs	r3, #0
 8007338:	e043      	b.n	80073c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a25      	ldr	r2, [pc, #148]	@ (80073d4 <print_value+0x1c4>)
 800733e:	6810      	ldr	r0, [r2, #0]
 8007340:	6018      	str	r0, [r3, #0]
 8007342:	7912      	ldrb	r2, [r2, #4]
 8007344:	711a      	strb	r2, [r3, #4]
            return true;
 8007346:	2301      	movs	r3, #1
 8007348:	e03b      	b.n	80073c2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fe ffdf 	bl	8006310 <print_number>
 8007352:	4603      	mov	r3, r0
 8007354:	e035      	b.n	80073c2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <print_value+0x156>
            {
                return false;
 8007362:	2300      	movs	r3, #0
 8007364:	e02d      	b.n	80073c2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	4618      	mov	r0, r3
 800736c:	f7f8 ff42 	bl	80001f4 <strlen>
 8007370:	4603      	mov	r3, r0
 8007372:	3301      	adds	r3, #1
 8007374:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	6838      	ldr	r0, [r7, #0]
 800737a:	f7fe fec5 	bl	8006108 <ensure>
 800737e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <print_value+0x17a>
            {
                return false;
 8007386:	2300      	movs	r3, #0
 8007388:	e01b      	b.n	80073c2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f001 fedf 	bl	8009156 <memcpy>
            return true;
 8007398:	2301      	movs	r3, #1
 800739a:	e012      	b.n	80073c2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fc68 	bl	8006c74 <print_string>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e00c      	b.n	80073c2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f8d8 	bl	8007560 <print_array>
 80073b0:	4603      	mov	r3, r0
 80073b2:	e006      	b.n	80073c2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa64 	bl	8007884 <print_object>
 80073bc:	4603      	mov	r3, r0
 80073be:	e000      	b.n	80073c2 <print_value+0x1b2>

        default:
            return false;
 80073c0:	2300      	movs	r3, #0
    }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	0800bd7c 	.word	0x0800bd7c
 80073d0:	0800bdac 	.word	0x0800bdac
 80073d4:	0800bdb4 	.word	0x0800bdb4

080073d8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073f2:	d301      	bcc.n	80073f8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80073f4:	2300      	movs	r3, #0
 80073f6:	e0af      	b.n	8007558 <parse_array+0x180>
    }
    input_buffer->depth++;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	4413      	add	r3, r2
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007410:	f040 8094 	bne.w	800753c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800741e:	6838      	ldr	r0, [r7, #0]
 8007420:	f7ff fc38 	bl	8006c94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00d      	beq.n	8007446 <parse_array+0x6e>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	429a      	cmp	r2, r3
 8007434:	d207      	bcs.n	8007446 <parse_array+0x6e>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	4413      	add	r3, r2
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b5d      	cmp	r3, #93	@ 0x5d
 8007444:	d061      	beq.n	800750a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <parse_array+0x80>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	429a      	cmp	r2, r3
 8007456:	d305      	bcc.n	8007464 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	609a      	str	r2, [r3, #8]
        goto fail;
 8007462:	e072      	b.n	800754a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	3310      	adds	r3, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fd0e 	bl	8005e94 <cJSON_New_Item>
 8007478:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d05f      	beq.n	8007540 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	e007      	b.n	80074a0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80074aa:	6838      	ldr	r0, [r7, #0]
 80074ac:	f7ff fbf2 	bl	8006c94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6938      	ldr	r0, [r7, #16]
 80074b4:	f7ff fdc0 	bl	8007038 <parse_value>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d042      	beq.n	8007544 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80074be:	6838      	ldr	r0, [r7, #0]
 80074c0:	f7ff fbe8 	bl	8006c94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00d      	beq.n	80074e6 <parse_array+0x10e>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d207      	bcs.n	80074e6 <parse_array+0x10e>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	4413      	add	r3, r2
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80074e4:	d0c3      	beq.n	800746e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02d      	beq.n	8007548 <parse_array+0x170>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d227      	bcs.n	8007548 <parse_array+0x170>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4413      	add	r3, r2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b5d      	cmp	r3, #93	@ 0x5d
 8007506:	d11f      	bne.n	8007548 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8007508:	e000      	b.n	800750c <parse_array+0x134>
        goto success;
 800750a:	bf00      	nop
    input_buffer->depth--;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	1e5a      	subs	r2, r3, #1
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <parse_array+0x14a>
        head->prev = current_item;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	60da      	str	r2, [r3, #12]
    item->child = head;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	609a      	str	r2, [r3, #8]

    return true;
 8007538:	2301      	movs	r3, #1
 800753a:	e00d      	b.n	8007558 <parse_array+0x180>
        goto fail;
 800753c:	bf00      	nop
 800753e:	e004      	b.n	800754a <parse_array+0x172>
            goto fail; /* allocation failure */
 8007540:	bf00      	nop
 8007542:	e002      	b.n	800754a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8007544:	bf00      	nop
 8007546:	e000      	b.n	800754a <parse_array+0x172>
        goto fail; /* expected end of array */
 8007548:	bf00      	nop

fail:
    if (head != NULL)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8007550:	6978      	ldr	r0, [r7, #20]
 8007552:	f7fe fcb5 	bl	8005ec0 <cJSON_Delete>
    }

    return false;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <print_array+0x22>
    {
        return false;
 800757e:	2300      	movs	r3, #0
 8007580:	e070      	b.n	8007664 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8007582:	2101      	movs	r1, #1
 8007584:	6838      	ldr	r0, [r7, #0]
 8007586:	f7fe fdbf 	bl	8006108 <ensure>
 800758a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <print_array+0x36>
    {
        return false;
 8007592:	2300      	movs	r3, #0
 8007594:	e066      	b.n	8007664 <print_array+0x104>
    }

    *output_pointer = '[';
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	225b      	movs	r2, #91	@ 0x5b
 800759a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80075b0:	e03d      	b.n	800762e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6938      	ldr	r0, [r7, #16]
 80075b6:	f7ff fe2b 	bl	8007210 <print_value>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <print_array+0x64>
        {
            return false;
 80075c0:	2300      	movs	r3, #0
 80075c2:	e04f      	b.n	8007664 <print_array+0x104>
        }
        update_offset(output_buffer);
 80075c4:	6838      	ldr	r0, [r7, #0]
 80075c6:	f7fe fe39 	bl	800623c <update_offset>
        if (current_element->next)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02a      	beq.n	8007628 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <print_array+0x7e>
 80075da:	2302      	movs	r3, #2
 80075dc:	e000      	b.n	80075e0 <print_array+0x80>
 80075de:	2301      	movs	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	6838      	ldr	r0, [r7, #0]
 80075ea:	f7fe fd8d 	bl	8006108 <ensure>
 80075ee:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <print_array+0x9a>
            {
                return false;
 80075f6:	2300      	movs	r3, #0
 80075f8:	e034      	b.n	8007664 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	617a      	str	r2, [r7, #20]
 8007600:	222c      	movs	r2, #44	@ 0x2c
 8007602:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	617a      	str	r2, [r7, #20]
 8007612:	2220      	movs	r2, #32
 8007614:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	441a      	add	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1be      	bne.n	80075b2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8007634:	2102      	movs	r1, #2
 8007636:	6838      	ldr	r0, [r7, #0]
 8007638:	f7fe fd66 	bl	8006108 <ensure>
 800763c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <print_array+0xe8>
    {
        return false;
 8007644:	2300      	movs	r3, #0
 8007646:	e00d      	b.n	8007664 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	617a      	str	r2, [r7, #20]
 800764e:	225d      	movs	r2, #93	@ 0x5d
 8007650:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	1e5a      	subs	r2, r3, #1
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	60da      	str	r2, [r3, #12]

    return true;
 8007662:	2301      	movs	r3, #1
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007686:	d301      	bcc.n	800768c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8007688:	2300      	movs	r3, #0
 800768a:	e0f7      	b.n	800787c <parse_object+0x210>
    }
    input_buffer->depth++;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80db 	beq.w	8007854 <parse_object+0x1e8>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	f080 80d4 	bcs.w	8007854 <parse_object+0x1e8>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b7b      	cmp	r3, #123	@ 0x7b
 80076ba:	f040 80cb 	bne.w	8007854 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80076c8:	6838      	ldr	r0, [r7, #0]
 80076ca:	f7ff fae3 	bl	8006c94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00e      	beq.n	80076f2 <parse_object+0x86>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d208      	bcs.n	80076f2 <parse_object+0x86>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b7d      	cmp	r3, #125	@ 0x7d
 80076ee:	f000 8098 	beq.w	8007822 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <parse_object+0x98>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d305      	bcc.n	8007710 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	1e5a      	subs	r2, r3, #1
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	609a      	str	r2, [r3, #8]
        goto fail;
 800770e:	e0ae      	b.n	800786e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	1e5a      	subs	r2, r3, #1
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	3310      	adds	r3, #16
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fbb8 	bl	8005e94 <cJSON_New_Item>
 8007724:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8095 	beq.w	8007858 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	e007      	b.n	800774e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 8083 	beq.w	800785c <parse_object+0x1f0>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d27b      	bcs.n	800785c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800776e:	6838      	ldr	r0, [r7, #0]
 8007770:	f7ff fa90 	bl	8006c94 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6938      	ldr	r0, [r7, #16]
 8007778:	f7ff f804 	bl	8006784 <parse_string>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d06e      	beq.n	8007860 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8007782:	6838      	ldr	r0, [r7, #0]
 8007784:	f7ff fa86 	bl	8006c94 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	2200      	movs	r2, #0
 8007794:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d063      	beq.n	8007864 <parse_object+0x1f8>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d25d      	bcs.n	8007864 <parse_object+0x1f8>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80077b6:	d155      	bne.n	8007864 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80077c2:	6838      	ldr	r0, [r7, #0]
 80077c4:	f7ff fa66 	bl	8006c94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f7ff fc34 	bl	8007038 <parse_value>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d048      	beq.n	8007868 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80077d6:	6838      	ldr	r0, [r7, #0]
 80077d8:	f7ff fa5c 	bl	8006c94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <parse_object+0x192>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d207      	bcs.n	80077fe <parse_object+0x192>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	4413      	add	r3, r2
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b2c      	cmp	r3, #44	@ 0x2c
 80077fc:	d08d      	beq.n	800771a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d033      	beq.n	800786c <parse_object+0x200>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d22d      	bcs.n	800786c <parse_object+0x200>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4413      	add	r3, r2
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b7d      	cmp	r3, #125	@ 0x7d
 800781e:	d125      	bne.n	800786c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8007820:	e000      	b.n	8007824 <parse_object+0x1b8>
        goto success; /* empty object */
 8007822:	bf00      	nop
    input_buffer->depth--;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <parse_object+0x1ce>
        head->prev = current_item;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2240      	movs	r2, #64	@ 0x40
 800783e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	609a      	str	r2, [r3, #8]
    return true;
 8007850:	2301      	movs	r3, #1
 8007852:	e013      	b.n	800787c <parse_object+0x210>
        goto fail; /* not an object */
 8007854:	bf00      	nop
 8007856:	e00a      	b.n	800786e <parse_object+0x202>
            goto fail; /* allocation failure */
 8007858:	bf00      	nop
 800785a:	e008      	b.n	800786e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 800785c:	bf00      	nop
 800785e:	e006      	b.n	800786e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8007860:	bf00      	nop
 8007862:	e004      	b.n	800786e <parse_object+0x202>
            goto fail; /* invalid object */
 8007864:	bf00      	nop
 8007866:	e002      	b.n	800786e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <parse_object+0x202>
        goto fail; /* expected end of object */
 800786c:	bf00      	nop

fail:
    if (head != NULL)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8007874:	6978      	ldr	r0, [r7, #20]
 8007876:	f7fe fb23 	bl	8005ec0 <cJSON_Delete>
    }

    return false;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <print_object+0x22>
    {
        return false;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e108      	b.n	8007ab8 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <print_object+0x2e>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e000      	b.n	80078b4 <print_object+0x30>
 80078b2:	2301      	movs	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	4619      	mov	r1, r3
 80078bc:	6838      	ldr	r0, [r7, #0]
 80078be:	f7fe fc23 	bl	8006108 <ensure>
 80078c2:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <print_object+0x4a>
    {
        return false;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e0f4      	b.n	8007ab8 <print_object+0x234>
    }

    *output_pointer++ = '{';
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	61fa      	str	r2, [r7, #28]
 80078d4:	227b      	movs	r2, #123	@ 0x7b
 80078d6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	61fa      	str	r2, [r7, #28]
 80078f0:	220a      	movs	r2, #10
 80078f2:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	441a      	add	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	609a      	str	r2, [r3, #8]

    while (current_item)
 8007900:	e0a0      	b.n	8007a44 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d022      	beq.n	8007950 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	4619      	mov	r1, r3
 8007910:	6838      	ldr	r0, [r7, #0]
 8007912:	f7fe fbf9 	bl	8006108 <ensure>
 8007916:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <print_object+0x9e>
            {
                return false;
 800791e:	2300      	movs	r3, #0
 8007920:	e0ca      	b.n	8007ab8 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8007922:	2300      	movs	r3, #0
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	e007      	b.n	8007938 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	61fa      	str	r2, [r7, #28]
 800792e:	2209      	movs	r2, #9
 8007930:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	3301      	adds	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	429a      	cmp	r2, r3
 8007940:	d3f2      	bcc.n	8007928 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	441a      	add	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff f85c 	bl	8006a14 <print_string_ptr>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <print_object+0xe2>
        {
            return false;
 8007962:	2300      	movs	r3, #0
 8007964:	e0a8      	b.n	8007ab8 <print_object+0x234>
        }
        update_offset(output_buffer);
 8007966:	6838      	ldr	r0, [r7, #0]
 8007968:	f7fe fc68 	bl	800623c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <print_object+0xf4>
 8007974:	2302      	movs	r3, #2
 8007976:	e000      	b.n	800797a <print_object+0xf6>
 8007978:	2301      	movs	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800797c:	68f9      	ldr	r1, [r7, #12]
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f7fe fbc2 	bl	8006108 <ensure>
 8007984:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <print_object+0x10c>
        {
            return false;
 800798c:	2300      	movs	r3, #0
 800798e:	e093      	b.n	8007ab8 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	61fa      	str	r2, [r7, #28]
 8007996:	223a      	movs	r2, #58	@ 0x3a
 8007998:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <print_object+0x128>
        {
            *output_pointer++ = '\t';
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	61fa      	str	r2, [r7, #28]
 80079a8:	2209      	movs	r2, #9
 80079aa:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	441a      	add	r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	69b8      	ldr	r0, [r7, #24]
 80079bc:	f7ff fc28 	bl	8007210 <print_value>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <print_object+0x146>
        {
            return false;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e076      	b.n	8007ab8 <print_object+0x234>
        }
        update_offset(output_buffer);
 80079ca:	6838      	ldr	r0, [r7, #0]
 80079cc:	f7fe fc36 	bl	800623c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <print_object+0x158>
 80079d8:	2201      	movs	r2, #1
 80079da:	e000      	b.n	80079de <print_object+0x15a>
 80079dc:	2200      	movs	r2, #0
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <print_object+0x166>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <print_object+0x168>
 80079ea:	2300      	movs	r3, #0
 80079ec:	4413      	add	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4619      	mov	r1, r3
 80079f6:	6838      	ldr	r0, [r7, #0]
 80079f8:	f7fe fb86 	bl	8006108 <ensure>
 80079fc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <print_object+0x184>
        {
            return false;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e057      	b.n	8007ab8 <print_object+0x234>
        }
        if (current_item->next)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <print_object+0x196>
        {
            *output_pointer++ = ',';
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	61fa      	str	r2, [r7, #28]
 8007a16:	222c      	movs	r2, #44	@ 0x2c
 8007a18:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	220a      	movs	r2, #10
 8007a2a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	441a      	add	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f47f af5b 	bne.w	8007902 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <print_object+0x1d8>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e000      	b.n	8007a5e <print_object+0x1da>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6838      	ldr	r0, [r7, #0]
 8007a62:	f7fe fb51 	bl	8006108 <ensure>
 8007a66:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <print_object+0x1ee>
    {
        return false;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e022      	b.n	8007ab8 <print_object+0x234>
    }
    if (output_buffer->format)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d010      	beq.n	8007a9c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e007      	b.n	8007a90 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	61fa      	str	r2, [r7, #28]
 8007a86:	2209      	movs	r2, #9
 8007a88:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d3f1      	bcc.n	8007a80 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	61fa      	str	r2, [r7, #28]
 8007aa2:	227d      	movs	r2, #125	@ 0x7d
 8007aa4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	60da      	str	r2, [r3, #12]

    return true;
 8007ab6:	2301      	movs	r3, #1
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <get_object_item+0x1c>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <get_object_item+0x20>
    {
        return NULL;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e033      	b.n	8007b48 <get_object_item+0x88>
    }

    current_element = object->child;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d017      	beq.n	8007b1c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8007aec:	e002      	b.n	8007af4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01c      	beq.n	8007b34 <get_object_item+0x74>
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d018      	beq.n	8007b34 <get_object_item+0x74>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	4619      	mov	r1, r3
 8007b08:	68b8      	ldr	r0, [r7, #8]
 8007b0a:	f7f8 fb69 	bl	80001e0 <strcmp>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1ec      	bne.n	8007aee <get_object_item+0x2e>
 8007b14:	e00e      	b.n	8007b34 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <get_object_item+0x74>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	4619      	mov	r1, r3
 8007b28:	68b8      	ldr	r0, [r7, #8]
 8007b2a:	f7fe f91f 	bl	8005d6c <case_insensitive_strcmp>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1f0      	bne.n	8007b16 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <get_object_item+0x82>
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <get_object_item+0x86>
        return NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e000      	b.n	8007b48 <get_object_item+0x88>
    }

    return current_element;
 8007b46:	697b      	ldr	r3, [r7, #20]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff ffae 	bl	8007ac0 <get_object_item>
 8007b64:	4603      	mov	r3, r0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	605a      	str	r2, [r3, #4]
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <add_item_to_array+0x22>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <add_item_to_array+0x22>
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d101      	bne.n	8007bb6 <add_item_to_array+0x26>
    {
        return false;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e01e      	b.n	8007bf4 <add_item_to_array+0x64>
    }

    child = array->child;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e00d      	b.n	8007bf2 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff ffc2 	bl	8007b6e <suffix_object>
            array->child->prev = item;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8007bf2:	2301      	movs	r3, #1
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff ffc1 	bl	8007b90 <add_item_to_array>
 8007c0e:	4603      	mov	r3, r0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8007c20:	687b      	ldr	r3, [r7, #4]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b086      	sub	sp, #24
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <add_item_to_object+0x30>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d006      	beq.n	8007c5e <add_item_to_object+0x30>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <add_item_to_object+0x30>
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d101      	bne.n	8007c62 <add_item_to_object+0x34>
    {
        return false;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e036      	b.n	8007cd0 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8007c68:	68b8      	ldr	r0, [r7, #8]
 8007c6a:	f7ff ffd5 	bl	8007c18 <cast_away_const>
 8007c6e:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	e00e      	b.n	8007c9a <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	68b8      	ldr	r0, [r7, #8]
 8007c80:	f7fe f8e0 	bl	8005e44 <cJSON_strdup>
 8007c84:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <add_item_to_object+0x62>
        {
            return false;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e01f      	b.n	8007cd0 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c98:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <add_item_to_object+0x8c>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6a12      	ldr	r2, [r2, #32]
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
    }

    item->string = new_key;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ff61 	bl	8007b90 <add_item_to_array>
 8007cce:	4603      	mov	r3, r0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <cJSON_AddItemToObject+0x28>)
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff ff9d 	bl	8007c2e <add_item_to_object>
 8007cf4:	4603      	mov	r3, r0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000064 	.word	0x20000064

08007d04 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8007d12:	ed97 0b00 	vldr	d0, [r7]
 8007d16:	f000 f83b 	bl	8007d90 <cJSON_CreateNumber>
 8007d1a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4b09      	ldr	r3, [pc, #36]	@ (8007d48 <cJSON_AddNumberToObject+0x44>)
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff ff81 	bl	8007c2e <add_item_to_object>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	e003      	b.n	8007d3e <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8007d36:	6978      	ldr	r0, [r7, #20]
 8007d38:	f7fe f8c2 	bl	8005ec0 <cJSON_Delete>
    return NULL;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000064 	.word	0x20000064

08007d4c <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f861 	bl	8007e20 <cJSON_CreateString>
 8007d5e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8007d60:	2300      	movs	r3, #0
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <cJSON_AddStringToObject+0x40>)
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff ff5f 	bl	8007c2e <add_item_to_object>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	e003      	b.n	8007d82 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7fe f8a0 	bl	8005ec0 <cJSON_Delete>
    return NULL;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000064 	.word	0x20000064

08007d90 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8007d9a:	481f      	ldr	r0, [pc, #124]	@ (8007e18 <cJSON_CreateNumber+0x88>)
 8007d9c:	f7fe f87a 	bl	8005e94 <cJSON_New_Item>
 8007da0:	60f8      	str	r0, [r7, #12]
    if(item)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d02c      	beq.n	8007e02 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2208      	movs	r2, #8
 8007dac:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8007dae:	68f9      	ldr	r1, [r7, #12]
 8007db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8007db8:	a315      	add	r3, pc, #84	@ (adr r3, 8007e10 <cJSON_CreateNumber+0x80>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dc2:	f7f8 feb7 	bl	8000b34 <__aeabi_dcmpge>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007dd2:	615a      	str	r2, [r3, #20]
 8007dd4:	e015      	b.n	8007e02 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8007dd6:	f04f 0200 	mov.w	r2, #0
 8007dda:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <cJSON_CreateNumber+0x8c>)
 8007ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007de0:	f7f8 fe9e 	bl	8000b20 <__aeabi_dcmple>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007df0:	615a      	str	r2, [r3, #20]
 8007df2:	e006      	b.n	8007e02 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8007df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df8:	f7f8 fec6 	bl	8000b88 <__aeabi_d2iz>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8007e02:	68fb      	ldr	r3, [r7, #12]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	f3af 8000 	nop.w
 8007e10:	ffc00000 	.word	0xffc00000
 8007e14:	41dfffff 	.word	0x41dfffff
 8007e18:	20000064 	.word	0x20000064
 8007e1c:	c1e00000 	.word	0xc1e00000

08007e20 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8007e28:	480f      	ldr	r0, [pc, #60]	@ (8007e68 <cJSON_CreateString+0x48>)
 8007e2a:	f7fe f833 	bl	8005e94 <cJSON_New_Item>
 8007e2e:	60f8      	str	r0, [r7, #12]
    if(item)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d012      	beq.n	8007e5c <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8007e3c:	490a      	ldr	r1, [pc, #40]	@ (8007e68 <cJSON_CreateString+0x48>)
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fe f800 	bl	8005e44 <cJSON_strdup>
 8007e44:	4602      	mov	r2, r0
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7fe f834 	bl	8005ec0 <cJSON_Delete>
            return NULL;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e000      	b.n	8007e5e <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000064 	.word	0x20000064

08007e6c <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8007e72:	4807      	ldr	r0, [pc, #28]	@ (8007e90 <cJSON_CreateArray+0x24>)
 8007e74:	f7fe f80e 	bl	8005e94 <cJSON_New_Item>
 8007e78:	6078      	str	r0, [r7, #4]
    if(item)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	60da      	str	r2, [r3, #12]
    }

    return item;
 8007e86:	687b      	ldr	r3, [r7, #4]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000064 	.word	0x20000064

08007e94 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8007e9a:	4807      	ldr	r0, [pc, #28]	@ (8007eb8 <cJSON_CreateObject+0x24>)
 8007e9c:	f7fd fffa 	bl	8005e94 <cJSON_New_Item>
 8007ea0:	6078      	str	r0, [r7, #4]
    if (item)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2240      	movs	r2, #64	@ 0x40
 8007eac:	60da      	str	r2, [r3, #12]
    }

    return item;
 8007eae:	687b      	ldr	r3, [r7, #4]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000064 	.word	0x20000064

08007ebc <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <cJSON_IsTrue+0x12>
    {
        return false;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e007      	b.n	8007ede <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <cJSON_IsString+0x12>
    {
        return false;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e007      	b.n	8007f0c <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b10      	cmp	r3, #16
 8007f04:	bf0c      	ite	eq
 8007f06:	2301      	moveq	r3, #1
 8007f08:	2300      	movne	r3, #0
 8007f0a:	b2db      	uxtb	r3, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <malloc>:
 8007f18:	4b02      	ldr	r3, [pc, #8]	@ (8007f24 <malloc+0xc>)
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f000 b82d 	b.w	8007f7c <_malloc_r>
 8007f22:	bf00      	nop
 8007f24:	200001e8 	.word	0x200001e8

08007f28 <free>:
 8007f28:	4b02      	ldr	r3, [pc, #8]	@ (8007f34 <free+0xc>)
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f001 b92b 	b.w	8009188 <_free_r>
 8007f32:	bf00      	nop
 8007f34:	200001e8 	.word	0x200001e8

08007f38 <sbrk_aligned>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8007f78 <sbrk_aligned+0x40>)
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	6831      	ldr	r1, [r6, #0]
 8007f40:	4605      	mov	r5, r0
 8007f42:	b911      	cbnz	r1, 8007f4a <sbrk_aligned+0x12>
 8007f44:	f001 f8b0 	bl	80090a8 <_sbrk_r>
 8007f48:	6030      	str	r0, [r6, #0]
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f001 f8ab 	bl	80090a8 <_sbrk_r>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d103      	bne.n	8007f5e <sbrk_aligned+0x26>
 8007f56:	f04f 34ff 	mov.w	r4, #4294967295
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d0f8      	beq.n	8007f5a <sbrk_aligned+0x22>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f001 f89c 	bl	80090a8 <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d1f2      	bne.n	8007f5a <sbrk_aligned+0x22>
 8007f74:	e7ef      	b.n	8007f56 <sbrk_aligned+0x1e>
 8007f76:	bf00      	nop
 8007f78:	20001aa8 	.word	0x20001aa8

08007f7c <_malloc_r>:
 8007f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f80:	1ccd      	adds	r5, r1, #3
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	4606      	mov	r6, r0
 8007f92:	db01      	blt.n	8007f98 <_malloc_r+0x1c>
 8007f94:	42a9      	cmp	r1, r5
 8007f96:	d904      	bls.n	8007fa2 <_malloc_r+0x26>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	6033      	str	r3, [r6, #0]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008078 <_malloc_r+0xfc>
 8007fa6:	f000 f869 	bl	800807c <__malloc_lock>
 8007faa:	f8d8 3000 	ldr.w	r3, [r8]
 8007fae:	461c      	mov	r4, r3
 8007fb0:	bb44      	cbnz	r4, 8008004 <_malloc_r+0x88>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff ffbf 	bl	8007f38 <sbrk_aligned>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	d158      	bne.n	8008072 <_malloc_r+0xf6>
 8007fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8007fc4:	4627      	mov	r7, r4
 8007fc6:	2f00      	cmp	r7, #0
 8007fc8:	d143      	bne.n	8008052 <_malloc_r+0xd6>
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d04b      	beq.n	8008066 <_malloc_r+0xea>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	eb04 0903 	add.w	r9, r4, r3
 8007fd8:	f001 f866 	bl	80090a8 <_sbrk_r>
 8007fdc:	4581      	cmp	r9, r0
 8007fde:	d142      	bne.n	8008066 <_malloc_r+0xea>
 8007fe0:	6821      	ldr	r1, [r4, #0]
 8007fe2:	1a6d      	subs	r5, r5, r1
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7ff ffa6 	bl	8007f38 <sbrk_aligned>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d03a      	beq.n	8008066 <_malloc_r+0xea>
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	442b      	add	r3, r5
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	bb62      	cbnz	r2, 8008058 <_malloc_r+0xdc>
 8007ffe:	f8c8 7000 	str.w	r7, [r8]
 8008002:	e00f      	b.n	8008024 <_malloc_r+0xa8>
 8008004:	6822      	ldr	r2, [r4, #0]
 8008006:	1b52      	subs	r2, r2, r5
 8008008:	d420      	bmi.n	800804c <_malloc_r+0xd0>
 800800a:	2a0b      	cmp	r2, #11
 800800c:	d917      	bls.n	800803e <_malloc_r+0xc2>
 800800e:	1961      	adds	r1, r4, r5
 8008010:	42a3      	cmp	r3, r4
 8008012:	6025      	str	r5, [r4, #0]
 8008014:	bf18      	it	ne
 8008016:	6059      	strne	r1, [r3, #4]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	bf08      	it	eq
 800801c:	f8c8 1000 	streq.w	r1, [r8]
 8008020:	5162      	str	r2, [r4, r5]
 8008022:	604b      	str	r3, [r1, #4]
 8008024:	4630      	mov	r0, r6
 8008026:	f000 f82f 	bl	8008088 <__malloc_unlock>
 800802a:	f104 000b 	add.w	r0, r4, #11
 800802e:	1d23      	adds	r3, r4, #4
 8008030:	f020 0007 	bic.w	r0, r0, #7
 8008034:	1ac2      	subs	r2, r0, r3
 8008036:	bf1c      	itt	ne
 8008038:	1a1b      	subne	r3, r3, r0
 800803a:	50a3      	strne	r3, [r4, r2]
 800803c:	e7af      	b.n	8007f9e <_malloc_r+0x22>
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	bf0c      	ite	eq
 8008044:	f8c8 2000 	streq.w	r2, [r8]
 8008048:	605a      	strne	r2, [r3, #4]
 800804a:	e7eb      	b.n	8008024 <_malloc_r+0xa8>
 800804c:	4623      	mov	r3, r4
 800804e:	6864      	ldr	r4, [r4, #4]
 8008050:	e7ae      	b.n	8007fb0 <_malloc_r+0x34>
 8008052:	463c      	mov	r4, r7
 8008054:	687f      	ldr	r7, [r7, #4]
 8008056:	e7b6      	b.n	8007fc6 <_malloc_r+0x4a>
 8008058:	461a      	mov	r2, r3
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	42a3      	cmp	r3, r4
 800805e:	d1fb      	bne.n	8008058 <_malloc_r+0xdc>
 8008060:	2300      	movs	r3, #0
 8008062:	6053      	str	r3, [r2, #4]
 8008064:	e7de      	b.n	8008024 <_malloc_r+0xa8>
 8008066:	230c      	movs	r3, #12
 8008068:	6033      	str	r3, [r6, #0]
 800806a:	4630      	mov	r0, r6
 800806c:	f000 f80c 	bl	8008088 <__malloc_unlock>
 8008070:	e794      	b.n	8007f9c <_malloc_r+0x20>
 8008072:	6005      	str	r5, [r0, #0]
 8008074:	e7d6      	b.n	8008024 <_malloc_r+0xa8>
 8008076:	bf00      	nop
 8008078:	20001aac 	.word	0x20001aac

0800807c <__malloc_lock>:
 800807c:	4801      	ldr	r0, [pc, #4]	@ (8008084 <__malloc_lock+0x8>)
 800807e:	f001 b860 	b.w	8009142 <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	20001bf0 	.word	0x20001bf0

08008088 <__malloc_unlock>:
 8008088:	4801      	ldr	r0, [pc, #4]	@ (8008090 <__malloc_unlock+0x8>)
 800808a:	f001 b85b 	b.w	8009144 <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	20001bf0 	.word	0x20001bf0

08008094 <realloc>:
 8008094:	4b02      	ldr	r3, [pc, #8]	@ (80080a0 <realloc+0xc>)
 8008096:	460a      	mov	r2, r1
 8008098:	4601      	mov	r1, r0
 800809a:	6818      	ldr	r0, [r3, #0]
 800809c:	f000 b802 	b.w	80080a4 <_realloc_r>
 80080a0:	200001e8 	.word	0x200001e8

080080a4 <_realloc_r>:
 80080a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a8:	4680      	mov	r8, r0
 80080aa:	4615      	mov	r5, r2
 80080ac:	460c      	mov	r4, r1
 80080ae:	b921      	cbnz	r1, 80080ba <_realloc_r+0x16>
 80080b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b4:	4611      	mov	r1, r2
 80080b6:	f7ff bf61 	b.w	8007f7c <_malloc_r>
 80080ba:	b92a      	cbnz	r2, 80080c8 <_realloc_r+0x24>
 80080bc:	f001 f864 	bl	8009188 <_free_r>
 80080c0:	2400      	movs	r4, #0
 80080c2:	4620      	mov	r0, r4
 80080c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c8:	f002 f8a6 	bl	800a218 <_malloc_usable_size_r>
 80080cc:	4285      	cmp	r5, r0
 80080ce:	4606      	mov	r6, r0
 80080d0:	d802      	bhi.n	80080d8 <_realloc_r+0x34>
 80080d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080d6:	d8f4      	bhi.n	80080c2 <_realloc_r+0x1e>
 80080d8:	4629      	mov	r1, r5
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff ff4e 	bl	8007f7c <_malloc_r>
 80080e0:	4607      	mov	r7, r0
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d0ec      	beq.n	80080c0 <_realloc_r+0x1c>
 80080e6:	42b5      	cmp	r5, r6
 80080e8:	462a      	mov	r2, r5
 80080ea:	4621      	mov	r1, r4
 80080ec:	bf28      	it	cs
 80080ee:	4632      	movcs	r2, r6
 80080f0:	f001 f831 	bl	8009156 <memcpy>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4640      	mov	r0, r8
 80080f8:	f001 f846 	bl	8009188 <_free_r>
 80080fc:	463c      	mov	r4, r7
 80080fe:	e7e0      	b.n	80080c2 <_realloc_r+0x1e>

08008100 <sulp>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1
 8008106:	ec45 4b10 	vmov	d0, r4, r5
 800810a:	4616      	mov	r6, r2
 800810c:	f001 ff46 	bl	8009f9c <__ulp>
 8008110:	ec51 0b10 	vmov	r0, r1, d0
 8008114:	b17e      	cbz	r6, 8008136 <sulp+0x36>
 8008116:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800811a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800811e:	2b00      	cmp	r3, #0
 8008120:	dd09      	ble.n	8008136 <sulp+0x36>
 8008122:	051b      	lsls	r3, r3, #20
 8008124:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008128:	2400      	movs	r4, #0
 800812a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	f7f8 fa79 	bl	8000628 <__aeabi_dmul>
 8008136:	ec41 0b10 	vmov	d0, r0, r1
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	0000      	movs	r0, r0
	...

08008140 <_strtod_l>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	b09f      	sub	sp, #124	@ 0x7c
 8008146:	460c      	mov	r4, r1
 8008148:	9217      	str	r2, [sp, #92]	@ 0x5c
 800814a:	2200      	movs	r2, #0
 800814c:	921a      	str	r2, [sp, #104]	@ 0x68
 800814e:	9005      	str	r0, [sp, #20]
 8008150:	f04f 0a00 	mov.w	sl, #0
 8008154:	f04f 0b00 	mov.w	fp, #0
 8008158:	460a      	mov	r2, r1
 800815a:	9219      	str	r2, [sp, #100]	@ 0x64
 800815c:	7811      	ldrb	r1, [r2, #0]
 800815e:	292b      	cmp	r1, #43	@ 0x2b
 8008160:	d04a      	beq.n	80081f8 <_strtod_l+0xb8>
 8008162:	d838      	bhi.n	80081d6 <_strtod_l+0x96>
 8008164:	290d      	cmp	r1, #13
 8008166:	d832      	bhi.n	80081ce <_strtod_l+0x8e>
 8008168:	2908      	cmp	r1, #8
 800816a:	d832      	bhi.n	80081d2 <_strtod_l+0x92>
 800816c:	2900      	cmp	r1, #0
 800816e:	d03b      	beq.n	80081e8 <_strtod_l+0xa8>
 8008170:	2200      	movs	r2, #0
 8008172:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008174:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008176:	782a      	ldrb	r2, [r5, #0]
 8008178:	2a30      	cmp	r2, #48	@ 0x30
 800817a:	f040 80b3 	bne.w	80082e4 <_strtod_l+0x1a4>
 800817e:	786a      	ldrb	r2, [r5, #1]
 8008180:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008184:	2a58      	cmp	r2, #88	@ 0x58
 8008186:	d16e      	bne.n	8008266 <_strtod_l+0x126>
 8008188:	9302      	str	r3, [sp, #8]
 800818a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4a8e      	ldr	r2, [pc, #568]	@ (80083cc <_strtod_l+0x28c>)
 8008194:	9805      	ldr	r0, [sp, #20]
 8008196:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008198:	a919      	add	r1, sp, #100	@ 0x64
 800819a:	f001 f8a7 	bl	80092ec <__gethex>
 800819e:	f010 060f 	ands.w	r6, r0, #15
 80081a2:	4604      	mov	r4, r0
 80081a4:	d005      	beq.n	80081b2 <_strtod_l+0x72>
 80081a6:	2e06      	cmp	r6, #6
 80081a8:	d128      	bne.n	80081fc <_strtod_l+0xbc>
 80081aa:	3501      	adds	r5, #1
 80081ac:	2300      	movs	r3, #0
 80081ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80081b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 858e 	bne.w	8008cd6 <_strtod_l+0xb96>
 80081ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081bc:	b1cb      	cbz	r3, 80081f2 <_strtod_l+0xb2>
 80081be:	4652      	mov	r2, sl
 80081c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80081c4:	ec43 2b10 	vmov	d0, r2, r3
 80081c8:	b01f      	add	sp, #124	@ 0x7c
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ce:	2920      	cmp	r1, #32
 80081d0:	d1ce      	bne.n	8008170 <_strtod_l+0x30>
 80081d2:	3201      	adds	r2, #1
 80081d4:	e7c1      	b.n	800815a <_strtod_l+0x1a>
 80081d6:	292d      	cmp	r1, #45	@ 0x2d
 80081d8:	d1ca      	bne.n	8008170 <_strtod_l+0x30>
 80081da:	2101      	movs	r1, #1
 80081dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081de:	1c51      	adds	r1, r2, #1
 80081e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80081e2:	7852      	ldrb	r2, [r2, #1]
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	d1c5      	bne.n	8008174 <_strtod_l+0x34>
 80081e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 8570 	bne.w	8008cd2 <_strtod_l+0xb92>
 80081f2:	4652      	mov	r2, sl
 80081f4:	465b      	mov	r3, fp
 80081f6:	e7e5      	b.n	80081c4 <_strtod_l+0x84>
 80081f8:	2100      	movs	r1, #0
 80081fa:	e7ef      	b.n	80081dc <_strtod_l+0x9c>
 80081fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081fe:	b13a      	cbz	r2, 8008210 <_strtod_l+0xd0>
 8008200:	2135      	movs	r1, #53	@ 0x35
 8008202:	a81c      	add	r0, sp, #112	@ 0x70
 8008204:	f001 ffc4 	bl	800a190 <__copybits>
 8008208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800820a:	9805      	ldr	r0, [sp, #20]
 800820c:	f001 fb92 	bl	8009934 <_Bfree>
 8008210:	3e01      	subs	r6, #1
 8008212:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008214:	2e04      	cmp	r6, #4
 8008216:	d806      	bhi.n	8008226 <_strtod_l+0xe6>
 8008218:	e8df f006 	tbb	[pc, r6]
 800821c:	201d0314 	.word	0x201d0314
 8008220:	14          	.byte	0x14
 8008221:	00          	.byte	0x00
 8008222:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008226:	05e1      	lsls	r1, r4, #23
 8008228:	bf48      	it	mi
 800822a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800822e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008232:	0d1b      	lsrs	r3, r3, #20
 8008234:	051b      	lsls	r3, r3, #20
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1bb      	bne.n	80081b2 <_strtod_l+0x72>
 800823a:	f000 ff57 	bl	80090ec <__errno>
 800823e:	2322      	movs	r3, #34	@ 0x22
 8008240:	6003      	str	r3, [r0, #0]
 8008242:	e7b6      	b.n	80081b2 <_strtod_l+0x72>
 8008244:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800824c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008254:	e7e7      	b.n	8008226 <_strtod_l+0xe6>
 8008256:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80083d4 <_strtod_l+0x294>
 800825a:	e7e4      	b.n	8008226 <_strtod_l+0xe6>
 800825c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008260:	f04f 3aff 	mov.w	sl, #4294967295
 8008264:	e7df      	b.n	8008226 <_strtod_l+0xe6>
 8008266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	9219      	str	r2, [sp, #100]	@ 0x64
 800826c:	785b      	ldrb	r3, [r3, #1]
 800826e:	2b30      	cmp	r3, #48	@ 0x30
 8008270:	d0f9      	beq.n	8008266 <_strtod_l+0x126>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d09d      	beq.n	80081b2 <_strtod_l+0x72>
 8008276:	2301      	movs	r3, #1
 8008278:	9309      	str	r3, [sp, #36]	@ 0x24
 800827a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800827c:	930c      	str	r3, [sp, #48]	@ 0x30
 800827e:	2300      	movs	r3, #0
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	930a      	str	r3, [sp, #40]	@ 0x28
 8008284:	461f      	mov	r7, r3
 8008286:	220a      	movs	r2, #10
 8008288:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800828a:	7805      	ldrb	r5, [r0, #0]
 800828c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008290:	b2d9      	uxtb	r1, r3
 8008292:	2909      	cmp	r1, #9
 8008294:	d928      	bls.n	80082e8 <_strtod_l+0x1a8>
 8008296:	494e      	ldr	r1, [pc, #312]	@ (80083d0 <_strtod_l+0x290>)
 8008298:	2201      	movs	r2, #1
 800829a:	f000 fea9 	bl	8008ff0 <strncmp>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d032      	beq.n	8008308 <_strtod_l+0x1c8>
 80082a2:	2000      	movs	r0, #0
 80082a4:	462a      	mov	r2, r5
 80082a6:	4681      	mov	r9, r0
 80082a8:	463d      	mov	r5, r7
 80082aa:	4603      	mov	r3, r0
 80082ac:	2a65      	cmp	r2, #101	@ 0x65
 80082ae:	d001      	beq.n	80082b4 <_strtod_l+0x174>
 80082b0:	2a45      	cmp	r2, #69	@ 0x45
 80082b2:	d114      	bne.n	80082de <_strtod_l+0x19e>
 80082b4:	b91d      	cbnz	r5, 80082be <_strtod_l+0x17e>
 80082b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082b8:	4302      	orrs	r2, r0
 80082ba:	d095      	beq.n	80081e8 <_strtod_l+0xa8>
 80082bc:	2500      	movs	r5, #0
 80082be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80082c0:	1c62      	adds	r2, r4, #1
 80082c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082c4:	7862      	ldrb	r2, [r4, #1]
 80082c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80082c8:	d077      	beq.n	80083ba <_strtod_l+0x27a>
 80082ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80082cc:	d07b      	beq.n	80083c6 <_strtod_l+0x286>
 80082ce:	f04f 0c00 	mov.w	ip, #0
 80082d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082d6:	2909      	cmp	r1, #9
 80082d8:	f240 8082 	bls.w	80083e0 <_strtod_l+0x2a0>
 80082dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	e0a2      	b.n	800842a <_strtod_l+0x2ea>
 80082e4:	2300      	movs	r3, #0
 80082e6:	e7c7      	b.n	8008278 <_strtod_l+0x138>
 80082e8:	2f08      	cmp	r7, #8
 80082ea:	bfd5      	itete	le
 80082ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80082ee:	9908      	ldrgt	r1, [sp, #32]
 80082f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80082f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80082f8:	f100 0001 	add.w	r0, r0, #1
 80082fc:	bfd4      	ite	le
 80082fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008300:	9308      	strgt	r3, [sp, #32]
 8008302:	3701      	adds	r7, #1
 8008304:	9019      	str	r0, [sp, #100]	@ 0x64
 8008306:	e7bf      	b.n	8008288 <_strtod_l+0x148>
 8008308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	9219      	str	r2, [sp, #100]	@ 0x64
 800830e:	785a      	ldrb	r2, [r3, #1]
 8008310:	b37f      	cbz	r7, 8008372 <_strtod_l+0x232>
 8008312:	4681      	mov	r9, r0
 8008314:	463d      	mov	r5, r7
 8008316:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800831a:	2b09      	cmp	r3, #9
 800831c:	d912      	bls.n	8008344 <_strtod_l+0x204>
 800831e:	2301      	movs	r3, #1
 8008320:	e7c4      	b.n	80082ac <_strtod_l+0x16c>
 8008322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	9219      	str	r2, [sp, #100]	@ 0x64
 8008328:	785a      	ldrb	r2, [r3, #1]
 800832a:	3001      	adds	r0, #1
 800832c:	2a30      	cmp	r2, #48	@ 0x30
 800832e:	d0f8      	beq.n	8008322 <_strtod_l+0x1e2>
 8008330:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008334:	2b08      	cmp	r3, #8
 8008336:	f200 84d3 	bhi.w	8008ce0 <_strtod_l+0xba0>
 800833a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800833c:	930c      	str	r3, [sp, #48]	@ 0x30
 800833e:	4681      	mov	r9, r0
 8008340:	2000      	movs	r0, #0
 8008342:	4605      	mov	r5, r0
 8008344:	3a30      	subs	r2, #48	@ 0x30
 8008346:	f100 0301 	add.w	r3, r0, #1
 800834a:	d02a      	beq.n	80083a2 <_strtod_l+0x262>
 800834c:	4499      	add	r9, r3
 800834e:	eb00 0c05 	add.w	ip, r0, r5
 8008352:	462b      	mov	r3, r5
 8008354:	210a      	movs	r1, #10
 8008356:	4563      	cmp	r3, ip
 8008358:	d10d      	bne.n	8008376 <_strtod_l+0x236>
 800835a:	1c69      	adds	r1, r5, #1
 800835c:	4401      	add	r1, r0
 800835e:	4428      	add	r0, r5
 8008360:	2808      	cmp	r0, #8
 8008362:	dc16      	bgt.n	8008392 <_strtod_l+0x252>
 8008364:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008366:	230a      	movs	r3, #10
 8008368:	fb03 2300 	mla	r3, r3, r0, r2
 800836c:	930a      	str	r3, [sp, #40]	@ 0x28
 800836e:	2300      	movs	r3, #0
 8008370:	e018      	b.n	80083a4 <_strtod_l+0x264>
 8008372:	4638      	mov	r0, r7
 8008374:	e7da      	b.n	800832c <_strtod_l+0x1ec>
 8008376:	2b08      	cmp	r3, #8
 8008378:	f103 0301 	add.w	r3, r3, #1
 800837c:	dc03      	bgt.n	8008386 <_strtod_l+0x246>
 800837e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008380:	434e      	muls	r6, r1
 8008382:	960a      	str	r6, [sp, #40]	@ 0x28
 8008384:	e7e7      	b.n	8008356 <_strtod_l+0x216>
 8008386:	2b10      	cmp	r3, #16
 8008388:	bfde      	ittt	le
 800838a:	9e08      	ldrle	r6, [sp, #32]
 800838c:	434e      	mulle	r6, r1
 800838e:	9608      	strle	r6, [sp, #32]
 8008390:	e7e1      	b.n	8008356 <_strtod_l+0x216>
 8008392:	280f      	cmp	r0, #15
 8008394:	dceb      	bgt.n	800836e <_strtod_l+0x22e>
 8008396:	9808      	ldr	r0, [sp, #32]
 8008398:	230a      	movs	r3, #10
 800839a:	fb03 2300 	mla	r3, r3, r0, r2
 800839e:	9308      	str	r3, [sp, #32]
 80083a0:	e7e5      	b.n	800836e <_strtod_l+0x22e>
 80083a2:	4629      	mov	r1, r5
 80083a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083a6:	1c50      	adds	r0, r2, #1
 80083a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80083aa:	7852      	ldrb	r2, [r2, #1]
 80083ac:	4618      	mov	r0, r3
 80083ae:	460d      	mov	r5, r1
 80083b0:	e7b1      	b.n	8008316 <_strtod_l+0x1d6>
 80083b2:	f04f 0900 	mov.w	r9, #0
 80083b6:	2301      	movs	r3, #1
 80083b8:	e77d      	b.n	80082b6 <_strtod_l+0x176>
 80083ba:	f04f 0c00 	mov.w	ip, #0
 80083be:	1ca2      	adds	r2, r4, #2
 80083c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80083c2:	78a2      	ldrb	r2, [r4, #2]
 80083c4:	e785      	b.n	80082d2 <_strtod_l+0x192>
 80083c6:	f04f 0c01 	mov.w	ip, #1
 80083ca:	e7f8      	b.n	80083be <_strtod_l+0x27e>
 80083cc:	0800be08 	.word	0x0800be08
 80083d0:	0800bde4 	.word	0x0800bde4
 80083d4:	7ff00000 	.word	0x7ff00000
 80083d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083da:	1c51      	adds	r1, r2, #1
 80083dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80083de:	7852      	ldrb	r2, [r2, #1]
 80083e0:	2a30      	cmp	r2, #48	@ 0x30
 80083e2:	d0f9      	beq.n	80083d8 <_strtod_l+0x298>
 80083e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083e8:	2908      	cmp	r1, #8
 80083ea:	f63f af78 	bhi.w	80082de <_strtod_l+0x19e>
 80083ee:	3a30      	subs	r2, #48	@ 0x30
 80083f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083f6:	f04f 080a 	mov.w	r8, #10
 80083fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083fc:	1c56      	adds	r6, r2, #1
 80083fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8008400:	7852      	ldrb	r2, [r2, #1]
 8008402:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008406:	f1be 0f09 	cmp.w	lr, #9
 800840a:	d939      	bls.n	8008480 <_strtod_l+0x340>
 800840c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800840e:	1a76      	subs	r6, r6, r1
 8008410:	2e08      	cmp	r6, #8
 8008412:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008416:	dc03      	bgt.n	8008420 <_strtod_l+0x2e0>
 8008418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800841a:	4588      	cmp	r8, r1
 800841c:	bfa8      	it	ge
 800841e:	4688      	movge	r8, r1
 8008420:	f1bc 0f00 	cmp.w	ip, #0
 8008424:	d001      	beq.n	800842a <_strtod_l+0x2ea>
 8008426:	f1c8 0800 	rsb	r8, r8, #0
 800842a:	2d00      	cmp	r5, #0
 800842c:	d14e      	bne.n	80084cc <_strtod_l+0x38c>
 800842e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008430:	4308      	orrs	r0, r1
 8008432:	f47f aebe 	bne.w	80081b2 <_strtod_l+0x72>
 8008436:	2b00      	cmp	r3, #0
 8008438:	f47f aed6 	bne.w	80081e8 <_strtod_l+0xa8>
 800843c:	2a69      	cmp	r2, #105	@ 0x69
 800843e:	d028      	beq.n	8008492 <_strtod_l+0x352>
 8008440:	dc25      	bgt.n	800848e <_strtod_l+0x34e>
 8008442:	2a49      	cmp	r2, #73	@ 0x49
 8008444:	d025      	beq.n	8008492 <_strtod_l+0x352>
 8008446:	2a4e      	cmp	r2, #78	@ 0x4e
 8008448:	f47f aece 	bne.w	80081e8 <_strtod_l+0xa8>
 800844c:	499b      	ldr	r1, [pc, #620]	@ (80086bc <_strtod_l+0x57c>)
 800844e:	a819      	add	r0, sp, #100	@ 0x64
 8008450:	f001 f96e 	bl	8009730 <__match>
 8008454:	2800      	cmp	r0, #0
 8008456:	f43f aec7 	beq.w	80081e8 <_strtod_l+0xa8>
 800845a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b28      	cmp	r3, #40	@ 0x28
 8008460:	d12e      	bne.n	80084c0 <_strtod_l+0x380>
 8008462:	4997      	ldr	r1, [pc, #604]	@ (80086c0 <_strtod_l+0x580>)
 8008464:	aa1c      	add	r2, sp, #112	@ 0x70
 8008466:	a819      	add	r0, sp, #100	@ 0x64
 8008468:	f001 f976 	bl	8009758 <__hexnan>
 800846c:	2805      	cmp	r0, #5
 800846e:	d127      	bne.n	80084c0 <_strtod_l+0x380>
 8008470:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008472:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008476:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800847a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800847e:	e698      	b.n	80081b2 <_strtod_l+0x72>
 8008480:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008482:	fb08 2101 	mla	r1, r8, r1, r2
 8008486:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800848a:	920e      	str	r2, [sp, #56]	@ 0x38
 800848c:	e7b5      	b.n	80083fa <_strtod_l+0x2ba>
 800848e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008490:	e7da      	b.n	8008448 <_strtod_l+0x308>
 8008492:	498c      	ldr	r1, [pc, #560]	@ (80086c4 <_strtod_l+0x584>)
 8008494:	a819      	add	r0, sp, #100	@ 0x64
 8008496:	f001 f94b 	bl	8009730 <__match>
 800849a:	2800      	cmp	r0, #0
 800849c:	f43f aea4 	beq.w	80081e8 <_strtod_l+0xa8>
 80084a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084a2:	4989      	ldr	r1, [pc, #548]	@ (80086c8 <_strtod_l+0x588>)
 80084a4:	3b01      	subs	r3, #1
 80084a6:	a819      	add	r0, sp, #100	@ 0x64
 80084a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80084aa:	f001 f941 	bl	8009730 <__match>
 80084ae:	b910      	cbnz	r0, 80084b6 <_strtod_l+0x376>
 80084b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084b2:	3301      	adds	r3, #1
 80084b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80084b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80086d8 <_strtod_l+0x598>
 80084ba:	f04f 0a00 	mov.w	sl, #0
 80084be:	e678      	b.n	80081b2 <_strtod_l+0x72>
 80084c0:	4882      	ldr	r0, [pc, #520]	@ (80086cc <_strtod_l+0x58c>)
 80084c2:	f000 fe59 	bl	8009178 <nan>
 80084c6:	ec5b ab10 	vmov	sl, fp, d0
 80084ca:	e672      	b.n	80081b2 <_strtod_l+0x72>
 80084cc:	eba8 0309 	sub.w	r3, r8, r9
 80084d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084d4:	2f00      	cmp	r7, #0
 80084d6:	bf08      	it	eq
 80084d8:	462f      	moveq	r7, r5
 80084da:	2d10      	cmp	r5, #16
 80084dc:	462c      	mov	r4, r5
 80084de:	bfa8      	it	ge
 80084e0:	2410      	movge	r4, #16
 80084e2:	f7f8 f827 	bl	8000534 <__aeabi_ui2d>
 80084e6:	2d09      	cmp	r5, #9
 80084e8:	4682      	mov	sl, r0
 80084ea:	468b      	mov	fp, r1
 80084ec:	dc13      	bgt.n	8008516 <_strtod_l+0x3d6>
 80084ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f43f ae5e 	beq.w	80081b2 <_strtod_l+0x72>
 80084f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f8:	dd78      	ble.n	80085ec <_strtod_l+0x4ac>
 80084fa:	2b16      	cmp	r3, #22
 80084fc:	dc5f      	bgt.n	80085be <_strtod_l+0x47e>
 80084fe:	4974      	ldr	r1, [pc, #464]	@ (80086d0 <_strtod_l+0x590>)
 8008500:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008508:	4652      	mov	r2, sl
 800850a:	465b      	mov	r3, fp
 800850c:	f7f8 f88c 	bl	8000628 <__aeabi_dmul>
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	e64d      	b.n	80081b2 <_strtod_l+0x72>
 8008516:	4b6e      	ldr	r3, [pc, #440]	@ (80086d0 <_strtod_l+0x590>)
 8008518:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800851c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008520:	f7f8 f882 	bl	8000628 <__aeabi_dmul>
 8008524:	4682      	mov	sl, r0
 8008526:	9808      	ldr	r0, [sp, #32]
 8008528:	468b      	mov	fp, r1
 800852a:	f7f8 f803 	bl	8000534 <__aeabi_ui2d>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4650      	mov	r0, sl
 8008534:	4659      	mov	r1, fp
 8008536:	f7f7 fec1 	bl	80002bc <__adddf3>
 800853a:	2d0f      	cmp	r5, #15
 800853c:	4682      	mov	sl, r0
 800853e:	468b      	mov	fp, r1
 8008540:	ddd5      	ble.n	80084ee <_strtod_l+0x3ae>
 8008542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008544:	1b2c      	subs	r4, r5, r4
 8008546:	441c      	add	r4, r3
 8008548:	2c00      	cmp	r4, #0
 800854a:	f340 8096 	ble.w	800867a <_strtod_l+0x53a>
 800854e:	f014 030f 	ands.w	r3, r4, #15
 8008552:	d00a      	beq.n	800856a <_strtod_l+0x42a>
 8008554:	495e      	ldr	r1, [pc, #376]	@ (80086d0 <_strtod_l+0x590>)
 8008556:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008562:	f7f8 f861 	bl	8000628 <__aeabi_dmul>
 8008566:	4682      	mov	sl, r0
 8008568:	468b      	mov	fp, r1
 800856a:	f034 040f 	bics.w	r4, r4, #15
 800856e:	d073      	beq.n	8008658 <_strtod_l+0x518>
 8008570:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008574:	dd48      	ble.n	8008608 <_strtod_l+0x4c8>
 8008576:	2400      	movs	r4, #0
 8008578:	46a0      	mov	r8, r4
 800857a:	940a      	str	r4, [sp, #40]	@ 0x28
 800857c:	46a1      	mov	r9, r4
 800857e:	9a05      	ldr	r2, [sp, #20]
 8008580:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80086d8 <_strtod_l+0x598>
 8008584:	2322      	movs	r3, #34	@ 0x22
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	f04f 0a00 	mov.w	sl, #0
 800858c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800858e:	2b00      	cmp	r3, #0
 8008590:	f43f ae0f 	beq.w	80081b2 <_strtod_l+0x72>
 8008594:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008596:	9805      	ldr	r0, [sp, #20]
 8008598:	f001 f9cc 	bl	8009934 <_Bfree>
 800859c:	9805      	ldr	r0, [sp, #20]
 800859e:	4649      	mov	r1, r9
 80085a0:	f001 f9c8 	bl	8009934 <_Bfree>
 80085a4:	9805      	ldr	r0, [sp, #20]
 80085a6:	4641      	mov	r1, r8
 80085a8:	f001 f9c4 	bl	8009934 <_Bfree>
 80085ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085ae:	9805      	ldr	r0, [sp, #20]
 80085b0:	f001 f9c0 	bl	8009934 <_Bfree>
 80085b4:	9805      	ldr	r0, [sp, #20]
 80085b6:	4621      	mov	r1, r4
 80085b8:	f001 f9bc 	bl	8009934 <_Bfree>
 80085bc:	e5f9      	b.n	80081b2 <_strtod_l+0x72>
 80085be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085c4:	4293      	cmp	r3, r2
 80085c6:	dbbc      	blt.n	8008542 <_strtod_l+0x402>
 80085c8:	4c41      	ldr	r4, [pc, #260]	@ (80086d0 <_strtod_l+0x590>)
 80085ca:	f1c5 050f 	rsb	r5, r5, #15
 80085ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085d2:	4652      	mov	r2, sl
 80085d4:	465b      	mov	r3, fp
 80085d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085da:	f7f8 f825 	bl	8000628 <__aeabi_dmul>
 80085de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e0:	1b5d      	subs	r5, r3, r5
 80085e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085ea:	e78f      	b.n	800850c <_strtod_l+0x3cc>
 80085ec:	3316      	adds	r3, #22
 80085ee:	dba8      	blt.n	8008542 <_strtod_l+0x402>
 80085f0:	4b37      	ldr	r3, [pc, #220]	@ (80086d0 <_strtod_l+0x590>)
 80085f2:	eba9 0808 	sub.w	r8, r9, r8
 80085f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085fe:	4650      	mov	r0, sl
 8008600:	4659      	mov	r1, fp
 8008602:	f7f8 f93b 	bl	800087c <__aeabi_ddiv>
 8008606:	e783      	b.n	8008510 <_strtod_l+0x3d0>
 8008608:	4b32      	ldr	r3, [pc, #200]	@ (80086d4 <_strtod_l+0x594>)
 800860a:	9308      	str	r3, [sp, #32]
 800860c:	2300      	movs	r3, #0
 800860e:	1124      	asrs	r4, r4, #4
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	461e      	mov	r6, r3
 8008616:	2c01      	cmp	r4, #1
 8008618:	dc21      	bgt.n	800865e <_strtod_l+0x51e>
 800861a:	b10b      	cbz	r3, 8008620 <_strtod_l+0x4e0>
 800861c:	4682      	mov	sl, r0
 800861e:	468b      	mov	fp, r1
 8008620:	492c      	ldr	r1, [pc, #176]	@ (80086d4 <_strtod_l+0x594>)
 8008622:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008626:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008632:	f7f7 fff9 	bl	8000628 <__aeabi_dmul>
 8008636:	4b28      	ldr	r3, [pc, #160]	@ (80086d8 <_strtod_l+0x598>)
 8008638:	460a      	mov	r2, r1
 800863a:	400b      	ands	r3, r1
 800863c:	4927      	ldr	r1, [pc, #156]	@ (80086dc <_strtod_l+0x59c>)
 800863e:	428b      	cmp	r3, r1
 8008640:	4682      	mov	sl, r0
 8008642:	d898      	bhi.n	8008576 <_strtod_l+0x436>
 8008644:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008648:	428b      	cmp	r3, r1
 800864a:	bf86      	itte	hi
 800864c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80086e0 <_strtod_l+0x5a0>
 8008650:	f04f 3aff 	movhi.w	sl, #4294967295
 8008654:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008658:	2300      	movs	r3, #0
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	e07a      	b.n	8008754 <_strtod_l+0x614>
 800865e:	07e2      	lsls	r2, r4, #31
 8008660:	d505      	bpl.n	800866e <_strtod_l+0x52e>
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffde 	bl	8000628 <__aeabi_dmul>
 800866c:	2301      	movs	r3, #1
 800866e:	9a08      	ldr	r2, [sp, #32]
 8008670:	3208      	adds	r2, #8
 8008672:	3601      	adds	r6, #1
 8008674:	1064      	asrs	r4, r4, #1
 8008676:	9208      	str	r2, [sp, #32]
 8008678:	e7cd      	b.n	8008616 <_strtod_l+0x4d6>
 800867a:	d0ed      	beq.n	8008658 <_strtod_l+0x518>
 800867c:	4264      	negs	r4, r4
 800867e:	f014 020f 	ands.w	r2, r4, #15
 8008682:	d00a      	beq.n	800869a <_strtod_l+0x55a>
 8008684:	4b12      	ldr	r3, [pc, #72]	@ (80086d0 <_strtod_l+0x590>)
 8008686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800868a:	4650      	mov	r0, sl
 800868c:	4659      	mov	r1, fp
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f8 f8f3 	bl	800087c <__aeabi_ddiv>
 8008696:	4682      	mov	sl, r0
 8008698:	468b      	mov	fp, r1
 800869a:	1124      	asrs	r4, r4, #4
 800869c:	d0dc      	beq.n	8008658 <_strtod_l+0x518>
 800869e:	2c1f      	cmp	r4, #31
 80086a0:	dd20      	ble.n	80086e4 <_strtod_l+0x5a4>
 80086a2:	2400      	movs	r4, #0
 80086a4:	46a0      	mov	r8, r4
 80086a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80086a8:	46a1      	mov	r9, r4
 80086aa:	9a05      	ldr	r2, [sp, #20]
 80086ac:	2322      	movs	r3, #34	@ 0x22
 80086ae:	f04f 0a00 	mov.w	sl, #0
 80086b2:	f04f 0b00 	mov.w	fp, #0
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e768      	b.n	800858c <_strtod_l+0x44c>
 80086ba:	bf00      	nop
 80086bc:	0800bdef 	.word	0x0800bdef
 80086c0:	0800bdf4 	.word	0x0800bdf4
 80086c4:	0800bde6 	.word	0x0800bde6
 80086c8:	0800bde9 	.word	0x0800bde9
 80086cc:	0800c1b9 	.word	0x0800c1b9
 80086d0:	0800c068 	.word	0x0800c068
 80086d4:	0800c040 	.word	0x0800c040
 80086d8:	7ff00000 	.word	0x7ff00000
 80086dc:	7ca00000 	.word	0x7ca00000
 80086e0:	7fefffff 	.word	0x7fefffff
 80086e4:	f014 0310 	ands.w	r3, r4, #16
 80086e8:	bf18      	it	ne
 80086ea:	236a      	movne	r3, #106	@ 0x6a
 80086ec:	4ea9      	ldr	r6, [pc, #676]	@ (8008994 <_strtod_l+0x854>)
 80086ee:	9308      	str	r3, [sp, #32]
 80086f0:	4650      	mov	r0, sl
 80086f2:	4659      	mov	r1, fp
 80086f4:	2300      	movs	r3, #0
 80086f6:	07e2      	lsls	r2, r4, #31
 80086f8:	d504      	bpl.n	8008704 <_strtod_l+0x5c4>
 80086fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086fe:	f7f7 ff93 	bl	8000628 <__aeabi_dmul>
 8008702:	2301      	movs	r3, #1
 8008704:	1064      	asrs	r4, r4, #1
 8008706:	f106 0608 	add.w	r6, r6, #8
 800870a:	d1f4      	bne.n	80086f6 <_strtod_l+0x5b6>
 800870c:	b10b      	cbz	r3, 8008712 <_strtod_l+0x5d2>
 800870e:	4682      	mov	sl, r0
 8008710:	468b      	mov	fp, r1
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	b1b3      	cbz	r3, 8008744 <_strtod_l+0x604>
 8008716:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800871a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800871e:	2b00      	cmp	r3, #0
 8008720:	4659      	mov	r1, fp
 8008722:	dd0f      	ble.n	8008744 <_strtod_l+0x604>
 8008724:	2b1f      	cmp	r3, #31
 8008726:	dd55      	ble.n	80087d4 <_strtod_l+0x694>
 8008728:	2b34      	cmp	r3, #52	@ 0x34
 800872a:	bfde      	ittt	le
 800872c:	f04f 33ff 	movle.w	r3, #4294967295
 8008730:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008734:	4093      	lslle	r3, r2
 8008736:	f04f 0a00 	mov.w	sl, #0
 800873a:	bfcc      	ite	gt
 800873c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008740:	ea03 0b01 	andle.w	fp, r3, r1
 8008744:	2200      	movs	r2, #0
 8008746:	2300      	movs	r3, #0
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	f7f8 f9d4 	bl	8000af8 <__aeabi_dcmpeq>
 8008750:	2800      	cmp	r0, #0
 8008752:	d1a6      	bne.n	80086a2 <_strtod_l+0x562>
 8008754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800875a:	9805      	ldr	r0, [sp, #20]
 800875c:	462b      	mov	r3, r5
 800875e:	463a      	mov	r2, r7
 8008760:	f001 f950 	bl	8009a04 <__s2b>
 8008764:	900a      	str	r0, [sp, #40]	@ 0x28
 8008766:	2800      	cmp	r0, #0
 8008768:	f43f af05 	beq.w	8008576 <_strtod_l+0x436>
 800876c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800876e:	2a00      	cmp	r2, #0
 8008770:	eba9 0308 	sub.w	r3, r9, r8
 8008774:	bfa8      	it	ge
 8008776:	2300      	movge	r3, #0
 8008778:	9312      	str	r3, [sp, #72]	@ 0x48
 800877a:	2400      	movs	r4, #0
 800877c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008780:	9316      	str	r3, [sp, #88]	@ 0x58
 8008782:	46a0      	mov	r8, r4
 8008784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008786:	9805      	ldr	r0, [sp, #20]
 8008788:	6859      	ldr	r1, [r3, #4]
 800878a:	f001 f893 	bl	80098b4 <_Balloc>
 800878e:	4681      	mov	r9, r0
 8008790:	2800      	cmp	r0, #0
 8008792:	f43f aef4 	beq.w	800857e <_strtod_l+0x43e>
 8008796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	3202      	adds	r2, #2
 800879c:	f103 010c 	add.w	r1, r3, #12
 80087a0:	0092      	lsls	r2, r2, #2
 80087a2:	300c      	adds	r0, #12
 80087a4:	f000 fcd7 	bl	8009156 <memcpy>
 80087a8:	ec4b ab10 	vmov	d0, sl, fp
 80087ac:	9805      	ldr	r0, [sp, #20]
 80087ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80087b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80087b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80087b6:	f001 fc61 	bl	800a07c <__d2b>
 80087ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80087bc:	2800      	cmp	r0, #0
 80087be:	f43f aede 	beq.w	800857e <_strtod_l+0x43e>
 80087c2:	9805      	ldr	r0, [sp, #20]
 80087c4:	2101      	movs	r1, #1
 80087c6:	f001 f9b3 	bl	8009b30 <__i2b>
 80087ca:	4680      	mov	r8, r0
 80087cc:	b948      	cbnz	r0, 80087e2 <_strtod_l+0x6a2>
 80087ce:	f04f 0800 	mov.w	r8, #0
 80087d2:	e6d4      	b.n	800857e <_strtod_l+0x43e>
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	ea03 0a0a 	and.w	sl, r3, sl
 80087e0:	e7b0      	b.n	8008744 <_strtod_l+0x604>
 80087e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	bfab      	itete	ge
 80087ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087f2:	bfac      	ite	ge
 80087f4:	18ef      	addge	r7, r5, r3
 80087f6:	1b5e      	sublt	r6, r3, r5
 80087f8:	9b08      	ldr	r3, [sp, #32]
 80087fa:	1aed      	subs	r5, r5, r3
 80087fc:	4415      	add	r5, r2
 80087fe:	4b66      	ldr	r3, [pc, #408]	@ (8008998 <_strtod_l+0x858>)
 8008800:	3d01      	subs	r5, #1
 8008802:	429d      	cmp	r5, r3
 8008804:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008808:	da50      	bge.n	80088ac <_strtod_l+0x76c>
 800880a:	1b5b      	subs	r3, r3, r5
 800880c:	2b1f      	cmp	r3, #31
 800880e:	eba2 0203 	sub.w	r2, r2, r3
 8008812:	f04f 0101 	mov.w	r1, #1
 8008816:	dc3d      	bgt.n	8008894 <_strtod_l+0x754>
 8008818:	fa01 f303 	lsl.w	r3, r1, r3
 800881c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800881e:	2300      	movs	r3, #0
 8008820:	9310      	str	r3, [sp, #64]	@ 0x40
 8008822:	18bd      	adds	r5, r7, r2
 8008824:	9b08      	ldr	r3, [sp, #32]
 8008826:	42af      	cmp	r7, r5
 8008828:	4416      	add	r6, r2
 800882a:	441e      	add	r6, r3
 800882c:	463b      	mov	r3, r7
 800882e:	bfa8      	it	ge
 8008830:	462b      	movge	r3, r5
 8008832:	42b3      	cmp	r3, r6
 8008834:	bfa8      	it	ge
 8008836:	4633      	movge	r3, r6
 8008838:	2b00      	cmp	r3, #0
 800883a:	bfc2      	ittt	gt
 800883c:	1aed      	subgt	r5, r5, r3
 800883e:	1af6      	subgt	r6, r6, r3
 8008840:	1aff      	subgt	r7, r7, r3
 8008842:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd16      	ble.n	8008876 <_strtod_l+0x736>
 8008848:	4641      	mov	r1, r8
 800884a:	9805      	ldr	r0, [sp, #20]
 800884c:	461a      	mov	r2, r3
 800884e:	f001 fa2f 	bl	8009cb0 <__pow5mult>
 8008852:	4680      	mov	r8, r0
 8008854:	2800      	cmp	r0, #0
 8008856:	d0ba      	beq.n	80087ce <_strtod_l+0x68e>
 8008858:	4601      	mov	r1, r0
 800885a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	f001 f97d 	bl	8009b5c <__multiply>
 8008862:	900e      	str	r0, [sp, #56]	@ 0x38
 8008864:	2800      	cmp	r0, #0
 8008866:	f43f ae8a 	beq.w	800857e <_strtod_l+0x43e>
 800886a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800886c:	9805      	ldr	r0, [sp, #20]
 800886e:	f001 f861 	bl	8009934 <_Bfree>
 8008872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008874:	931a      	str	r3, [sp, #104]	@ 0x68
 8008876:	2d00      	cmp	r5, #0
 8008878:	dc1d      	bgt.n	80088b6 <_strtod_l+0x776>
 800887a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	dd23      	ble.n	80088c8 <_strtod_l+0x788>
 8008880:	4649      	mov	r1, r9
 8008882:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008884:	9805      	ldr	r0, [sp, #20]
 8008886:	f001 fa13 	bl	8009cb0 <__pow5mult>
 800888a:	4681      	mov	r9, r0
 800888c:	b9e0      	cbnz	r0, 80088c8 <_strtod_l+0x788>
 800888e:	f04f 0900 	mov.w	r9, #0
 8008892:	e674      	b.n	800857e <_strtod_l+0x43e>
 8008894:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008898:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800889c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80088a0:	35e2      	adds	r5, #226	@ 0xe2
 80088a2:	fa01 f305 	lsl.w	r3, r1, r5
 80088a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80088a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80088aa:	e7ba      	b.n	8008822 <_strtod_l+0x6e2>
 80088ac:	2300      	movs	r3, #0
 80088ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80088b0:	2301      	movs	r3, #1
 80088b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088b4:	e7b5      	b.n	8008822 <_strtod_l+0x6e2>
 80088b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088b8:	9805      	ldr	r0, [sp, #20]
 80088ba:	462a      	mov	r2, r5
 80088bc:	f001 fa52 	bl	8009d64 <__lshift>
 80088c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d1d9      	bne.n	800887a <_strtod_l+0x73a>
 80088c6:	e65a      	b.n	800857e <_strtod_l+0x43e>
 80088c8:	2e00      	cmp	r6, #0
 80088ca:	dd07      	ble.n	80088dc <_strtod_l+0x79c>
 80088cc:	4649      	mov	r1, r9
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	4632      	mov	r2, r6
 80088d2:	f001 fa47 	bl	8009d64 <__lshift>
 80088d6:	4681      	mov	r9, r0
 80088d8:	2800      	cmp	r0, #0
 80088da:	d0d8      	beq.n	800888e <_strtod_l+0x74e>
 80088dc:	2f00      	cmp	r7, #0
 80088de:	dd08      	ble.n	80088f2 <_strtod_l+0x7b2>
 80088e0:	4641      	mov	r1, r8
 80088e2:	9805      	ldr	r0, [sp, #20]
 80088e4:	463a      	mov	r2, r7
 80088e6:	f001 fa3d 	bl	8009d64 <__lshift>
 80088ea:	4680      	mov	r8, r0
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f43f ae46 	beq.w	800857e <_strtod_l+0x43e>
 80088f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088f4:	9805      	ldr	r0, [sp, #20]
 80088f6:	464a      	mov	r2, r9
 80088f8:	f001 fabc 	bl	8009e74 <__mdiff>
 80088fc:	4604      	mov	r4, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f ae3d 	beq.w	800857e <_strtod_l+0x43e>
 8008904:	68c3      	ldr	r3, [r0, #12]
 8008906:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008908:	2300      	movs	r3, #0
 800890a:	60c3      	str	r3, [r0, #12]
 800890c:	4641      	mov	r1, r8
 800890e:	f001 fa95 	bl	8009e3c <__mcmp>
 8008912:	2800      	cmp	r0, #0
 8008914:	da46      	bge.n	80089a4 <_strtod_l+0x864>
 8008916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008918:	ea53 030a 	orrs.w	r3, r3, sl
 800891c:	d16c      	bne.n	80089f8 <_strtod_l+0x8b8>
 800891e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008922:	2b00      	cmp	r3, #0
 8008924:	d168      	bne.n	80089f8 <_strtod_l+0x8b8>
 8008926:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800892a:	0d1b      	lsrs	r3, r3, #20
 800892c:	051b      	lsls	r3, r3, #20
 800892e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008932:	d961      	bls.n	80089f8 <_strtod_l+0x8b8>
 8008934:	6963      	ldr	r3, [r4, #20]
 8008936:	b913      	cbnz	r3, 800893e <_strtod_l+0x7fe>
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	2b01      	cmp	r3, #1
 800893c:	dd5c      	ble.n	80089f8 <_strtod_l+0x8b8>
 800893e:	4621      	mov	r1, r4
 8008940:	2201      	movs	r2, #1
 8008942:	9805      	ldr	r0, [sp, #20]
 8008944:	f001 fa0e 	bl	8009d64 <__lshift>
 8008948:	4641      	mov	r1, r8
 800894a:	4604      	mov	r4, r0
 800894c:	f001 fa76 	bl	8009e3c <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	dd51      	ble.n	80089f8 <_strtod_l+0x8b8>
 8008954:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008958:	9a08      	ldr	r2, [sp, #32]
 800895a:	0d1b      	lsrs	r3, r3, #20
 800895c:	051b      	lsls	r3, r3, #20
 800895e:	2a00      	cmp	r2, #0
 8008960:	d06b      	beq.n	8008a3a <_strtod_l+0x8fa>
 8008962:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008966:	d868      	bhi.n	8008a3a <_strtod_l+0x8fa>
 8008968:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800896c:	f67f ae9d 	bls.w	80086aa <_strtod_l+0x56a>
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <_strtod_l+0x85c>)
 8008972:	4650      	mov	r0, sl
 8008974:	4659      	mov	r1, fp
 8008976:	2200      	movs	r2, #0
 8008978:	f7f7 fe56 	bl	8000628 <__aeabi_dmul>
 800897c:	4b08      	ldr	r3, [pc, #32]	@ (80089a0 <_strtod_l+0x860>)
 800897e:	400b      	ands	r3, r1
 8008980:	4682      	mov	sl, r0
 8008982:	468b      	mov	fp, r1
 8008984:	2b00      	cmp	r3, #0
 8008986:	f47f ae05 	bne.w	8008594 <_strtod_l+0x454>
 800898a:	9a05      	ldr	r2, [sp, #20]
 800898c:	2322      	movs	r3, #34	@ 0x22
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	e600      	b.n	8008594 <_strtod_l+0x454>
 8008992:	bf00      	nop
 8008994:	0800be20 	.word	0x0800be20
 8008998:	fffffc02 	.word	0xfffffc02
 800899c:	39500000 	.word	0x39500000
 80089a0:	7ff00000 	.word	0x7ff00000
 80089a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80089a8:	d165      	bne.n	8008a76 <_strtod_l+0x936>
 80089aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80089ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089b0:	b35a      	cbz	r2, 8008a0a <_strtod_l+0x8ca>
 80089b2:	4a9f      	ldr	r2, [pc, #636]	@ (8008c30 <_strtod_l+0xaf0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d12b      	bne.n	8008a10 <_strtod_l+0x8d0>
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	4651      	mov	r1, sl
 80089bc:	b303      	cbz	r3, 8008a00 <_strtod_l+0x8c0>
 80089be:	4b9d      	ldr	r3, [pc, #628]	@ (8008c34 <_strtod_l+0xaf4>)
 80089c0:	465a      	mov	r2, fp
 80089c2:	4013      	ands	r3, r2
 80089c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089c8:	f04f 32ff 	mov.w	r2, #4294967295
 80089cc:	d81b      	bhi.n	8008a06 <_strtod_l+0x8c6>
 80089ce:	0d1b      	lsrs	r3, r3, #20
 80089d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	4299      	cmp	r1, r3
 80089da:	d119      	bne.n	8008a10 <_strtod_l+0x8d0>
 80089dc:	4b96      	ldr	r3, [pc, #600]	@ (8008c38 <_strtod_l+0xaf8>)
 80089de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d102      	bne.n	80089ea <_strtod_l+0x8aa>
 80089e4:	3101      	adds	r1, #1
 80089e6:	f43f adca 	beq.w	800857e <_strtod_l+0x43e>
 80089ea:	4b92      	ldr	r3, [pc, #584]	@ (8008c34 <_strtod_l+0xaf4>)
 80089ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089ee:	401a      	ands	r2, r3
 80089f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089f4:	f04f 0a00 	mov.w	sl, #0
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1b8      	bne.n	8008970 <_strtod_l+0x830>
 80089fe:	e5c9      	b.n	8008594 <_strtod_l+0x454>
 8008a00:	f04f 33ff 	mov.w	r3, #4294967295
 8008a04:	e7e8      	b.n	80089d8 <_strtod_l+0x898>
 8008a06:	4613      	mov	r3, r2
 8008a08:	e7e6      	b.n	80089d8 <_strtod_l+0x898>
 8008a0a:	ea53 030a 	orrs.w	r3, r3, sl
 8008a0e:	d0a1      	beq.n	8008954 <_strtod_l+0x814>
 8008a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a12:	b1db      	cbz	r3, 8008a4c <_strtod_l+0x90c>
 8008a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a16:	4213      	tst	r3, r2
 8008a18:	d0ee      	beq.n	80089f8 <_strtod_l+0x8b8>
 8008a1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a1c:	9a08      	ldr	r2, [sp, #32]
 8008a1e:	4650      	mov	r0, sl
 8008a20:	4659      	mov	r1, fp
 8008a22:	b1bb      	cbz	r3, 8008a54 <_strtod_l+0x914>
 8008a24:	f7ff fb6c 	bl	8008100 <sulp>
 8008a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a2c:	ec53 2b10 	vmov	r2, r3, d0
 8008a30:	f7f7 fc44 	bl	80002bc <__adddf3>
 8008a34:	4682      	mov	sl, r0
 8008a36:	468b      	mov	fp, r1
 8008a38:	e7de      	b.n	80089f8 <_strtod_l+0x8b8>
 8008a3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a46:	f04f 3aff 	mov.w	sl, #4294967295
 8008a4a:	e7d5      	b.n	80089f8 <_strtod_l+0x8b8>
 8008a4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a4e:	ea13 0f0a 	tst.w	r3, sl
 8008a52:	e7e1      	b.n	8008a18 <_strtod_l+0x8d8>
 8008a54:	f7ff fb54 	bl	8008100 <sulp>
 8008a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a5c:	ec53 2b10 	vmov	r2, r3, d0
 8008a60:	f7f7 fc2a 	bl	80002b8 <__aeabi_dsub>
 8008a64:	2200      	movs	r2, #0
 8008a66:	2300      	movs	r3, #0
 8008a68:	4682      	mov	sl, r0
 8008a6a:	468b      	mov	fp, r1
 8008a6c:	f7f8 f844 	bl	8000af8 <__aeabi_dcmpeq>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0c1      	beq.n	80089f8 <_strtod_l+0x8b8>
 8008a74:	e619      	b.n	80086aa <_strtod_l+0x56a>
 8008a76:	4641      	mov	r1, r8
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f001 fb57 	bl	800a12c <__ratio>
 8008a7e:	ec57 6b10 	vmov	r6, r7, d0
 8008a82:	2200      	movs	r2, #0
 8008a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a88:	4630      	mov	r0, r6
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	f7f8 f848 	bl	8000b20 <__aeabi_dcmple>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d06f      	beq.n	8008b74 <_strtod_l+0xa34>
 8008a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d17a      	bne.n	8008b90 <_strtod_l+0xa50>
 8008a9a:	f1ba 0f00 	cmp.w	sl, #0
 8008a9e:	d158      	bne.n	8008b52 <_strtod_l+0xa12>
 8008aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d15a      	bne.n	8008b60 <_strtod_l+0xa20>
 8008aaa:	4b64      	ldr	r3, [pc, #400]	@ (8008c3c <_strtod_l+0xafc>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	4630      	mov	r0, r6
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	f7f8 f82b 	bl	8000b0c <__aeabi_dcmplt>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d159      	bne.n	8008b6e <_strtod_l+0xa2e>
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	4b60      	ldr	r3, [pc, #384]	@ (8008c40 <_strtod_l+0xb00>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f7f7 fdb1 	bl	8000628 <__aeabi_dmul>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ace:	9606      	str	r6, [sp, #24]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ad6:	4d57      	ldr	r5, [pc, #348]	@ (8008c34 <_strtod_l+0xaf4>)
 8008ad8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ade:	401d      	ands	r5, r3
 8008ae0:	4b58      	ldr	r3, [pc, #352]	@ (8008c44 <_strtod_l+0xb04>)
 8008ae2:	429d      	cmp	r5, r3
 8008ae4:	f040 80b2 	bne.w	8008c4c <_strtod_l+0xb0c>
 8008ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008aee:	ec4b ab10 	vmov	d0, sl, fp
 8008af2:	f001 fa53 	bl	8009f9c <__ulp>
 8008af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008afa:	ec51 0b10 	vmov	r0, r1, d0
 8008afe:	f7f7 fd93 	bl	8000628 <__aeabi_dmul>
 8008b02:	4652      	mov	r2, sl
 8008b04:	465b      	mov	r3, fp
 8008b06:	f7f7 fbd9 	bl	80002bc <__adddf3>
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4949      	ldr	r1, [pc, #292]	@ (8008c34 <_strtod_l+0xaf4>)
 8008b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8008c48 <_strtod_l+0xb08>)
 8008b10:	4019      	ands	r1, r3
 8008b12:	4291      	cmp	r1, r2
 8008b14:	4682      	mov	sl, r0
 8008b16:	d942      	bls.n	8008b9e <_strtod_l+0xa5e>
 8008b18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b1a:	4b47      	ldr	r3, [pc, #284]	@ (8008c38 <_strtod_l+0xaf8>)
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d103      	bne.n	8008b28 <_strtod_l+0x9e8>
 8008b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b22:	3301      	adds	r3, #1
 8008b24:	f43f ad2b 	beq.w	800857e <_strtod_l+0x43e>
 8008b28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c38 <_strtod_l+0xaf8>
 8008b2c:	f04f 3aff 	mov.w	sl, #4294967295
 8008b30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b32:	9805      	ldr	r0, [sp, #20]
 8008b34:	f000 fefe 	bl	8009934 <_Bfree>
 8008b38:	9805      	ldr	r0, [sp, #20]
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f000 fefa 	bl	8009934 <_Bfree>
 8008b40:	9805      	ldr	r0, [sp, #20]
 8008b42:	4641      	mov	r1, r8
 8008b44:	f000 fef6 	bl	8009934 <_Bfree>
 8008b48:	9805      	ldr	r0, [sp, #20]
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	f000 fef2 	bl	8009934 <_Bfree>
 8008b50:	e618      	b.n	8008784 <_strtod_l+0x644>
 8008b52:	f1ba 0f01 	cmp.w	sl, #1
 8008b56:	d103      	bne.n	8008b60 <_strtod_l+0xa20>
 8008b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f43f ada5 	beq.w	80086aa <_strtod_l+0x56a>
 8008b60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c10 <_strtod_l+0xad0>
 8008b64:	4f35      	ldr	r7, [pc, #212]	@ (8008c3c <_strtod_l+0xafc>)
 8008b66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	e7b1      	b.n	8008ad2 <_strtod_l+0x992>
 8008b6e:	4f34      	ldr	r7, [pc, #208]	@ (8008c40 <_strtod_l+0xb00>)
 8008b70:	2600      	movs	r6, #0
 8008b72:	e7aa      	b.n	8008aca <_strtod_l+0x98a>
 8008b74:	4b32      	ldr	r3, [pc, #200]	@ (8008c40 <_strtod_l+0xb00>)
 8008b76:	4630      	mov	r0, r6
 8008b78:	4639      	mov	r1, r7
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f7f7 fd54 	bl	8000628 <__aeabi_dmul>
 8008b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b82:	4606      	mov	r6, r0
 8008b84:	460f      	mov	r7, r1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d09f      	beq.n	8008aca <_strtod_l+0x98a>
 8008b8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b8e:	e7a0      	b.n	8008ad2 <_strtod_l+0x992>
 8008b90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008c18 <_strtod_l+0xad8>
 8008b94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b98:	ec57 6b17 	vmov	r6, r7, d7
 8008b9c:	e799      	b.n	8008ad2 <_strtod_l+0x992>
 8008b9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008ba2:	9b08      	ldr	r3, [sp, #32]
 8008ba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1c1      	bne.n	8008b30 <_strtod_l+0x9f0>
 8008bac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	051b      	lsls	r3, r3, #20
 8008bb4:	429d      	cmp	r5, r3
 8008bb6:	d1bb      	bne.n	8008b30 <_strtod_l+0x9f0>
 8008bb8:	4630      	mov	r0, r6
 8008bba:	4639      	mov	r1, r7
 8008bbc:	f7f8 f844 	bl	8000c48 <__aeabi_d2lz>
 8008bc0:	f7f7 fd04 	bl	80005cc <__aeabi_l2d>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f7 fb74 	bl	80002b8 <__aeabi_dsub>
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008bd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bde:	ea46 060a 	orr.w	r6, r6, sl
 8008be2:	431e      	orrs	r6, r3
 8008be4:	d06f      	beq.n	8008cc6 <_strtod_l+0xb86>
 8008be6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c20 <_strtod_l+0xae0>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f7f7 ff8e 	bl	8000b0c <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f47f accf 	bne.w	8008594 <_strtod_l+0x454>
 8008bf6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c28 <_strtod_l+0xae8>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c00:	f7f7 ffa2 	bl	8000b48 <__aeabi_dcmpgt>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d093      	beq.n	8008b30 <_strtod_l+0x9f0>
 8008c08:	e4c4      	b.n	8008594 <_strtod_l+0x454>
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w
 8008c10:	00000000 	.word	0x00000000
 8008c14:	bff00000 	.word	0xbff00000
 8008c18:	00000000 	.word	0x00000000
 8008c1c:	3ff00000 	.word	0x3ff00000
 8008c20:	94a03595 	.word	0x94a03595
 8008c24:	3fdfffff 	.word	0x3fdfffff
 8008c28:	35afe535 	.word	0x35afe535
 8008c2c:	3fe00000 	.word	0x3fe00000
 8008c30:	000fffff 	.word	0x000fffff
 8008c34:	7ff00000 	.word	0x7ff00000
 8008c38:	7fefffff 	.word	0x7fefffff
 8008c3c:	3ff00000 	.word	0x3ff00000
 8008c40:	3fe00000 	.word	0x3fe00000
 8008c44:	7fe00000 	.word	0x7fe00000
 8008c48:	7c9fffff 	.word	0x7c9fffff
 8008c4c:	9b08      	ldr	r3, [sp, #32]
 8008c4e:	b323      	cbz	r3, 8008c9a <_strtod_l+0xb5a>
 8008c50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c54:	d821      	bhi.n	8008c9a <_strtod_l+0xb5a>
 8008c56:	a328      	add	r3, pc, #160	@ (adr r3, 8008cf8 <_strtod_l+0xbb8>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 ff5e 	bl	8000b20 <__aeabi_dcmple>
 8008c64:	b1a0      	cbz	r0, 8008c90 <_strtod_l+0xb50>
 8008c66:	4639      	mov	r1, r7
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7f7 ffb5 	bl	8000bd8 <__aeabi_d2uiz>
 8008c6e:	2801      	cmp	r0, #1
 8008c70:	bf38      	it	cc
 8008c72:	2001      	movcc	r0, #1
 8008c74:	f7f7 fc5e 	bl	8000534 <__aeabi_ui2d>
 8008c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	b9fb      	cbnz	r3, 8008cc0 <_strtod_l+0xb80>
 8008c80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c84:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c86:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c96:	1b5b      	subs	r3, r3, r5
 8008c98:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008ca2:	f001 f97b 	bl	8009f9c <__ulp>
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	ec53 2b10 	vmov	r2, r3, d0
 8008cac:	4659      	mov	r1, fp
 8008cae:	f7f7 fcbb 	bl	8000628 <__aeabi_dmul>
 8008cb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008cb6:	f7f7 fb01 	bl	80002bc <__adddf3>
 8008cba:	4682      	mov	sl, r0
 8008cbc:	468b      	mov	fp, r1
 8008cbe:	e770      	b.n	8008ba2 <_strtod_l+0xa62>
 8008cc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008cc4:	e7e0      	b.n	8008c88 <_strtod_l+0xb48>
 8008cc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d00 <_strtod_l+0xbc0>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 ff1e 	bl	8000b0c <__aeabi_dcmplt>
 8008cd0:	e798      	b.n	8008c04 <_strtod_l+0xac4>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	f7ff ba6d 	b.w	80081ba <_strtod_l+0x7a>
 8008ce0:	2a65      	cmp	r2, #101	@ 0x65
 8008ce2:	f43f ab66 	beq.w	80083b2 <_strtod_l+0x272>
 8008ce6:	2a45      	cmp	r2, #69	@ 0x45
 8008ce8:	f43f ab63 	beq.w	80083b2 <_strtod_l+0x272>
 8008cec:	2301      	movs	r3, #1
 8008cee:	f7ff bb9e 	b.w	800842e <_strtod_l+0x2ee>
 8008cf2:	bf00      	nop
 8008cf4:	f3af 8000 	nop.w
 8008cf8:	ffc00000 	.word	0xffc00000
 8008cfc:	41dfffff 	.word	0x41dfffff
 8008d00:	94a03595 	.word	0x94a03595
 8008d04:	3fcfffff 	.word	0x3fcfffff

08008d08 <strtod>:
 8008d08:	460a      	mov	r2, r1
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4802      	ldr	r0, [pc, #8]	@ (8008d18 <strtod+0x10>)
 8008d0e:	4b03      	ldr	r3, [pc, #12]	@ (8008d1c <strtod+0x14>)
 8008d10:	6800      	ldr	r0, [r0, #0]
 8008d12:	f7ff ba15 	b.w	8008140 <_strtod_l>
 8008d16:	bf00      	nop
 8008d18:	200001e8 	.word	0x200001e8
 8008d1c:	2000007c 	.word	0x2000007c

08008d20 <std>:
 8008d20:	2300      	movs	r3, #0
 8008d22:	b510      	push	{r4, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	e9c0 3300 	strd	r3, r3, [r0]
 8008d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d2e:	6083      	str	r3, [r0, #8]
 8008d30:	8181      	strh	r1, [r0, #12]
 8008d32:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d34:	81c2      	strh	r2, [r0, #14]
 8008d36:	6183      	str	r3, [r0, #24]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	2208      	movs	r2, #8
 8008d3c:	305c      	adds	r0, #92	@ 0x5c
 8008d3e:	f000 f940 	bl	8008fc2 <memset>
 8008d42:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <std+0x58>)
 8008d44:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d46:	4b0d      	ldr	r3, [pc, #52]	@ (8008d7c <std+0x5c>)
 8008d48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <std+0x60>)
 8008d4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <std+0x64>)
 8008d50:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d52:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <std+0x68>)
 8008d54:	6224      	str	r4, [r4, #32]
 8008d56:	429c      	cmp	r4, r3
 8008d58:	d006      	beq.n	8008d68 <std+0x48>
 8008d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d5e:	4294      	cmp	r4, r2
 8008d60:	d002      	beq.n	8008d68 <std+0x48>
 8008d62:	33d0      	adds	r3, #208	@ 0xd0
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d105      	bne.n	8008d74 <std+0x54>
 8008d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d70:	f000 b9e6 	b.w	8009140 <__retarget_lock_init_recursive>
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	bf00      	nop
 8008d78:	08008f39 	.word	0x08008f39
 8008d7c:	08008f5f 	.word	0x08008f5f
 8008d80:	08008f97 	.word	0x08008f97
 8008d84:	08008fbb 	.word	0x08008fbb
 8008d88:	20001ab0 	.word	0x20001ab0

08008d8c <stdio_exit_handler>:
 8008d8c:	4a02      	ldr	r2, [pc, #8]	@ (8008d98 <stdio_exit_handler+0xc>)
 8008d8e:	4903      	ldr	r1, [pc, #12]	@ (8008d9c <stdio_exit_handler+0x10>)
 8008d90:	4803      	ldr	r0, [pc, #12]	@ (8008da0 <stdio_exit_handler+0x14>)
 8008d92:	f000 b869 	b.w	8008e68 <_fwalk_sglue>
 8008d96:	bf00      	nop
 8008d98:	20000070 	.word	0x20000070
 8008d9c:	0800af49 	.word	0x0800af49
 8008da0:	200001ec 	.word	0x200001ec

08008da4 <cleanup_stdio>:
 8008da4:	6841      	ldr	r1, [r0, #4]
 8008da6:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd8 <cleanup_stdio+0x34>)
 8008da8:	4299      	cmp	r1, r3
 8008daa:	b510      	push	{r4, lr}
 8008dac:	4604      	mov	r4, r0
 8008dae:	d001      	beq.n	8008db4 <cleanup_stdio+0x10>
 8008db0:	f002 f8ca 	bl	800af48 <_fflush_r>
 8008db4:	68a1      	ldr	r1, [r4, #8]
 8008db6:	4b09      	ldr	r3, [pc, #36]	@ (8008ddc <cleanup_stdio+0x38>)
 8008db8:	4299      	cmp	r1, r3
 8008dba:	d002      	beq.n	8008dc2 <cleanup_stdio+0x1e>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f002 f8c3 	bl	800af48 <_fflush_r>
 8008dc2:	68e1      	ldr	r1, [r4, #12]
 8008dc4:	4b06      	ldr	r3, [pc, #24]	@ (8008de0 <cleanup_stdio+0x3c>)
 8008dc6:	4299      	cmp	r1, r3
 8008dc8:	d004      	beq.n	8008dd4 <cleanup_stdio+0x30>
 8008dca:	4620      	mov	r0, r4
 8008dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd0:	f002 b8ba 	b.w	800af48 <_fflush_r>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20001ab0 	.word	0x20001ab0
 8008ddc:	20001b18 	.word	0x20001b18
 8008de0:	20001b80 	.word	0x20001b80

08008de4 <global_stdio_init.part.0>:
 8008de4:	b510      	push	{r4, lr}
 8008de6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e14 <global_stdio_init.part.0+0x30>)
 8008de8:	4c0b      	ldr	r4, [pc, #44]	@ (8008e18 <global_stdio_init.part.0+0x34>)
 8008dea:	4a0c      	ldr	r2, [pc, #48]	@ (8008e1c <global_stdio_init.part.0+0x38>)
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	4620      	mov	r0, r4
 8008df0:	2200      	movs	r2, #0
 8008df2:	2104      	movs	r1, #4
 8008df4:	f7ff ff94 	bl	8008d20 <std>
 8008df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	2109      	movs	r1, #9
 8008e00:	f7ff ff8e 	bl	8008d20 <std>
 8008e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e08:	2202      	movs	r2, #2
 8008e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0e:	2112      	movs	r1, #18
 8008e10:	f7ff bf86 	b.w	8008d20 <std>
 8008e14:	20001be8 	.word	0x20001be8
 8008e18:	20001ab0 	.word	0x20001ab0
 8008e1c:	08008d8d 	.word	0x08008d8d

08008e20 <__sfp_lock_acquire>:
 8008e20:	4801      	ldr	r0, [pc, #4]	@ (8008e28 <__sfp_lock_acquire+0x8>)
 8008e22:	f000 b98e 	b.w	8009142 <__retarget_lock_acquire_recursive>
 8008e26:	bf00      	nop
 8008e28:	20001bf1 	.word	0x20001bf1

08008e2c <__sfp_lock_release>:
 8008e2c:	4801      	ldr	r0, [pc, #4]	@ (8008e34 <__sfp_lock_release+0x8>)
 8008e2e:	f000 b989 	b.w	8009144 <__retarget_lock_release_recursive>
 8008e32:	bf00      	nop
 8008e34:	20001bf1 	.word	0x20001bf1

08008e38 <__sinit>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	f7ff fff0 	bl	8008e20 <__sfp_lock_acquire>
 8008e40:	6a23      	ldr	r3, [r4, #32]
 8008e42:	b11b      	cbz	r3, 8008e4c <__sinit+0x14>
 8008e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e48:	f7ff bff0 	b.w	8008e2c <__sfp_lock_release>
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <__sinit+0x28>)
 8008e4e:	6223      	str	r3, [r4, #32]
 8008e50:	4b04      	ldr	r3, [pc, #16]	@ (8008e64 <__sinit+0x2c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1f5      	bne.n	8008e44 <__sinit+0xc>
 8008e58:	f7ff ffc4 	bl	8008de4 <global_stdio_init.part.0>
 8008e5c:	e7f2      	b.n	8008e44 <__sinit+0xc>
 8008e5e:	bf00      	nop
 8008e60:	08008da5 	.word	0x08008da5
 8008e64:	20001be8 	.word	0x20001be8

08008e68 <_fwalk_sglue>:
 8008e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	4688      	mov	r8, r1
 8008e70:	4614      	mov	r4, r2
 8008e72:	2600      	movs	r6, #0
 8008e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e78:	f1b9 0901 	subs.w	r9, r9, #1
 8008e7c:	d505      	bpl.n	8008e8a <_fwalk_sglue+0x22>
 8008e7e:	6824      	ldr	r4, [r4, #0]
 8008e80:	2c00      	cmp	r4, #0
 8008e82:	d1f7      	bne.n	8008e74 <_fwalk_sglue+0xc>
 8008e84:	4630      	mov	r0, r6
 8008e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d907      	bls.n	8008ea0 <_fwalk_sglue+0x38>
 8008e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e94:	3301      	adds	r3, #1
 8008e96:	d003      	beq.n	8008ea0 <_fwalk_sglue+0x38>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	4306      	orrs	r6, r0
 8008ea0:	3568      	adds	r5, #104	@ 0x68
 8008ea2:	e7e9      	b.n	8008e78 <_fwalk_sglue+0x10>

08008ea4 <siprintf>:
 8008ea4:	b40e      	push	{r1, r2, r3}
 8008ea6:	b500      	push	{lr}
 8008ea8:	b09c      	sub	sp, #112	@ 0x70
 8008eaa:	ab1d      	add	r3, sp, #116	@ 0x74
 8008eac:	9002      	str	r0, [sp, #8]
 8008eae:	9006      	str	r0, [sp, #24]
 8008eb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008eb4:	4809      	ldr	r0, [pc, #36]	@ (8008edc <siprintf+0x38>)
 8008eb6:	9107      	str	r1, [sp, #28]
 8008eb8:	9104      	str	r1, [sp, #16]
 8008eba:	4909      	ldr	r1, [pc, #36]	@ (8008ee0 <siprintf+0x3c>)
 8008ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec0:	9105      	str	r1, [sp, #20]
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	a902      	add	r1, sp, #8
 8008ec8:	f001 fa16 	bl	800a2f8 <_svfiprintf_r>
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	b01c      	add	sp, #112	@ 0x70
 8008ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed8:	b003      	add	sp, #12
 8008eda:	4770      	bx	lr
 8008edc:	200001e8 	.word	0x200001e8
 8008ee0:	ffff0208 	.word	0xffff0208

08008ee4 <siscanf>:
 8008ee4:	b40e      	push	{r1, r2, r3}
 8008ee6:	b530      	push	{r4, r5, lr}
 8008ee8:	b09c      	sub	sp, #112	@ 0x70
 8008eea:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008eec:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008ef0:	f854 5b04 	ldr.w	r5, [r4], #4
 8008ef4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008ef8:	9002      	str	r0, [sp, #8]
 8008efa:	9006      	str	r0, [sp, #24]
 8008efc:	f7f7 f97a 	bl	80001f4 <strlen>
 8008f00:	4b0b      	ldr	r3, [pc, #44]	@ (8008f30 <siscanf+0x4c>)
 8008f02:	9003      	str	r0, [sp, #12]
 8008f04:	9007      	str	r0, [sp, #28]
 8008f06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f08:	480a      	ldr	r0, [pc, #40]	@ (8008f34 <siscanf+0x50>)
 8008f0a:	9401      	str	r4, [sp, #4]
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f10:	9314      	str	r3, [sp, #80]	@ 0x50
 8008f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	a902      	add	r1, sp, #8
 8008f20:	6800      	ldr	r0, [r0, #0]
 8008f22:	f001 fb3d 	bl	800a5a0 <__ssvfiscanf_r>
 8008f26:	b01c      	add	sp, #112	@ 0x70
 8008f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2c:	b003      	add	sp, #12
 8008f2e:	4770      	bx	lr
 8008f30:	08008f5b 	.word	0x08008f5b
 8008f34:	200001e8 	.word	0x200001e8

08008f38 <__sread>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	f000 f8a0 	bl	8009084 <_read_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	bfab      	itete	ge
 8008f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f4c:	181b      	addge	r3, r3, r0
 8008f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f52:	bfac      	ite	ge
 8008f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f56:	81a3      	strhlt	r3, [r4, #12]
 8008f58:	bd10      	pop	{r4, pc}

08008f5a <__seofread>:
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	4770      	bx	lr

08008f5e <__swrite>:
 8008f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	461f      	mov	r7, r3
 8008f64:	898b      	ldrh	r3, [r1, #12]
 8008f66:	05db      	lsls	r3, r3, #23
 8008f68:	4605      	mov	r5, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	4616      	mov	r6, r2
 8008f6e:	d505      	bpl.n	8008f7c <__swrite+0x1e>
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	2302      	movs	r3, #2
 8008f76:	2200      	movs	r2, #0
 8008f78:	f000 f872 	bl	8009060 <_lseek_r>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	4632      	mov	r2, r6
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	f000 b899 	b.w	80090c8 <_write_r>

08008f96 <__sseek>:
 8008f96:	b510      	push	{r4, lr}
 8008f98:	460c      	mov	r4, r1
 8008f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9e:	f000 f85f 	bl	8009060 <_lseek_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	bf15      	itete	ne
 8008fa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008faa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fb2:	81a3      	strheq	r3, [r4, #12]
 8008fb4:	bf18      	it	ne
 8008fb6:	81a3      	strhne	r3, [r4, #12]
 8008fb8:	bd10      	pop	{r4, pc}

08008fba <__sclose>:
 8008fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbe:	f000 b83f 	b.w	8009040 <_close_r>

08008fc2 <memset>:
 8008fc2:	4402      	add	r2, r0
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d100      	bne.n	8008fcc <memset+0xa>
 8008fca:	4770      	bx	lr
 8008fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8008fd0:	e7f9      	b.n	8008fc6 <memset+0x4>

08008fd2 <strcat>:
 8008fd2:	b510      	push	{r4, lr}
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	7814      	ldrb	r4, [r2, #0]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	3201      	adds	r2, #1
 8008fdc:	2c00      	cmp	r4, #0
 8008fde:	d1fa      	bne.n	8008fd6 <strcat+0x4>
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	d1f9      	bne.n	8008fe2 <strcat+0x10>
 8008fee:	bd10      	pop	{r4, pc}

08008ff0 <strncmp>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	b16a      	cbz	r2, 8009010 <strncmp+0x20>
 8008ff4:	3901      	subs	r1, #1
 8008ff6:	1884      	adds	r4, r0, r2
 8008ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009000:	429a      	cmp	r2, r3
 8009002:	d103      	bne.n	800900c <strncmp+0x1c>
 8009004:	42a0      	cmp	r0, r4
 8009006:	d001      	beq.n	800900c <strncmp+0x1c>
 8009008:	2a00      	cmp	r2, #0
 800900a:	d1f5      	bne.n	8008ff8 <strncmp+0x8>
 800900c:	1ad0      	subs	r0, r2, r3
 800900e:	bd10      	pop	{r4, pc}
 8009010:	4610      	mov	r0, r2
 8009012:	e7fc      	b.n	800900e <strncmp+0x1e>

08009014 <strstr>:
 8009014:	780a      	ldrb	r2, [r1, #0]
 8009016:	b570      	push	{r4, r5, r6, lr}
 8009018:	b96a      	cbnz	r2, 8009036 <strstr+0x22>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	429a      	cmp	r2, r3
 800901e:	d109      	bne.n	8009034 <strstr+0x20>
 8009020:	460c      	mov	r4, r1
 8009022:	4605      	mov	r5, r0
 8009024:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0f6      	beq.n	800901a <strstr+0x6>
 800902c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009030:	429e      	cmp	r6, r3
 8009032:	d0f7      	beq.n	8009024 <strstr+0x10>
 8009034:	3001      	adds	r0, #1
 8009036:	7803      	ldrb	r3, [r0, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1ef      	bne.n	800901c <strstr+0x8>
 800903c:	4618      	mov	r0, r3
 800903e:	e7ec      	b.n	800901a <strstr+0x6>

08009040 <_close_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	@ (800905c <_close_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f8 fbea 	bl	8001824 <_close>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_close_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_close_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20001bec 	.word	0x20001bec

08009060 <_lseek_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	@ (8009080 <_lseek_r+0x20>)
 8009064:	4604      	mov	r4, r0
 8009066:	4608      	mov	r0, r1
 8009068:	4611      	mov	r1, r2
 800906a:	2200      	movs	r2, #0
 800906c:	602a      	str	r2, [r5, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	f7f8 fbff 	bl	8001872 <_lseek>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_lseek_r+0x1e>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_lseek_r+0x1e>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	20001bec 	.word	0x20001bec

08009084 <_read_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d07      	ldr	r5, [pc, #28]	@ (80090a4 <_read_r+0x20>)
 8009088:	4604      	mov	r4, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f8 fb8d 	bl	80017b2 <_read>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_read_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_read_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001bec 	.word	0x20001bec

080090a8 <_sbrk_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	@ (80090c4 <_sbrk_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f8 fbea 	bl	800188c <_sbrk>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_sbrk_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_sbrk_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20001bec 	.word	0x20001bec

080090c8 <_write_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	@ (80090e8 <_write_r+0x20>)
 80090cc:	4604      	mov	r4, r0
 80090ce:	4608      	mov	r0, r1
 80090d0:	4611      	mov	r1, r2
 80090d2:	2200      	movs	r2, #0
 80090d4:	602a      	str	r2, [r5, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f7f8 fb88 	bl	80017ec <_write>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_write_r+0x1e>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_write_r+0x1e>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20001bec 	.word	0x20001bec

080090ec <__errno>:
 80090ec:	4b01      	ldr	r3, [pc, #4]	@ (80090f4 <__errno+0x8>)
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	200001e8 	.word	0x200001e8

080090f8 <__libc_init_array>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009130 <__libc_init_array+0x38>)
 80090fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009134 <__libc_init_array+0x3c>)
 80090fe:	1b64      	subs	r4, r4, r5
 8009100:	10a4      	asrs	r4, r4, #2
 8009102:	2600      	movs	r6, #0
 8009104:	42a6      	cmp	r6, r4
 8009106:	d109      	bne.n	800911c <__libc_init_array+0x24>
 8009108:	4d0b      	ldr	r5, [pc, #44]	@ (8009138 <__libc_init_array+0x40>)
 800910a:	4c0c      	ldr	r4, [pc, #48]	@ (800913c <__libc_init_array+0x44>)
 800910c:	f002 fba6 	bl	800b85c <_init>
 8009110:	1b64      	subs	r4, r4, r5
 8009112:	10a4      	asrs	r4, r4, #2
 8009114:	2600      	movs	r6, #0
 8009116:	42a6      	cmp	r6, r4
 8009118:	d105      	bne.n	8009126 <__libc_init_array+0x2e>
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009120:	4798      	blx	r3
 8009122:	3601      	adds	r6, #1
 8009124:	e7ee      	b.n	8009104 <__libc_init_array+0xc>
 8009126:	f855 3b04 	ldr.w	r3, [r5], #4
 800912a:	4798      	blx	r3
 800912c:	3601      	adds	r6, #1
 800912e:	e7f2      	b.n	8009116 <__libc_init_array+0x1e>
 8009130:	0800c1c4 	.word	0x0800c1c4
 8009134:	0800c1c4 	.word	0x0800c1c4
 8009138:	0800c1c4 	.word	0x0800c1c4
 800913c:	0800c1c8 	.word	0x0800c1c8

08009140 <__retarget_lock_init_recursive>:
 8009140:	4770      	bx	lr

08009142 <__retarget_lock_acquire_recursive>:
 8009142:	4770      	bx	lr

08009144 <__retarget_lock_release_recursive>:
 8009144:	4770      	bx	lr

08009146 <strcpy>:
 8009146:	4603      	mov	r3, r0
 8009148:	f811 2b01 	ldrb.w	r2, [r1], #1
 800914c:	f803 2b01 	strb.w	r2, [r3], #1
 8009150:	2a00      	cmp	r2, #0
 8009152:	d1f9      	bne.n	8009148 <strcpy+0x2>
 8009154:	4770      	bx	lr

08009156 <memcpy>:
 8009156:	440a      	add	r2, r1
 8009158:	4291      	cmp	r1, r2
 800915a:	f100 33ff 	add.w	r3, r0, #4294967295
 800915e:	d100      	bne.n	8009162 <memcpy+0xc>
 8009160:	4770      	bx	lr
 8009162:	b510      	push	{r4, lr}
 8009164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800916c:	4291      	cmp	r1, r2
 800916e:	d1f9      	bne.n	8009164 <memcpy+0xe>
 8009170:	bd10      	pop	{r4, pc}
 8009172:	0000      	movs	r0, r0
 8009174:	0000      	movs	r0, r0
	...

08009178 <nan>:
 8009178:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009180 <nan+0x8>
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	00000000 	.word	0x00000000
 8009184:	7ff80000 	.word	0x7ff80000

08009188 <_free_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4605      	mov	r5, r0
 800918c:	2900      	cmp	r1, #0
 800918e:	d041      	beq.n	8009214 <_free_r+0x8c>
 8009190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009194:	1f0c      	subs	r4, r1, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	bfb8      	it	lt
 800919a:	18e4      	addlt	r4, r4, r3
 800919c:	f7fe ff6e 	bl	800807c <__malloc_lock>
 80091a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009218 <_free_r+0x90>)
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	b933      	cbnz	r3, 80091b4 <_free_r+0x2c>
 80091a6:	6063      	str	r3, [r4, #4]
 80091a8:	6014      	str	r4, [r2, #0]
 80091aa:	4628      	mov	r0, r5
 80091ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b0:	f7fe bf6a 	b.w	8008088 <__malloc_unlock>
 80091b4:	42a3      	cmp	r3, r4
 80091b6:	d908      	bls.n	80091ca <_free_r+0x42>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	1821      	adds	r1, r4, r0
 80091bc:	428b      	cmp	r3, r1
 80091be:	bf01      	itttt	eq
 80091c0:	6819      	ldreq	r1, [r3, #0]
 80091c2:	685b      	ldreq	r3, [r3, #4]
 80091c4:	1809      	addeq	r1, r1, r0
 80091c6:	6021      	streq	r1, [r4, #0]
 80091c8:	e7ed      	b.n	80091a6 <_free_r+0x1e>
 80091ca:	461a      	mov	r2, r3
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	b10b      	cbz	r3, 80091d4 <_free_r+0x4c>
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	d9fa      	bls.n	80091ca <_free_r+0x42>
 80091d4:	6811      	ldr	r1, [r2, #0]
 80091d6:	1850      	adds	r0, r2, r1
 80091d8:	42a0      	cmp	r0, r4
 80091da:	d10b      	bne.n	80091f4 <_free_r+0x6c>
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	4401      	add	r1, r0
 80091e0:	1850      	adds	r0, r2, r1
 80091e2:	4283      	cmp	r3, r0
 80091e4:	6011      	str	r1, [r2, #0]
 80091e6:	d1e0      	bne.n	80091aa <_free_r+0x22>
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	6053      	str	r3, [r2, #4]
 80091ee:	4408      	add	r0, r1
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	e7da      	b.n	80091aa <_free_r+0x22>
 80091f4:	d902      	bls.n	80091fc <_free_r+0x74>
 80091f6:	230c      	movs	r3, #12
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	e7d6      	b.n	80091aa <_free_r+0x22>
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	1821      	adds	r1, r4, r0
 8009200:	428b      	cmp	r3, r1
 8009202:	bf04      	itt	eq
 8009204:	6819      	ldreq	r1, [r3, #0]
 8009206:	685b      	ldreq	r3, [r3, #4]
 8009208:	6063      	str	r3, [r4, #4]
 800920a:	bf04      	itt	eq
 800920c:	1809      	addeq	r1, r1, r0
 800920e:	6021      	streq	r1, [r4, #0]
 8009210:	6054      	str	r4, [r2, #4]
 8009212:	e7ca      	b.n	80091aa <_free_r+0x22>
 8009214:	bd38      	pop	{r3, r4, r5, pc}
 8009216:	bf00      	nop
 8009218:	20001aac 	.word	0x20001aac

0800921c <rshift>:
 800921c:	6903      	ldr	r3, [r0, #16]
 800921e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009226:	ea4f 1261 	mov.w	r2, r1, asr #5
 800922a:	f100 0414 	add.w	r4, r0, #20
 800922e:	dd45      	ble.n	80092bc <rshift+0xa0>
 8009230:	f011 011f 	ands.w	r1, r1, #31
 8009234:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009238:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800923c:	d10c      	bne.n	8009258 <rshift+0x3c>
 800923e:	f100 0710 	add.w	r7, r0, #16
 8009242:	4629      	mov	r1, r5
 8009244:	42b1      	cmp	r1, r6
 8009246:	d334      	bcc.n	80092b2 <rshift+0x96>
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	1eea      	subs	r2, r5, #3
 800924e:	4296      	cmp	r6, r2
 8009250:	bf38      	it	cc
 8009252:	2300      	movcc	r3, #0
 8009254:	4423      	add	r3, r4
 8009256:	e015      	b.n	8009284 <rshift+0x68>
 8009258:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800925c:	f1c1 0820 	rsb	r8, r1, #32
 8009260:	40cf      	lsrs	r7, r1
 8009262:	f105 0e04 	add.w	lr, r5, #4
 8009266:	46a1      	mov	r9, r4
 8009268:	4576      	cmp	r6, lr
 800926a:	46f4      	mov	ip, lr
 800926c:	d815      	bhi.n	800929a <rshift+0x7e>
 800926e:	1a9a      	subs	r2, r3, r2
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	3a04      	subs	r2, #4
 8009274:	3501      	adds	r5, #1
 8009276:	42ae      	cmp	r6, r5
 8009278:	bf38      	it	cc
 800927a:	2200      	movcc	r2, #0
 800927c:	18a3      	adds	r3, r4, r2
 800927e:	50a7      	str	r7, [r4, r2]
 8009280:	b107      	cbz	r7, 8009284 <rshift+0x68>
 8009282:	3304      	adds	r3, #4
 8009284:	1b1a      	subs	r2, r3, r4
 8009286:	42a3      	cmp	r3, r4
 8009288:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800928c:	bf08      	it	eq
 800928e:	2300      	moveq	r3, #0
 8009290:	6102      	str	r2, [r0, #16]
 8009292:	bf08      	it	eq
 8009294:	6143      	streq	r3, [r0, #20]
 8009296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929a:	f8dc c000 	ldr.w	ip, [ip]
 800929e:	fa0c fc08 	lsl.w	ip, ip, r8
 80092a2:	ea4c 0707 	orr.w	r7, ip, r7
 80092a6:	f849 7b04 	str.w	r7, [r9], #4
 80092aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ae:	40cf      	lsrs	r7, r1
 80092b0:	e7da      	b.n	8009268 <rshift+0x4c>
 80092b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ba:	e7c3      	b.n	8009244 <rshift+0x28>
 80092bc:	4623      	mov	r3, r4
 80092be:	e7e1      	b.n	8009284 <rshift+0x68>

080092c0 <__hexdig_fun>:
 80092c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	d802      	bhi.n	80092ce <__hexdig_fun+0xe>
 80092c8:	3820      	subs	r0, #32
 80092ca:	b2c0      	uxtb	r0, r0
 80092cc:	4770      	bx	lr
 80092ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d801      	bhi.n	80092da <__hexdig_fun+0x1a>
 80092d6:	3847      	subs	r0, #71	@ 0x47
 80092d8:	e7f7      	b.n	80092ca <__hexdig_fun+0xa>
 80092da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d801      	bhi.n	80092e6 <__hexdig_fun+0x26>
 80092e2:	3827      	subs	r0, #39	@ 0x27
 80092e4:	e7f1      	b.n	80092ca <__hexdig_fun+0xa>
 80092e6:	2000      	movs	r0, #0
 80092e8:	4770      	bx	lr
	...

080092ec <__gethex>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	b085      	sub	sp, #20
 80092f2:	468a      	mov	sl, r1
 80092f4:	9302      	str	r3, [sp, #8]
 80092f6:	680b      	ldr	r3, [r1, #0]
 80092f8:	9001      	str	r0, [sp, #4]
 80092fa:	4690      	mov	r8, r2
 80092fc:	1c9c      	adds	r4, r3, #2
 80092fe:	46a1      	mov	r9, r4
 8009300:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009304:	2830      	cmp	r0, #48	@ 0x30
 8009306:	d0fa      	beq.n	80092fe <__gethex+0x12>
 8009308:	eba9 0303 	sub.w	r3, r9, r3
 800930c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009310:	f7ff ffd6 	bl	80092c0 <__hexdig_fun>
 8009314:	4605      	mov	r5, r0
 8009316:	2800      	cmp	r0, #0
 8009318:	d168      	bne.n	80093ec <__gethex+0x100>
 800931a:	49a0      	ldr	r1, [pc, #640]	@ (800959c <__gethex+0x2b0>)
 800931c:	2201      	movs	r2, #1
 800931e:	4648      	mov	r0, r9
 8009320:	f7ff fe66 	bl	8008ff0 <strncmp>
 8009324:	4607      	mov	r7, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d167      	bne.n	80093fa <__gethex+0x10e>
 800932a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800932e:	4626      	mov	r6, r4
 8009330:	f7ff ffc6 	bl	80092c0 <__hexdig_fun>
 8009334:	2800      	cmp	r0, #0
 8009336:	d062      	beq.n	80093fe <__gethex+0x112>
 8009338:	4623      	mov	r3, r4
 800933a:	7818      	ldrb	r0, [r3, #0]
 800933c:	2830      	cmp	r0, #48	@ 0x30
 800933e:	4699      	mov	r9, r3
 8009340:	f103 0301 	add.w	r3, r3, #1
 8009344:	d0f9      	beq.n	800933a <__gethex+0x4e>
 8009346:	f7ff ffbb 	bl	80092c0 <__hexdig_fun>
 800934a:	fab0 f580 	clz	r5, r0
 800934e:	096d      	lsrs	r5, r5, #5
 8009350:	f04f 0b01 	mov.w	fp, #1
 8009354:	464a      	mov	r2, r9
 8009356:	4616      	mov	r6, r2
 8009358:	3201      	adds	r2, #1
 800935a:	7830      	ldrb	r0, [r6, #0]
 800935c:	f7ff ffb0 	bl	80092c0 <__hexdig_fun>
 8009360:	2800      	cmp	r0, #0
 8009362:	d1f8      	bne.n	8009356 <__gethex+0x6a>
 8009364:	498d      	ldr	r1, [pc, #564]	@ (800959c <__gethex+0x2b0>)
 8009366:	2201      	movs	r2, #1
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff fe41 	bl	8008ff0 <strncmp>
 800936e:	2800      	cmp	r0, #0
 8009370:	d13f      	bne.n	80093f2 <__gethex+0x106>
 8009372:	b944      	cbnz	r4, 8009386 <__gethex+0x9a>
 8009374:	1c74      	adds	r4, r6, #1
 8009376:	4622      	mov	r2, r4
 8009378:	4616      	mov	r6, r2
 800937a:	3201      	adds	r2, #1
 800937c:	7830      	ldrb	r0, [r6, #0]
 800937e:	f7ff ff9f 	bl	80092c0 <__hexdig_fun>
 8009382:	2800      	cmp	r0, #0
 8009384:	d1f8      	bne.n	8009378 <__gethex+0x8c>
 8009386:	1ba4      	subs	r4, r4, r6
 8009388:	00a7      	lsls	r7, r4, #2
 800938a:	7833      	ldrb	r3, [r6, #0]
 800938c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009390:	2b50      	cmp	r3, #80	@ 0x50
 8009392:	d13e      	bne.n	8009412 <__gethex+0x126>
 8009394:	7873      	ldrb	r3, [r6, #1]
 8009396:	2b2b      	cmp	r3, #43	@ 0x2b
 8009398:	d033      	beq.n	8009402 <__gethex+0x116>
 800939a:	2b2d      	cmp	r3, #45	@ 0x2d
 800939c:	d034      	beq.n	8009408 <__gethex+0x11c>
 800939e:	1c71      	adds	r1, r6, #1
 80093a0:	2400      	movs	r4, #0
 80093a2:	7808      	ldrb	r0, [r1, #0]
 80093a4:	f7ff ff8c 	bl	80092c0 <__hexdig_fun>
 80093a8:	1e43      	subs	r3, r0, #1
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b18      	cmp	r3, #24
 80093ae:	d830      	bhi.n	8009412 <__gethex+0x126>
 80093b0:	f1a0 0210 	sub.w	r2, r0, #16
 80093b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093b8:	f7ff ff82 	bl	80092c0 <__hexdig_fun>
 80093bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80093c0:	fa5f fc8c 	uxtb.w	ip, ip
 80093c4:	f1bc 0f18 	cmp.w	ip, #24
 80093c8:	f04f 030a 	mov.w	r3, #10
 80093cc:	d91e      	bls.n	800940c <__gethex+0x120>
 80093ce:	b104      	cbz	r4, 80093d2 <__gethex+0xe6>
 80093d0:	4252      	negs	r2, r2
 80093d2:	4417      	add	r7, r2
 80093d4:	f8ca 1000 	str.w	r1, [sl]
 80093d8:	b1ed      	cbz	r5, 8009416 <__gethex+0x12a>
 80093da:	f1bb 0f00 	cmp.w	fp, #0
 80093de:	bf0c      	ite	eq
 80093e0:	2506      	moveq	r5, #6
 80093e2:	2500      	movne	r5, #0
 80093e4:	4628      	mov	r0, r5
 80093e6:	b005      	add	sp, #20
 80093e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ec:	2500      	movs	r5, #0
 80093ee:	462c      	mov	r4, r5
 80093f0:	e7b0      	b.n	8009354 <__gethex+0x68>
 80093f2:	2c00      	cmp	r4, #0
 80093f4:	d1c7      	bne.n	8009386 <__gethex+0x9a>
 80093f6:	4627      	mov	r7, r4
 80093f8:	e7c7      	b.n	800938a <__gethex+0x9e>
 80093fa:	464e      	mov	r6, r9
 80093fc:	462f      	mov	r7, r5
 80093fe:	2501      	movs	r5, #1
 8009400:	e7c3      	b.n	800938a <__gethex+0x9e>
 8009402:	2400      	movs	r4, #0
 8009404:	1cb1      	adds	r1, r6, #2
 8009406:	e7cc      	b.n	80093a2 <__gethex+0xb6>
 8009408:	2401      	movs	r4, #1
 800940a:	e7fb      	b.n	8009404 <__gethex+0x118>
 800940c:	fb03 0002 	mla	r0, r3, r2, r0
 8009410:	e7ce      	b.n	80093b0 <__gethex+0xc4>
 8009412:	4631      	mov	r1, r6
 8009414:	e7de      	b.n	80093d4 <__gethex+0xe8>
 8009416:	eba6 0309 	sub.w	r3, r6, r9
 800941a:	3b01      	subs	r3, #1
 800941c:	4629      	mov	r1, r5
 800941e:	2b07      	cmp	r3, #7
 8009420:	dc0a      	bgt.n	8009438 <__gethex+0x14c>
 8009422:	9801      	ldr	r0, [sp, #4]
 8009424:	f000 fa46 	bl	80098b4 <_Balloc>
 8009428:	4604      	mov	r4, r0
 800942a:	b940      	cbnz	r0, 800943e <__gethex+0x152>
 800942c:	4b5c      	ldr	r3, [pc, #368]	@ (80095a0 <__gethex+0x2b4>)
 800942e:	4602      	mov	r2, r0
 8009430:	21e4      	movs	r1, #228	@ 0xe4
 8009432:	485c      	ldr	r0, [pc, #368]	@ (80095a4 <__gethex+0x2b8>)
 8009434:	f001 fe3e 	bl	800b0b4 <__assert_func>
 8009438:	3101      	adds	r1, #1
 800943a:	105b      	asrs	r3, r3, #1
 800943c:	e7ef      	b.n	800941e <__gethex+0x132>
 800943e:	f100 0a14 	add.w	sl, r0, #20
 8009442:	2300      	movs	r3, #0
 8009444:	4655      	mov	r5, sl
 8009446:	469b      	mov	fp, r3
 8009448:	45b1      	cmp	r9, r6
 800944a:	d337      	bcc.n	80094bc <__gethex+0x1d0>
 800944c:	f845 bb04 	str.w	fp, [r5], #4
 8009450:	eba5 050a 	sub.w	r5, r5, sl
 8009454:	10ad      	asrs	r5, r5, #2
 8009456:	6125      	str	r5, [r4, #16]
 8009458:	4658      	mov	r0, fp
 800945a:	f000 fb1d 	bl	8009a98 <__hi0bits>
 800945e:	016d      	lsls	r5, r5, #5
 8009460:	f8d8 6000 	ldr.w	r6, [r8]
 8009464:	1a2d      	subs	r5, r5, r0
 8009466:	42b5      	cmp	r5, r6
 8009468:	dd54      	ble.n	8009514 <__gethex+0x228>
 800946a:	1bad      	subs	r5, r5, r6
 800946c:	4629      	mov	r1, r5
 800946e:	4620      	mov	r0, r4
 8009470:	f000 feb1 	bl	800a1d6 <__any_on>
 8009474:	4681      	mov	r9, r0
 8009476:	b178      	cbz	r0, 8009498 <__gethex+0x1ac>
 8009478:	1e6b      	subs	r3, r5, #1
 800947a:	1159      	asrs	r1, r3, #5
 800947c:	f003 021f 	and.w	r2, r3, #31
 8009480:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009484:	f04f 0901 	mov.w	r9, #1
 8009488:	fa09 f202 	lsl.w	r2, r9, r2
 800948c:	420a      	tst	r2, r1
 800948e:	d003      	beq.n	8009498 <__gethex+0x1ac>
 8009490:	454b      	cmp	r3, r9
 8009492:	dc36      	bgt.n	8009502 <__gethex+0x216>
 8009494:	f04f 0902 	mov.w	r9, #2
 8009498:	4629      	mov	r1, r5
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff febe 	bl	800921c <rshift>
 80094a0:	442f      	add	r7, r5
 80094a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094a6:	42bb      	cmp	r3, r7
 80094a8:	da42      	bge.n	8009530 <__gethex+0x244>
 80094aa:	9801      	ldr	r0, [sp, #4]
 80094ac:	4621      	mov	r1, r4
 80094ae:	f000 fa41 	bl	8009934 <_Bfree>
 80094b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094b4:	2300      	movs	r3, #0
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	25a3      	movs	r5, #163	@ 0xa3
 80094ba:	e793      	b.n	80093e4 <__gethex+0xf8>
 80094bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80094c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80094c2:	d012      	beq.n	80094ea <__gethex+0x1fe>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d104      	bne.n	80094d2 <__gethex+0x1e6>
 80094c8:	f845 bb04 	str.w	fp, [r5], #4
 80094cc:	f04f 0b00 	mov.w	fp, #0
 80094d0:	465b      	mov	r3, fp
 80094d2:	7830      	ldrb	r0, [r6, #0]
 80094d4:	9303      	str	r3, [sp, #12]
 80094d6:	f7ff fef3 	bl	80092c0 <__hexdig_fun>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	f000 000f 	and.w	r0, r0, #15
 80094e0:	4098      	lsls	r0, r3
 80094e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80094e6:	3304      	adds	r3, #4
 80094e8:	e7ae      	b.n	8009448 <__gethex+0x15c>
 80094ea:	45b1      	cmp	r9, r6
 80094ec:	d8ea      	bhi.n	80094c4 <__gethex+0x1d8>
 80094ee:	492b      	ldr	r1, [pc, #172]	@ (800959c <__gethex+0x2b0>)
 80094f0:	9303      	str	r3, [sp, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff fd7b 	bl	8008ff0 <strncmp>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d1e1      	bne.n	80094c4 <__gethex+0x1d8>
 8009500:	e7a2      	b.n	8009448 <__gethex+0x15c>
 8009502:	1ea9      	subs	r1, r5, #2
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fe66 	bl	800a1d6 <__any_on>
 800950a:	2800      	cmp	r0, #0
 800950c:	d0c2      	beq.n	8009494 <__gethex+0x1a8>
 800950e:	f04f 0903 	mov.w	r9, #3
 8009512:	e7c1      	b.n	8009498 <__gethex+0x1ac>
 8009514:	da09      	bge.n	800952a <__gethex+0x23e>
 8009516:	1b75      	subs	r5, r6, r5
 8009518:	4621      	mov	r1, r4
 800951a:	9801      	ldr	r0, [sp, #4]
 800951c:	462a      	mov	r2, r5
 800951e:	f000 fc21 	bl	8009d64 <__lshift>
 8009522:	1b7f      	subs	r7, r7, r5
 8009524:	4604      	mov	r4, r0
 8009526:	f100 0a14 	add.w	sl, r0, #20
 800952a:	f04f 0900 	mov.w	r9, #0
 800952e:	e7b8      	b.n	80094a2 <__gethex+0x1b6>
 8009530:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009534:	42bd      	cmp	r5, r7
 8009536:	dd6f      	ble.n	8009618 <__gethex+0x32c>
 8009538:	1bed      	subs	r5, r5, r7
 800953a:	42ae      	cmp	r6, r5
 800953c:	dc34      	bgt.n	80095a8 <__gethex+0x2bc>
 800953e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d022      	beq.n	800958c <__gethex+0x2a0>
 8009546:	2b03      	cmp	r3, #3
 8009548:	d024      	beq.n	8009594 <__gethex+0x2a8>
 800954a:	2b01      	cmp	r3, #1
 800954c:	d115      	bne.n	800957a <__gethex+0x28e>
 800954e:	42ae      	cmp	r6, r5
 8009550:	d113      	bne.n	800957a <__gethex+0x28e>
 8009552:	2e01      	cmp	r6, #1
 8009554:	d10b      	bne.n	800956e <__gethex+0x282>
 8009556:	9a02      	ldr	r2, [sp, #8]
 8009558:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	2301      	movs	r3, #1
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	f8ca 3000 	str.w	r3, [sl]
 8009566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009568:	2562      	movs	r5, #98	@ 0x62
 800956a:	601c      	str	r4, [r3, #0]
 800956c:	e73a      	b.n	80093e4 <__gethex+0xf8>
 800956e:	1e71      	subs	r1, r6, #1
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fe30 	bl	800a1d6 <__any_on>
 8009576:	2800      	cmp	r0, #0
 8009578:	d1ed      	bne.n	8009556 <__gethex+0x26a>
 800957a:	9801      	ldr	r0, [sp, #4]
 800957c:	4621      	mov	r1, r4
 800957e:	f000 f9d9 	bl	8009934 <_Bfree>
 8009582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009584:	2300      	movs	r3, #0
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	2550      	movs	r5, #80	@ 0x50
 800958a:	e72b      	b.n	80093e4 <__gethex+0xf8>
 800958c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f3      	bne.n	800957a <__gethex+0x28e>
 8009592:	e7e0      	b.n	8009556 <__gethex+0x26a>
 8009594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1dd      	bne.n	8009556 <__gethex+0x26a>
 800959a:	e7ee      	b.n	800957a <__gethex+0x28e>
 800959c:	0800bde4 	.word	0x0800bde4
 80095a0:	0800bf51 	.word	0x0800bf51
 80095a4:	0800bf62 	.word	0x0800bf62
 80095a8:	1e6f      	subs	r7, r5, #1
 80095aa:	f1b9 0f00 	cmp.w	r9, #0
 80095ae:	d130      	bne.n	8009612 <__gethex+0x326>
 80095b0:	b127      	cbz	r7, 80095bc <__gethex+0x2d0>
 80095b2:	4639      	mov	r1, r7
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 fe0e 	bl	800a1d6 <__any_on>
 80095ba:	4681      	mov	r9, r0
 80095bc:	117a      	asrs	r2, r7, #5
 80095be:	2301      	movs	r3, #1
 80095c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095c4:	f007 071f 	and.w	r7, r7, #31
 80095c8:	40bb      	lsls	r3, r7
 80095ca:	4213      	tst	r3, r2
 80095cc:	4629      	mov	r1, r5
 80095ce:	4620      	mov	r0, r4
 80095d0:	bf18      	it	ne
 80095d2:	f049 0902 	orrne.w	r9, r9, #2
 80095d6:	f7ff fe21 	bl	800921c <rshift>
 80095da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095de:	1b76      	subs	r6, r6, r5
 80095e0:	2502      	movs	r5, #2
 80095e2:	f1b9 0f00 	cmp.w	r9, #0
 80095e6:	d047      	beq.n	8009678 <__gethex+0x38c>
 80095e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d015      	beq.n	800961c <__gethex+0x330>
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d017      	beq.n	8009624 <__gethex+0x338>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d109      	bne.n	800960c <__gethex+0x320>
 80095f8:	f019 0f02 	tst.w	r9, #2
 80095fc:	d006      	beq.n	800960c <__gethex+0x320>
 80095fe:	f8da 3000 	ldr.w	r3, [sl]
 8009602:	ea49 0903 	orr.w	r9, r9, r3
 8009606:	f019 0f01 	tst.w	r9, #1
 800960a:	d10e      	bne.n	800962a <__gethex+0x33e>
 800960c:	f045 0510 	orr.w	r5, r5, #16
 8009610:	e032      	b.n	8009678 <__gethex+0x38c>
 8009612:	f04f 0901 	mov.w	r9, #1
 8009616:	e7d1      	b.n	80095bc <__gethex+0x2d0>
 8009618:	2501      	movs	r5, #1
 800961a:	e7e2      	b.n	80095e2 <__gethex+0x2f6>
 800961c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800961e:	f1c3 0301 	rsb	r3, r3, #1
 8009622:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0f0      	beq.n	800960c <__gethex+0x320>
 800962a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800962e:	f104 0314 	add.w	r3, r4, #20
 8009632:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009636:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800963a:	f04f 0c00 	mov.w	ip, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f853 2b04 	ldr.w	r2, [r3], #4
 8009644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009648:	d01b      	beq.n	8009682 <__gethex+0x396>
 800964a:	3201      	adds	r2, #1
 800964c:	6002      	str	r2, [r0, #0]
 800964e:	2d02      	cmp	r5, #2
 8009650:	f104 0314 	add.w	r3, r4, #20
 8009654:	d13c      	bne.n	80096d0 <__gethex+0x3e4>
 8009656:	f8d8 2000 	ldr.w	r2, [r8]
 800965a:	3a01      	subs	r2, #1
 800965c:	42b2      	cmp	r2, r6
 800965e:	d109      	bne.n	8009674 <__gethex+0x388>
 8009660:	1171      	asrs	r1, r6, #5
 8009662:	2201      	movs	r2, #1
 8009664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009668:	f006 061f 	and.w	r6, r6, #31
 800966c:	fa02 f606 	lsl.w	r6, r2, r6
 8009670:	421e      	tst	r6, r3
 8009672:	d13a      	bne.n	80096ea <__gethex+0x3fe>
 8009674:	f045 0520 	orr.w	r5, r5, #32
 8009678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967a:	601c      	str	r4, [r3, #0]
 800967c:	9b02      	ldr	r3, [sp, #8]
 800967e:	601f      	str	r7, [r3, #0]
 8009680:	e6b0      	b.n	80093e4 <__gethex+0xf8>
 8009682:	4299      	cmp	r1, r3
 8009684:	f843 cc04 	str.w	ip, [r3, #-4]
 8009688:	d8d9      	bhi.n	800963e <__gethex+0x352>
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	459b      	cmp	fp, r3
 800968e:	db17      	blt.n	80096c0 <__gethex+0x3d4>
 8009690:	6861      	ldr	r1, [r4, #4]
 8009692:	9801      	ldr	r0, [sp, #4]
 8009694:	3101      	adds	r1, #1
 8009696:	f000 f90d 	bl	80098b4 <_Balloc>
 800969a:	4681      	mov	r9, r0
 800969c:	b918      	cbnz	r0, 80096a6 <__gethex+0x3ba>
 800969e:	4b1a      	ldr	r3, [pc, #104]	@ (8009708 <__gethex+0x41c>)
 80096a0:	4602      	mov	r2, r0
 80096a2:	2184      	movs	r1, #132	@ 0x84
 80096a4:	e6c5      	b.n	8009432 <__gethex+0x146>
 80096a6:	6922      	ldr	r2, [r4, #16]
 80096a8:	3202      	adds	r2, #2
 80096aa:	f104 010c 	add.w	r1, r4, #12
 80096ae:	0092      	lsls	r2, r2, #2
 80096b0:	300c      	adds	r0, #12
 80096b2:	f7ff fd50 	bl	8009156 <memcpy>
 80096b6:	4621      	mov	r1, r4
 80096b8:	9801      	ldr	r0, [sp, #4]
 80096ba:	f000 f93b 	bl	8009934 <_Bfree>
 80096be:	464c      	mov	r4, r9
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096c8:	6122      	str	r2, [r4, #16]
 80096ca:	2201      	movs	r2, #1
 80096cc:	615a      	str	r2, [r3, #20]
 80096ce:	e7be      	b.n	800964e <__gethex+0x362>
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	455a      	cmp	r2, fp
 80096d4:	dd0b      	ble.n	80096ee <__gethex+0x402>
 80096d6:	2101      	movs	r1, #1
 80096d8:	4620      	mov	r0, r4
 80096da:	f7ff fd9f 	bl	800921c <rshift>
 80096de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096e2:	3701      	adds	r7, #1
 80096e4:	42bb      	cmp	r3, r7
 80096e6:	f6ff aee0 	blt.w	80094aa <__gethex+0x1be>
 80096ea:	2501      	movs	r5, #1
 80096ec:	e7c2      	b.n	8009674 <__gethex+0x388>
 80096ee:	f016 061f 	ands.w	r6, r6, #31
 80096f2:	d0fa      	beq.n	80096ea <__gethex+0x3fe>
 80096f4:	4453      	add	r3, sl
 80096f6:	f1c6 0620 	rsb	r6, r6, #32
 80096fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096fe:	f000 f9cb 	bl	8009a98 <__hi0bits>
 8009702:	42b0      	cmp	r0, r6
 8009704:	dbe7      	blt.n	80096d6 <__gethex+0x3ea>
 8009706:	e7f0      	b.n	80096ea <__gethex+0x3fe>
 8009708:	0800bf51 	.word	0x0800bf51

0800970c <L_shift>:
 800970c:	f1c2 0208 	rsb	r2, r2, #8
 8009710:	0092      	lsls	r2, r2, #2
 8009712:	b570      	push	{r4, r5, r6, lr}
 8009714:	f1c2 0620 	rsb	r6, r2, #32
 8009718:	6843      	ldr	r3, [r0, #4]
 800971a:	6804      	ldr	r4, [r0, #0]
 800971c:	fa03 f506 	lsl.w	r5, r3, r6
 8009720:	432c      	orrs	r4, r5
 8009722:	40d3      	lsrs	r3, r2
 8009724:	6004      	str	r4, [r0, #0]
 8009726:	f840 3f04 	str.w	r3, [r0, #4]!
 800972a:	4288      	cmp	r0, r1
 800972c:	d3f4      	bcc.n	8009718 <L_shift+0xc>
 800972e:	bd70      	pop	{r4, r5, r6, pc}

08009730 <__match>:
 8009730:	b530      	push	{r4, r5, lr}
 8009732:	6803      	ldr	r3, [r0, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973a:	b914      	cbnz	r4, 8009742 <__match+0x12>
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	2001      	movs	r0, #1
 8009740:	bd30      	pop	{r4, r5, pc}
 8009742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009746:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800974a:	2d19      	cmp	r5, #25
 800974c:	bf98      	it	ls
 800974e:	3220      	addls	r2, #32
 8009750:	42a2      	cmp	r2, r4
 8009752:	d0f0      	beq.n	8009736 <__match+0x6>
 8009754:	2000      	movs	r0, #0
 8009756:	e7f3      	b.n	8009740 <__match+0x10>

08009758 <__hexnan>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	680b      	ldr	r3, [r1, #0]
 800975e:	6801      	ldr	r1, [r0, #0]
 8009760:	115e      	asrs	r6, r3, #5
 8009762:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009766:	f013 031f 	ands.w	r3, r3, #31
 800976a:	b087      	sub	sp, #28
 800976c:	bf18      	it	ne
 800976e:	3604      	addne	r6, #4
 8009770:	2500      	movs	r5, #0
 8009772:	1f37      	subs	r7, r6, #4
 8009774:	4682      	mov	sl, r0
 8009776:	4690      	mov	r8, r2
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	f846 5c04 	str.w	r5, [r6, #-4]
 800977e:	46b9      	mov	r9, r7
 8009780:	463c      	mov	r4, r7
 8009782:	9502      	str	r5, [sp, #8]
 8009784:	46ab      	mov	fp, r5
 8009786:	784a      	ldrb	r2, [r1, #1]
 8009788:	1c4b      	adds	r3, r1, #1
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	b342      	cbz	r2, 80097e0 <__hexnan+0x88>
 800978e:	4610      	mov	r0, r2
 8009790:	9105      	str	r1, [sp, #20]
 8009792:	9204      	str	r2, [sp, #16]
 8009794:	f7ff fd94 	bl	80092c0 <__hexdig_fun>
 8009798:	2800      	cmp	r0, #0
 800979a:	d151      	bne.n	8009840 <__hexnan+0xe8>
 800979c:	9a04      	ldr	r2, [sp, #16]
 800979e:	9905      	ldr	r1, [sp, #20]
 80097a0:	2a20      	cmp	r2, #32
 80097a2:	d818      	bhi.n	80097d6 <__hexnan+0x7e>
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	459b      	cmp	fp, r3
 80097a8:	dd13      	ble.n	80097d2 <__hexnan+0x7a>
 80097aa:	454c      	cmp	r4, r9
 80097ac:	d206      	bcs.n	80097bc <__hexnan+0x64>
 80097ae:	2d07      	cmp	r5, #7
 80097b0:	dc04      	bgt.n	80097bc <__hexnan+0x64>
 80097b2:	462a      	mov	r2, r5
 80097b4:	4649      	mov	r1, r9
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7ff ffa8 	bl	800970c <L_shift>
 80097bc:	4544      	cmp	r4, r8
 80097be:	d952      	bls.n	8009866 <__hexnan+0x10e>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f1a4 0904 	sub.w	r9, r4, #4
 80097c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ca:	f8cd b008 	str.w	fp, [sp, #8]
 80097ce:	464c      	mov	r4, r9
 80097d0:	461d      	mov	r5, r3
 80097d2:	9903      	ldr	r1, [sp, #12]
 80097d4:	e7d7      	b.n	8009786 <__hexnan+0x2e>
 80097d6:	2a29      	cmp	r2, #41	@ 0x29
 80097d8:	d157      	bne.n	800988a <__hexnan+0x132>
 80097da:	3102      	adds	r1, #2
 80097dc:	f8ca 1000 	str.w	r1, [sl]
 80097e0:	f1bb 0f00 	cmp.w	fp, #0
 80097e4:	d051      	beq.n	800988a <__hexnan+0x132>
 80097e6:	454c      	cmp	r4, r9
 80097e8:	d206      	bcs.n	80097f8 <__hexnan+0xa0>
 80097ea:	2d07      	cmp	r5, #7
 80097ec:	dc04      	bgt.n	80097f8 <__hexnan+0xa0>
 80097ee:	462a      	mov	r2, r5
 80097f0:	4649      	mov	r1, r9
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff ff8a 	bl	800970c <L_shift>
 80097f8:	4544      	cmp	r4, r8
 80097fa:	d936      	bls.n	800986a <__hexnan+0x112>
 80097fc:	f1a8 0204 	sub.w	r2, r8, #4
 8009800:	4623      	mov	r3, r4
 8009802:	f853 1b04 	ldr.w	r1, [r3], #4
 8009806:	f842 1f04 	str.w	r1, [r2, #4]!
 800980a:	429f      	cmp	r7, r3
 800980c:	d2f9      	bcs.n	8009802 <__hexnan+0xaa>
 800980e:	1b3b      	subs	r3, r7, r4
 8009810:	f023 0303 	bic.w	r3, r3, #3
 8009814:	3304      	adds	r3, #4
 8009816:	3401      	adds	r4, #1
 8009818:	3e03      	subs	r6, #3
 800981a:	42b4      	cmp	r4, r6
 800981c:	bf88      	it	hi
 800981e:	2304      	movhi	r3, #4
 8009820:	4443      	add	r3, r8
 8009822:	2200      	movs	r2, #0
 8009824:	f843 2b04 	str.w	r2, [r3], #4
 8009828:	429f      	cmp	r7, r3
 800982a:	d2fb      	bcs.n	8009824 <__hexnan+0xcc>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	b91b      	cbnz	r3, 8009838 <__hexnan+0xe0>
 8009830:	4547      	cmp	r7, r8
 8009832:	d128      	bne.n	8009886 <__hexnan+0x12e>
 8009834:	2301      	movs	r3, #1
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	2005      	movs	r0, #5
 800983a:	b007      	add	sp, #28
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	3501      	adds	r5, #1
 8009842:	2d08      	cmp	r5, #8
 8009844:	f10b 0b01 	add.w	fp, fp, #1
 8009848:	dd06      	ble.n	8009858 <__hexnan+0x100>
 800984a:	4544      	cmp	r4, r8
 800984c:	d9c1      	bls.n	80097d2 <__hexnan+0x7a>
 800984e:	2300      	movs	r3, #0
 8009850:	f844 3c04 	str.w	r3, [r4, #-4]
 8009854:	2501      	movs	r5, #1
 8009856:	3c04      	subs	r4, #4
 8009858:	6822      	ldr	r2, [r4, #0]
 800985a:	f000 000f 	and.w	r0, r0, #15
 800985e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009862:	6020      	str	r0, [r4, #0]
 8009864:	e7b5      	b.n	80097d2 <__hexnan+0x7a>
 8009866:	2508      	movs	r5, #8
 8009868:	e7b3      	b.n	80097d2 <__hexnan+0x7a>
 800986a:	9b01      	ldr	r3, [sp, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0dd      	beq.n	800982c <__hexnan+0xd4>
 8009870:	f1c3 0320 	rsb	r3, r3, #32
 8009874:	f04f 32ff 	mov.w	r2, #4294967295
 8009878:	40da      	lsrs	r2, r3
 800987a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800987e:	4013      	ands	r3, r2
 8009880:	f846 3c04 	str.w	r3, [r6, #-4]
 8009884:	e7d2      	b.n	800982c <__hexnan+0xd4>
 8009886:	3f04      	subs	r7, #4
 8009888:	e7d0      	b.n	800982c <__hexnan+0xd4>
 800988a:	2004      	movs	r0, #4
 800988c:	e7d5      	b.n	800983a <__hexnan+0xe2>

0800988e <__ascii_mbtowc>:
 800988e:	b082      	sub	sp, #8
 8009890:	b901      	cbnz	r1, 8009894 <__ascii_mbtowc+0x6>
 8009892:	a901      	add	r1, sp, #4
 8009894:	b142      	cbz	r2, 80098a8 <__ascii_mbtowc+0x1a>
 8009896:	b14b      	cbz	r3, 80098ac <__ascii_mbtowc+0x1e>
 8009898:	7813      	ldrb	r3, [r2, #0]
 800989a:	600b      	str	r3, [r1, #0]
 800989c:	7812      	ldrb	r2, [r2, #0]
 800989e:	1e10      	subs	r0, r2, #0
 80098a0:	bf18      	it	ne
 80098a2:	2001      	movne	r0, #1
 80098a4:	b002      	add	sp, #8
 80098a6:	4770      	bx	lr
 80098a8:	4610      	mov	r0, r2
 80098aa:	e7fb      	b.n	80098a4 <__ascii_mbtowc+0x16>
 80098ac:	f06f 0001 	mvn.w	r0, #1
 80098b0:	e7f8      	b.n	80098a4 <__ascii_mbtowc+0x16>
	...

080098b4 <_Balloc>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	69c6      	ldr	r6, [r0, #28]
 80098b8:	4604      	mov	r4, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	b976      	cbnz	r6, 80098dc <_Balloc+0x28>
 80098be:	2010      	movs	r0, #16
 80098c0:	f7fe fb2a 	bl	8007f18 <malloc>
 80098c4:	4602      	mov	r2, r0
 80098c6:	61e0      	str	r0, [r4, #28]
 80098c8:	b920      	cbnz	r0, 80098d4 <_Balloc+0x20>
 80098ca:	4b18      	ldr	r3, [pc, #96]	@ (800992c <_Balloc+0x78>)
 80098cc:	4818      	ldr	r0, [pc, #96]	@ (8009930 <_Balloc+0x7c>)
 80098ce:	216b      	movs	r1, #107	@ 0x6b
 80098d0:	f001 fbf0 	bl	800b0b4 <__assert_func>
 80098d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d8:	6006      	str	r6, [r0, #0]
 80098da:	60c6      	str	r6, [r0, #12]
 80098dc:	69e6      	ldr	r6, [r4, #28]
 80098de:	68f3      	ldr	r3, [r6, #12]
 80098e0:	b183      	cbz	r3, 8009904 <_Balloc+0x50>
 80098e2:	69e3      	ldr	r3, [r4, #28]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098ea:	b9b8      	cbnz	r0, 800991c <_Balloc+0x68>
 80098ec:	2101      	movs	r1, #1
 80098ee:	fa01 f605 	lsl.w	r6, r1, r5
 80098f2:	1d72      	adds	r2, r6, #5
 80098f4:	0092      	lsls	r2, r2, #2
 80098f6:	4620      	mov	r0, r4
 80098f8:	f001 fbfa 	bl	800b0f0 <_calloc_r>
 80098fc:	b160      	cbz	r0, 8009918 <_Balloc+0x64>
 80098fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009902:	e00e      	b.n	8009922 <_Balloc+0x6e>
 8009904:	2221      	movs	r2, #33	@ 0x21
 8009906:	2104      	movs	r1, #4
 8009908:	4620      	mov	r0, r4
 800990a:	f001 fbf1 	bl	800b0f0 <_calloc_r>
 800990e:	69e3      	ldr	r3, [r4, #28]
 8009910:	60f0      	str	r0, [r6, #12]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e4      	bne.n	80098e2 <_Balloc+0x2e>
 8009918:	2000      	movs	r0, #0
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	6802      	ldr	r2, [r0, #0]
 800991e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009922:	2300      	movs	r3, #0
 8009924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009928:	e7f7      	b.n	800991a <_Balloc+0x66>
 800992a:	bf00      	nop
 800992c:	0800bfc2 	.word	0x0800bfc2
 8009930:	0800bfd9 	.word	0x0800bfd9

08009934 <_Bfree>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	69c6      	ldr	r6, [r0, #28]
 8009938:	4605      	mov	r5, r0
 800993a:	460c      	mov	r4, r1
 800993c:	b976      	cbnz	r6, 800995c <_Bfree+0x28>
 800993e:	2010      	movs	r0, #16
 8009940:	f7fe faea 	bl	8007f18 <malloc>
 8009944:	4602      	mov	r2, r0
 8009946:	61e8      	str	r0, [r5, #28]
 8009948:	b920      	cbnz	r0, 8009954 <_Bfree+0x20>
 800994a:	4b09      	ldr	r3, [pc, #36]	@ (8009970 <_Bfree+0x3c>)
 800994c:	4809      	ldr	r0, [pc, #36]	@ (8009974 <_Bfree+0x40>)
 800994e:	218f      	movs	r1, #143	@ 0x8f
 8009950:	f001 fbb0 	bl	800b0b4 <__assert_func>
 8009954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009958:	6006      	str	r6, [r0, #0]
 800995a:	60c6      	str	r6, [r0, #12]
 800995c:	b13c      	cbz	r4, 800996e <_Bfree+0x3a>
 800995e:	69eb      	ldr	r3, [r5, #28]
 8009960:	6862      	ldr	r2, [r4, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009968:	6021      	str	r1, [r4, #0]
 800996a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	0800bfc2 	.word	0x0800bfc2
 8009974:	0800bfd9 	.word	0x0800bfd9

08009978 <__multadd>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	690d      	ldr	r5, [r1, #16]
 800997e:	4607      	mov	r7, r0
 8009980:	460c      	mov	r4, r1
 8009982:	461e      	mov	r6, r3
 8009984:	f101 0c14 	add.w	ip, r1, #20
 8009988:	2000      	movs	r0, #0
 800998a:	f8dc 3000 	ldr.w	r3, [ip]
 800998e:	b299      	uxth	r1, r3
 8009990:	fb02 6101 	mla	r1, r2, r1, r6
 8009994:	0c1e      	lsrs	r6, r3, #16
 8009996:	0c0b      	lsrs	r3, r1, #16
 8009998:	fb02 3306 	mla	r3, r2, r6, r3
 800999c:	b289      	uxth	r1, r1
 800999e:	3001      	adds	r0, #1
 80099a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099a4:	4285      	cmp	r5, r0
 80099a6:	f84c 1b04 	str.w	r1, [ip], #4
 80099aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ae:	dcec      	bgt.n	800998a <__multadd+0x12>
 80099b0:	b30e      	cbz	r6, 80099f6 <__multadd+0x7e>
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	42ab      	cmp	r3, r5
 80099b6:	dc19      	bgt.n	80099ec <__multadd+0x74>
 80099b8:	6861      	ldr	r1, [r4, #4]
 80099ba:	4638      	mov	r0, r7
 80099bc:	3101      	adds	r1, #1
 80099be:	f7ff ff79 	bl	80098b4 <_Balloc>
 80099c2:	4680      	mov	r8, r0
 80099c4:	b928      	cbnz	r0, 80099d2 <__multadd+0x5a>
 80099c6:	4602      	mov	r2, r0
 80099c8:	4b0c      	ldr	r3, [pc, #48]	@ (80099fc <__multadd+0x84>)
 80099ca:	480d      	ldr	r0, [pc, #52]	@ (8009a00 <__multadd+0x88>)
 80099cc:	21ba      	movs	r1, #186	@ 0xba
 80099ce:	f001 fb71 	bl	800b0b4 <__assert_func>
 80099d2:	6922      	ldr	r2, [r4, #16]
 80099d4:	3202      	adds	r2, #2
 80099d6:	f104 010c 	add.w	r1, r4, #12
 80099da:	0092      	lsls	r2, r2, #2
 80099dc:	300c      	adds	r0, #12
 80099de:	f7ff fbba 	bl	8009156 <memcpy>
 80099e2:	4621      	mov	r1, r4
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff ffa5 	bl	8009934 <_Bfree>
 80099ea:	4644      	mov	r4, r8
 80099ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099f0:	3501      	adds	r5, #1
 80099f2:	615e      	str	r6, [r3, #20]
 80099f4:	6125      	str	r5, [r4, #16]
 80099f6:	4620      	mov	r0, r4
 80099f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099fc:	0800bf51 	.word	0x0800bf51
 8009a00:	0800bfd9 	.word	0x0800bfd9

08009a04 <__s2b>:
 8009a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a08:	460c      	mov	r4, r1
 8009a0a:	4615      	mov	r5, r2
 8009a0c:	461f      	mov	r7, r3
 8009a0e:	2209      	movs	r2, #9
 8009a10:	3308      	adds	r3, #8
 8009a12:	4606      	mov	r6, r0
 8009a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	db09      	blt.n	8009a34 <__s2b+0x30>
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff ff47 	bl	80098b4 <_Balloc>
 8009a26:	b940      	cbnz	r0, 8009a3a <__s2b+0x36>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	4b19      	ldr	r3, [pc, #100]	@ (8009a90 <__s2b+0x8c>)
 8009a2c:	4819      	ldr	r0, [pc, #100]	@ (8009a94 <__s2b+0x90>)
 8009a2e:	21d3      	movs	r1, #211	@ 0xd3
 8009a30:	f001 fb40 	bl	800b0b4 <__assert_func>
 8009a34:	0052      	lsls	r2, r2, #1
 8009a36:	3101      	adds	r1, #1
 8009a38:	e7f0      	b.n	8009a1c <__s2b+0x18>
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	6143      	str	r3, [r0, #20]
 8009a3e:	2d09      	cmp	r5, #9
 8009a40:	f04f 0301 	mov.w	r3, #1
 8009a44:	6103      	str	r3, [r0, #16]
 8009a46:	dd16      	ble.n	8009a76 <__s2b+0x72>
 8009a48:	f104 0909 	add.w	r9, r4, #9
 8009a4c:	46c8      	mov	r8, r9
 8009a4e:	442c      	add	r4, r5
 8009a50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a54:	4601      	mov	r1, r0
 8009a56:	3b30      	subs	r3, #48	@ 0x30
 8009a58:	220a      	movs	r2, #10
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff8c 	bl	8009978 <__multadd>
 8009a60:	45a0      	cmp	r8, r4
 8009a62:	d1f5      	bne.n	8009a50 <__s2b+0x4c>
 8009a64:	f1a5 0408 	sub.w	r4, r5, #8
 8009a68:	444c      	add	r4, r9
 8009a6a:	1b2d      	subs	r5, r5, r4
 8009a6c:	1963      	adds	r3, r4, r5
 8009a6e:	42bb      	cmp	r3, r7
 8009a70:	db04      	blt.n	8009a7c <__s2b+0x78>
 8009a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a76:	340a      	adds	r4, #10
 8009a78:	2509      	movs	r5, #9
 8009a7a:	e7f6      	b.n	8009a6a <__s2b+0x66>
 8009a7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a80:	4601      	mov	r1, r0
 8009a82:	3b30      	subs	r3, #48	@ 0x30
 8009a84:	220a      	movs	r2, #10
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff ff76 	bl	8009978 <__multadd>
 8009a8c:	e7ee      	b.n	8009a6c <__s2b+0x68>
 8009a8e:	bf00      	nop
 8009a90:	0800bf51 	.word	0x0800bf51
 8009a94:	0800bfd9 	.word	0x0800bfd9

08009a98 <__hi0bits>:
 8009a98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	bf36      	itet	cc
 8009aa0:	0403      	lslcc	r3, r0, #16
 8009aa2:	2000      	movcs	r0, #0
 8009aa4:	2010      	movcc	r0, #16
 8009aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aaa:	bf3c      	itt	cc
 8009aac:	021b      	lslcc	r3, r3, #8
 8009aae:	3008      	addcc	r0, #8
 8009ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ab4:	bf3c      	itt	cc
 8009ab6:	011b      	lslcc	r3, r3, #4
 8009ab8:	3004      	addcc	r0, #4
 8009aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009abe:	bf3c      	itt	cc
 8009ac0:	009b      	lslcc	r3, r3, #2
 8009ac2:	3002      	addcc	r0, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	db05      	blt.n	8009ad4 <__hi0bits+0x3c>
 8009ac8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009acc:	f100 0001 	add.w	r0, r0, #1
 8009ad0:	bf08      	it	eq
 8009ad2:	2020      	moveq	r0, #32
 8009ad4:	4770      	bx	lr

08009ad6 <__lo0bits>:
 8009ad6:	6803      	ldr	r3, [r0, #0]
 8009ad8:	4602      	mov	r2, r0
 8009ada:	f013 0007 	ands.w	r0, r3, #7
 8009ade:	d00b      	beq.n	8009af8 <__lo0bits+0x22>
 8009ae0:	07d9      	lsls	r1, r3, #31
 8009ae2:	d421      	bmi.n	8009b28 <__lo0bits+0x52>
 8009ae4:	0798      	lsls	r0, r3, #30
 8009ae6:	bf49      	itett	mi
 8009ae8:	085b      	lsrmi	r3, r3, #1
 8009aea:	089b      	lsrpl	r3, r3, #2
 8009aec:	2001      	movmi	r0, #1
 8009aee:	6013      	strmi	r3, [r2, #0]
 8009af0:	bf5c      	itt	pl
 8009af2:	6013      	strpl	r3, [r2, #0]
 8009af4:	2002      	movpl	r0, #2
 8009af6:	4770      	bx	lr
 8009af8:	b299      	uxth	r1, r3
 8009afa:	b909      	cbnz	r1, 8009b00 <__lo0bits+0x2a>
 8009afc:	0c1b      	lsrs	r3, r3, #16
 8009afe:	2010      	movs	r0, #16
 8009b00:	b2d9      	uxtb	r1, r3
 8009b02:	b909      	cbnz	r1, 8009b08 <__lo0bits+0x32>
 8009b04:	3008      	adds	r0, #8
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	0719      	lsls	r1, r3, #28
 8009b0a:	bf04      	itt	eq
 8009b0c:	091b      	lsreq	r3, r3, #4
 8009b0e:	3004      	addeq	r0, #4
 8009b10:	0799      	lsls	r1, r3, #30
 8009b12:	bf04      	itt	eq
 8009b14:	089b      	lsreq	r3, r3, #2
 8009b16:	3002      	addeq	r0, #2
 8009b18:	07d9      	lsls	r1, r3, #31
 8009b1a:	d403      	bmi.n	8009b24 <__lo0bits+0x4e>
 8009b1c:	085b      	lsrs	r3, r3, #1
 8009b1e:	f100 0001 	add.w	r0, r0, #1
 8009b22:	d003      	beq.n	8009b2c <__lo0bits+0x56>
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	4770      	bx	lr
 8009b28:	2000      	movs	r0, #0
 8009b2a:	4770      	bx	lr
 8009b2c:	2020      	movs	r0, #32
 8009b2e:	4770      	bx	lr

08009b30 <__i2b>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	460c      	mov	r4, r1
 8009b34:	2101      	movs	r1, #1
 8009b36:	f7ff febd 	bl	80098b4 <_Balloc>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	b928      	cbnz	r0, 8009b4a <__i2b+0x1a>
 8009b3e:	4b05      	ldr	r3, [pc, #20]	@ (8009b54 <__i2b+0x24>)
 8009b40:	4805      	ldr	r0, [pc, #20]	@ (8009b58 <__i2b+0x28>)
 8009b42:	f240 1145 	movw	r1, #325	@ 0x145
 8009b46:	f001 fab5 	bl	800b0b4 <__assert_func>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	6144      	str	r4, [r0, #20]
 8009b4e:	6103      	str	r3, [r0, #16]
 8009b50:	bd10      	pop	{r4, pc}
 8009b52:	bf00      	nop
 8009b54:	0800bf51 	.word	0x0800bf51
 8009b58:	0800bfd9 	.word	0x0800bfd9

08009b5c <__multiply>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	4614      	mov	r4, r2
 8009b62:	690a      	ldr	r2, [r1, #16]
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	bfa8      	it	ge
 8009b6a:	4623      	movge	r3, r4
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	bfa4      	itt	ge
 8009b70:	460c      	movge	r4, r1
 8009b72:	461f      	movge	r7, r3
 8009b74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b7c:	68a3      	ldr	r3, [r4, #8]
 8009b7e:	6861      	ldr	r1, [r4, #4]
 8009b80:	eb0a 0609 	add.w	r6, sl, r9
 8009b84:	42b3      	cmp	r3, r6
 8009b86:	b085      	sub	sp, #20
 8009b88:	bfb8      	it	lt
 8009b8a:	3101      	addlt	r1, #1
 8009b8c:	f7ff fe92 	bl	80098b4 <_Balloc>
 8009b90:	b930      	cbnz	r0, 8009ba0 <__multiply+0x44>
 8009b92:	4602      	mov	r2, r0
 8009b94:	4b44      	ldr	r3, [pc, #272]	@ (8009ca8 <__multiply+0x14c>)
 8009b96:	4845      	ldr	r0, [pc, #276]	@ (8009cac <__multiply+0x150>)
 8009b98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b9c:	f001 fa8a 	bl	800b0b4 <__assert_func>
 8009ba0:	f100 0514 	add.w	r5, r0, #20
 8009ba4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ba8:	462b      	mov	r3, r5
 8009baa:	2200      	movs	r2, #0
 8009bac:	4543      	cmp	r3, r8
 8009bae:	d321      	bcc.n	8009bf4 <__multiply+0x98>
 8009bb0:	f107 0114 	add.w	r1, r7, #20
 8009bb4:	f104 0214 	add.w	r2, r4, #20
 8009bb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009bbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009bc0:	9302      	str	r3, [sp, #8]
 8009bc2:	1b13      	subs	r3, r2, r4
 8009bc4:	3b15      	subs	r3, #21
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	3304      	adds	r3, #4
 8009bcc:	f104 0715 	add.w	r7, r4, #21
 8009bd0:	42ba      	cmp	r2, r7
 8009bd2:	bf38      	it	cc
 8009bd4:	2304      	movcc	r3, #4
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	9b02      	ldr	r3, [sp, #8]
 8009bda:	9103      	str	r1, [sp, #12]
 8009bdc:	428b      	cmp	r3, r1
 8009bde:	d80c      	bhi.n	8009bfa <__multiply+0x9e>
 8009be0:	2e00      	cmp	r6, #0
 8009be2:	dd03      	ble.n	8009bec <__multiply+0x90>
 8009be4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d05b      	beq.n	8009ca4 <__multiply+0x148>
 8009bec:	6106      	str	r6, [r0, #16]
 8009bee:	b005      	add	sp, #20
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	f843 2b04 	str.w	r2, [r3], #4
 8009bf8:	e7d8      	b.n	8009bac <__multiply+0x50>
 8009bfa:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bfe:	f1ba 0f00 	cmp.w	sl, #0
 8009c02:	d024      	beq.n	8009c4e <__multiply+0xf2>
 8009c04:	f104 0e14 	add.w	lr, r4, #20
 8009c08:	46a9      	mov	r9, r5
 8009c0a:	f04f 0c00 	mov.w	ip, #0
 8009c0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c12:	f8d9 3000 	ldr.w	r3, [r9]
 8009c16:	fa1f fb87 	uxth.w	fp, r7
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009c24:	f8d9 7000 	ldr.w	r7, [r9]
 8009c28:	4463      	add	r3, ip
 8009c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c2e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009c32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c3c:	4572      	cmp	r2, lr
 8009c3e:	f849 3b04 	str.w	r3, [r9], #4
 8009c42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c46:	d8e2      	bhi.n	8009c0e <__multiply+0xb2>
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	f845 c003 	str.w	ip, [r5, r3]
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c54:	3104      	adds	r1, #4
 8009c56:	f1b9 0f00 	cmp.w	r9, #0
 8009c5a:	d021      	beq.n	8009ca0 <__multiply+0x144>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	f104 0c14 	add.w	ip, r4, #20
 8009c62:	46ae      	mov	lr, r5
 8009c64:	f04f 0a00 	mov.w	sl, #0
 8009c68:	f8bc b000 	ldrh.w	fp, [ip]
 8009c6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c70:	fb09 770b 	mla	r7, r9, fp, r7
 8009c74:	4457      	add	r7, sl
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c7c:	f84e 3b04 	str.w	r3, [lr], #4
 8009c80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c88:	f8be 3000 	ldrh.w	r3, [lr]
 8009c8c:	fb09 330a 	mla	r3, r9, sl, r3
 8009c90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c94:	4562      	cmp	r2, ip
 8009c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c9a:	d8e5      	bhi.n	8009c68 <__multiply+0x10c>
 8009c9c:	9f01      	ldr	r7, [sp, #4]
 8009c9e:	51eb      	str	r3, [r5, r7]
 8009ca0:	3504      	adds	r5, #4
 8009ca2:	e799      	b.n	8009bd8 <__multiply+0x7c>
 8009ca4:	3e01      	subs	r6, #1
 8009ca6:	e79b      	b.n	8009be0 <__multiply+0x84>
 8009ca8:	0800bf51 	.word	0x0800bf51
 8009cac:	0800bfd9 	.word	0x0800bfd9

08009cb0 <__pow5mult>:
 8009cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb4:	4615      	mov	r5, r2
 8009cb6:	f012 0203 	ands.w	r2, r2, #3
 8009cba:	4607      	mov	r7, r0
 8009cbc:	460e      	mov	r6, r1
 8009cbe:	d007      	beq.n	8009cd0 <__pow5mult+0x20>
 8009cc0:	4c25      	ldr	r4, [pc, #148]	@ (8009d58 <__pow5mult+0xa8>)
 8009cc2:	3a01      	subs	r2, #1
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cca:	f7ff fe55 	bl	8009978 <__multadd>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	10ad      	asrs	r5, r5, #2
 8009cd2:	d03d      	beq.n	8009d50 <__pow5mult+0xa0>
 8009cd4:	69fc      	ldr	r4, [r7, #28]
 8009cd6:	b97c      	cbnz	r4, 8009cf8 <__pow5mult+0x48>
 8009cd8:	2010      	movs	r0, #16
 8009cda:	f7fe f91d 	bl	8007f18 <malloc>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	61f8      	str	r0, [r7, #28]
 8009ce2:	b928      	cbnz	r0, 8009cf0 <__pow5mult+0x40>
 8009ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d5c <__pow5mult+0xac>)
 8009ce6:	481e      	ldr	r0, [pc, #120]	@ (8009d60 <__pow5mult+0xb0>)
 8009ce8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009cec:	f001 f9e2 	bl	800b0b4 <__assert_func>
 8009cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cf4:	6004      	str	r4, [r0, #0]
 8009cf6:	60c4      	str	r4, [r0, #12]
 8009cf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d00:	b94c      	cbnz	r4, 8009d16 <__pow5mult+0x66>
 8009d02:	f240 2171 	movw	r1, #625	@ 0x271
 8009d06:	4638      	mov	r0, r7
 8009d08:	f7ff ff12 	bl	8009b30 <__i2b>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d12:	4604      	mov	r4, r0
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	f04f 0900 	mov.w	r9, #0
 8009d1a:	07eb      	lsls	r3, r5, #31
 8009d1c:	d50a      	bpl.n	8009d34 <__pow5mult+0x84>
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4622      	mov	r2, r4
 8009d22:	4638      	mov	r0, r7
 8009d24:	f7ff ff1a 	bl	8009b5c <__multiply>
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4680      	mov	r8, r0
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f7ff fe01 	bl	8009934 <_Bfree>
 8009d32:	4646      	mov	r6, r8
 8009d34:	106d      	asrs	r5, r5, #1
 8009d36:	d00b      	beq.n	8009d50 <__pow5mult+0xa0>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	b938      	cbnz	r0, 8009d4c <__pow5mult+0x9c>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7ff ff0b 	bl	8009b5c <__multiply>
 8009d46:	6020      	str	r0, [r4, #0]
 8009d48:	f8c0 9000 	str.w	r9, [r0]
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	e7e4      	b.n	8009d1a <__pow5mult+0x6a>
 8009d50:	4630      	mov	r0, r6
 8009d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d56:	bf00      	nop
 8009d58:	0800c034 	.word	0x0800c034
 8009d5c:	0800bfc2 	.word	0x0800bfc2
 8009d60:	0800bfd9 	.word	0x0800bfd9

08009d64 <__lshift>:
 8009d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d68:	460c      	mov	r4, r1
 8009d6a:	6849      	ldr	r1, [r1, #4]
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	4607      	mov	r7, r0
 8009d76:	4691      	mov	r9, r2
 8009d78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d7c:	f108 0601 	add.w	r6, r8, #1
 8009d80:	42b3      	cmp	r3, r6
 8009d82:	db0b      	blt.n	8009d9c <__lshift+0x38>
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7ff fd95 	bl	80098b4 <_Balloc>
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	b948      	cbnz	r0, 8009da2 <__lshift+0x3e>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	4b28      	ldr	r3, [pc, #160]	@ (8009e34 <__lshift+0xd0>)
 8009d92:	4829      	ldr	r0, [pc, #164]	@ (8009e38 <__lshift+0xd4>)
 8009d94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d98:	f001 f98c 	bl	800b0b4 <__assert_func>
 8009d9c:	3101      	adds	r1, #1
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	e7ee      	b.n	8009d80 <__lshift+0x1c>
 8009da2:	2300      	movs	r3, #0
 8009da4:	f100 0114 	add.w	r1, r0, #20
 8009da8:	f100 0210 	add.w	r2, r0, #16
 8009dac:	4618      	mov	r0, r3
 8009dae:	4553      	cmp	r3, sl
 8009db0:	db33      	blt.n	8009e1a <__lshift+0xb6>
 8009db2:	6920      	ldr	r0, [r4, #16]
 8009db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009db8:	f104 0314 	add.w	r3, r4, #20
 8009dbc:	f019 091f 	ands.w	r9, r9, #31
 8009dc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dc8:	d02b      	beq.n	8009e22 <__lshift+0xbe>
 8009dca:	f1c9 0e20 	rsb	lr, r9, #32
 8009dce:	468a      	mov	sl, r1
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	6818      	ldr	r0, [r3, #0]
 8009dd4:	fa00 f009 	lsl.w	r0, r0, r9
 8009dd8:	4310      	orrs	r0, r2
 8009dda:	f84a 0b04 	str.w	r0, [sl], #4
 8009dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de2:	459c      	cmp	ip, r3
 8009de4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009de8:	d8f3      	bhi.n	8009dd2 <__lshift+0x6e>
 8009dea:	ebac 0304 	sub.w	r3, ip, r4
 8009dee:	3b15      	subs	r3, #21
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	3304      	adds	r3, #4
 8009df6:	f104 0015 	add.w	r0, r4, #21
 8009dfa:	4584      	cmp	ip, r0
 8009dfc:	bf38      	it	cc
 8009dfe:	2304      	movcc	r3, #4
 8009e00:	50ca      	str	r2, [r1, r3]
 8009e02:	b10a      	cbz	r2, 8009e08 <__lshift+0xa4>
 8009e04:	f108 0602 	add.w	r6, r8, #2
 8009e08:	3e01      	subs	r6, #1
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	612e      	str	r6, [r5, #16]
 8009e0e:	4621      	mov	r1, r4
 8009e10:	f7ff fd90 	bl	8009934 <_Bfree>
 8009e14:	4628      	mov	r0, r5
 8009e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e1e:	3301      	adds	r3, #1
 8009e20:	e7c5      	b.n	8009dae <__lshift+0x4a>
 8009e22:	3904      	subs	r1, #4
 8009e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e28:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e2c:	459c      	cmp	ip, r3
 8009e2e:	d8f9      	bhi.n	8009e24 <__lshift+0xc0>
 8009e30:	e7ea      	b.n	8009e08 <__lshift+0xa4>
 8009e32:	bf00      	nop
 8009e34:	0800bf51 	.word	0x0800bf51
 8009e38:	0800bfd9 	.word	0x0800bfd9

08009e3c <__mcmp>:
 8009e3c:	690a      	ldr	r2, [r1, #16]
 8009e3e:	4603      	mov	r3, r0
 8009e40:	6900      	ldr	r0, [r0, #16]
 8009e42:	1a80      	subs	r0, r0, r2
 8009e44:	b530      	push	{r4, r5, lr}
 8009e46:	d10e      	bne.n	8009e66 <__mcmp+0x2a>
 8009e48:	3314      	adds	r3, #20
 8009e4a:	3114      	adds	r1, #20
 8009e4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e5c:	4295      	cmp	r5, r2
 8009e5e:	d003      	beq.n	8009e68 <__mcmp+0x2c>
 8009e60:	d205      	bcs.n	8009e6e <__mcmp+0x32>
 8009e62:	f04f 30ff 	mov.w	r0, #4294967295
 8009e66:	bd30      	pop	{r4, r5, pc}
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	d3f3      	bcc.n	8009e54 <__mcmp+0x18>
 8009e6c:	e7fb      	b.n	8009e66 <__mcmp+0x2a>
 8009e6e:	2001      	movs	r0, #1
 8009e70:	e7f9      	b.n	8009e66 <__mcmp+0x2a>
	...

08009e74 <__mdiff>:
 8009e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	4689      	mov	r9, r1
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4648      	mov	r0, r9
 8009e80:	4614      	mov	r4, r2
 8009e82:	f7ff ffdb 	bl	8009e3c <__mcmp>
 8009e86:	1e05      	subs	r5, r0, #0
 8009e88:	d112      	bne.n	8009eb0 <__mdiff+0x3c>
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff fd11 	bl	80098b4 <_Balloc>
 8009e92:	4602      	mov	r2, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <__mdiff+0x2e>
 8009e96:	4b3f      	ldr	r3, [pc, #252]	@ (8009f94 <__mdiff+0x120>)
 8009e98:	f240 2137 	movw	r1, #567	@ 0x237
 8009e9c:	483e      	ldr	r0, [pc, #248]	@ (8009f98 <__mdiff+0x124>)
 8009e9e:	f001 f909 	bl	800b0b4 <__assert_func>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	b003      	add	sp, #12
 8009eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb0:	bfbc      	itt	lt
 8009eb2:	464b      	movlt	r3, r9
 8009eb4:	46a1      	movlt	r9, r4
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ebc:	bfba      	itte	lt
 8009ebe:	461c      	movlt	r4, r3
 8009ec0:	2501      	movlt	r5, #1
 8009ec2:	2500      	movge	r5, #0
 8009ec4:	f7ff fcf6 	bl	80098b4 <_Balloc>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	b918      	cbnz	r0, 8009ed4 <__mdiff+0x60>
 8009ecc:	4b31      	ldr	r3, [pc, #196]	@ (8009f94 <__mdiff+0x120>)
 8009ece:	f240 2145 	movw	r1, #581	@ 0x245
 8009ed2:	e7e3      	b.n	8009e9c <__mdiff+0x28>
 8009ed4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ed8:	6926      	ldr	r6, [r4, #16]
 8009eda:	60c5      	str	r5, [r0, #12]
 8009edc:	f109 0310 	add.w	r3, r9, #16
 8009ee0:	f109 0514 	add.w	r5, r9, #20
 8009ee4:	f104 0e14 	add.w	lr, r4, #20
 8009ee8:	f100 0b14 	add.w	fp, r0, #20
 8009eec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ef0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	46d9      	mov	r9, fp
 8009ef8:	f04f 0c00 	mov.w	ip, #0
 8009efc:	9b01      	ldr	r3, [sp, #4]
 8009efe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	fa1f f38a 	uxth.w	r3, sl
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	b283      	uxth	r3, r0
 8009f10:	1acb      	subs	r3, r1, r3
 8009f12:	0c00      	lsrs	r0, r0, #16
 8009f14:	4463      	add	r3, ip
 8009f16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f24:	4576      	cmp	r6, lr
 8009f26:	f849 3b04 	str.w	r3, [r9], #4
 8009f2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f2e:	d8e5      	bhi.n	8009efc <__mdiff+0x88>
 8009f30:	1b33      	subs	r3, r6, r4
 8009f32:	3b15      	subs	r3, #21
 8009f34:	f023 0303 	bic.w	r3, r3, #3
 8009f38:	3415      	adds	r4, #21
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	42a6      	cmp	r6, r4
 8009f3e:	bf38      	it	cc
 8009f40:	2304      	movcc	r3, #4
 8009f42:	441d      	add	r5, r3
 8009f44:	445b      	add	r3, fp
 8009f46:	461e      	mov	r6, r3
 8009f48:	462c      	mov	r4, r5
 8009f4a:	4544      	cmp	r4, r8
 8009f4c:	d30e      	bcc.n	8009f6c <__mdiff+0xf8>
 8009f4e:	f108 0103 	add.w	r1, r8, #3
 8009f52:	1b49      	subs	r1, r1, r5
 8009f54:	f021 0103 	bic.w	r1, r1, #3
 8009f58:	3d03      	subs	r5, #3
 8009f5a:	45a8      	cmp	r8, r5
 8009f5c:	bf38      	it	cc
 8009f5e:	2100      	movcc	r1, #0
 8009f60:	440b      	add	r3, r1
 8009f62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f66:	b191      	cbz	r1, 8009f8e <__mdiff+0x11a>
 8009f68:	6117      	str	r7, [r2, #16]
 8009f6a:	e79d      	b.n	8009ea8 <__mdiff+0x34>
 8009f6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f70:	46e6      	mov	lr, ip
 8009f72:	0c08      	lsrs	r0, r1, #16
 8009f74:	fa1c fc81 	uxtah	ip, ip, r1
 8009f78:	4471      	add	r1, lr
 8009f7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f7e:	b289      	uxth	r1, r1
 8009f80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f84:	f846 1b04 	str.w	r1, [r6], #4
 8009f88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f8c:	e7dd      	b.n	8009f4a <__mdiff+0xd6>
 8009f8e:	3f01      	subs	r7, #1
 8009f90:	e7e7      	b.n	8009f62 <__mdiff+0xee>
 8009f92:	bf00      	nop
 8009f94:	0800bf51 	.word	0x0800bf51
 8009f98:	0800bfd9 	.word	0x0800bfd9

08009f9c <__ulp>:
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	ed8d 0b00 	vstr	d0, [sp]
 8009fa2:	9a01      	ldr	r2, [sp, #4]
 8009fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <__ulp+0x48>)
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dc08      	bgt.n	8009fc2 <__ulp+0x26>
 8009fb0:	425b      	negs	r3, r3
 8009fb2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009fb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fba:	da04      	bge.n	8009fc6 <__ulp+0x2a>
 8009fbc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009fc0:	4113      	asrs	r3, r2
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	e008      	b.n	8009fd8 <__ulp+0x3c>
 8009fc6:	f1a2 0314 	sub.w	r3, r2, #20
 8009fca:	2b1e      	cmp	r3, #30
 8009fcc:	bfda      	itte	le
 8009fce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009fd2:	40da      	lsrle	r2, r3
 8009fd4:	2201      	movgt	r2, #1
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	ec41 0b10 	vmov	d0, r0, r1
 8009fe0:	b002      	add	sp, #8
 8009fe2:	4770      	bx	lr
 8009fe4:	7ff00000 	.word	0x7ff00000

08009fe8 <__b2d>:
 8009fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fec:	6906      	ldr	r6, [r0, #16]
 8009fee:	f100 0814 	add.w	r8, r0, #20
 8009ff2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ff6:	1f37      	subs	r7, r6, #4
 8009ff8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f7ff fd4b 	bl	8009a98 <__hi0bits>
 800a002:	f1c0 0320 	rsb	r3, r0, #32
 800a006:	280a      	cmp	r0, #10
 800a008:	600b      	str	r3, [r1, #0]
 800a00a:	491b      	ldr	r1, [pc, #108]	@ (800a078 <__b2d+0x90>)
 800a00c:	dc15      	bgt.n	800a03a <__b2d+0x52>
 800a00e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a012:	fa22 f30c 	lsr.w	r3, r2, ip
 800a016:	45b8      	cmp	r8, r7
 800a018:	ea43 0501 	orr.w	r5, r3, r1
 800a01c:	bf34      	ite	cc
 800a01e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a022:	2300      	movcs	r3, #0
 800a024:	3015      	adds	r0, #21
 800a026:	fa02 f000 	lsl.w	r0, r2, r0
 800a02a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a02e:	4303      	orrs	r3, r0
 800a030:	461c      	mov	r4, r3
 800a032:	ec45 4b10 	vmov	d0, r4, r5
 800a036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a03a:	45b8      	cmp	r8, r7
 800a03c:	bf3a      	itte	cc
 800a03e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a042:	f1a6 0708 	subcc.w	r7, r6, #8
 800a046:	2300      	movcs	r3, #0
 800a048:	380b      	subs	r0, #11
 800a04a:	d012      	beq.n	800a072 <__b2d+0x8a>
 800a04c:	f1c0 0120 	rsb	r1, r0, #32
 800a050:	fa23 f401 	lsr.w	r4, r3, r1
 800a054:	4082      	lsls	r2, r0
 800a056:	4322      	orrs	r2, r4
 800a058:	4547      	cmp	r7, r8
 800a05a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a05e:	bf8c      	ite	hi
 800a060:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a064:	2200      	movls	r2, #0
 800a066:	4083      	lsls	r3, r0
 800a068:	40ca      	lsrs	r2, r1
 800a06a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a06e:	4313      	orrs	r3, r2
 800a070:	e7de      	b.n	800a030 <__b2d+0x48>
 800a072:	ea42 0501 	orr.w	r5, r2, r1
 800a076:	e7db      	b.n	800a030 <__b2d+0x48>
 800a078:	3ff00000 	.word	0x3ff00000

0800a07c <__d2b>:
 800a07c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a080:	460f      	mov	r7, r1
 800a082:	2101      	movs	r1, #1
 800a084:	ec59 8b10 	vmov	r8, r9, d0
 800a088:	4616      	mov	r6, r2
 800a08a:	f7ff fc13 	bl	80098b4 <_Balloc>
 800a08e:	4604      	mov	r4, r0
 800a090:	b930      	cbnz	r0, 800a0a0 <__d2b+0x24>
 800a092:	4602      	mov	r2, r0
 800a094:	4b23      	ldr	r3, [pc, #140]	@ (800a124 <__d2b+0xa8>)
 800a096:	4824      	ldr	r0, [pc, #144]	@ (800a128 <__d2b+0xac>)
 800a098:	f240 310f 	movw	r1, #783	@ 0x30f
 800a09c:	f001 f80a 	bl	800b0b4 <__assert_func>
 800a0a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0a8:	b10d      	cbz	r5, 800a0ae <__d2b+0x32>
 800a0aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	f1b8 0300 	subs.w	r3, r8, #0
 800a0b4:	d023      	beq.n	800a0fe <__d2b+0x82>
 800a0b6:	4668      	mov	r0, sp
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	f7ff fd0c 	bl	8009ad6 <__lo0bits>
 800a0be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0c2:	b1d0      	cbz	r0, 800a0fa <__d2b+0x7e>
 800a0c4:	f1c0 0320 	rsb	r3, r0, #32
 800a0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0cc:	430b      	orrs	r3, r1
 800a0ce:	40c2      	lsrs	r2, r0
 800a0d0:	6163      	str	r3, [r4, #20]
 800a0d2:	9201      	str	r2, [sp, #4]
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	61a3      	str	r3, [r4, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	bf0c      	ite	eq
 800a0dc:	2201      	moveq	r2, #1
 800a0de:	2202      	movne	r2, #2
 800a0e0:	6122      	str	r2, [r4, #16]
 800a0e2:	b1a5      	cbz	r5, 800a10e <__d2b+0x92>
 800a0e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0e8:	4405      	add	r5, r0
 800a0ea:	603d      	str	r5, [r7, #0]
 800a0ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0f0:	6030      	str	r0, [r6, #0]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	b003      	add	sp, #12
 800a0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0fa:	6161      	str	r1, [r4, #20]
 800a0fc:	e7ea      	b.n	800a0d4 <__d2b+0x58>
 800a0fe:	a801      	add	r0, sp, #4
 800a100:	f7ff fce9 	bl	8009ad6 <__lo0bits>
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	6163      	str	r3, [r4, #20]
 800a108:	3020      	adds	r0, #32
 800a10a:	2201      	movs	r2, #1
 800a10c:	e7e8      	b.n	800a0e0 <__d2b+0x64>
 800a10e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a112:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a116:	6038      	str	r0, [r7, #0]
 800a118:	6918      	ldr	r0, [r3, #16]
 800a11a:	f7ff fcbd 	bl	8009a98 <__hi0bits>
 800a11e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a122:	e7e5      	b.n	800a0f0 <__d2b+0x74>
 800a124:	0800bf51 	.word	0x0800bf51
 800a128:	0800bfd9 	.word	0x0800bfd9

0800a12c <__ratio>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	b085      	sub	sp, #20
 800a132:	e9cd 1000 	strd	r1, r0, [sp]
 800a136:	a902      	add	r1, sp, #8
 800a138:	f7ff ff56 	bl	8009fe8 <__b2d>
 800a13c:	9800      	ldr	r0, [sp, #0]
 800a13e:	a903      	add	r1, sp, #12
 800a140:	ec55 4b10 	vmov	r4, r5, d0
 800a144:	f7ff ff50 	bl	8009fe8 <__b2d>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	6919      	ldr	r1, [r3, #16]
 800a14c:	9b00      	ldr	r3, [sp, #0]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	1ac9      	subs	r1, r1, r3
 800a152:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a156:	1a9b      	subs	r3, r3, r2
 800a158:	ec5b ab10 	vmov	sl, fp, d0
 800a15c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a160:	2b00      	cmp	r3, #0
 800a162:	bfce      	itee	gt
 800a164:	462a      	movgt	r2, r5
 800a166:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a16a:	465a      	movle	r2, fp
 800a16c:	462f      	mov	r7, r5
 800a16e:	46d9      	mov	r9, fp
 800a170:	bfcc      	ite	gt
 800a172:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a176:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a17a:	464b      	mov	r3, r9
 800a17c:	4652      	mov	r2, sl
 800a17e:	4620      	mov	r0, r4
 800a180:	4639      	mov	r1, r7
 800a182:	f7f6 fb7b 	bl	800087c <__aeabi_ddiv>
 800a186:	ec41 0b10 	vmov	d0, r0, r1
 800a18a:	b005      	add	sp, #20
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a190 <__copybits>:
 800a190:	3901      	subs	r1, #1
 800a192:	b570      	push	{r4, r5, r6, lr}
 800a194:	1149      	asrs	r1, r1, #5
 800a196:	6914      	ldr	r4, [r2, #16]
 800a198:	3101      	adds	r1, #1
 800a19a:	f102 0314 	add.w	r3, r2, #20
 800a19e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1a6:	1f05      	subs	r5, r0, #4
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	d30c      	bcc.n	800a1c6 <__copybits+0x36>
 800a1ac:	1aa3      	subs	r3, r4, r2
 800a1ae:	3b11      	subs	r3, #17
 800a1b0:	f023 0303 	bic.w	r3, r3, #3
 800a1b4:	3211      	adds	r2, #17
 800a1b6:	42a2      	cmp	r2, r4
 800a1b8:	bf88      	it	hi
 800a1ba:	2300      	movhi	r3, #0
 800a1bc:	4418      	add	r0, r3
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4288      	cmp	r0, r1
 800a1c2:	d305      	bcc.n	800a1d0 <__copybits+0x40>
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
 800a1c6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1ca:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1ce:	e7eb      	b.n	800a1a8 <__copybits+0x18>
 800a1d0:	f840 3b04 	str.w	r3, [r0], #4
 800a1d4:	e7f4      	b.n	800a1c0 <__copybits+0x30>

0800a1d6 <__any_on>:
 800a1d6:	f100 0214 	add.w	r2, r0, #20
 800a1da:	6900      	ldr	r0, [r0, #16]
 800a1dc:	114b      	asrs	r3, r1, #5
 800a1de:	4298      	cmp	r0, r3
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	db11      	blt.n	800a208 <__any_on+0x32>
 800a1e4:	dd0a      	ble.n	800a1fc <__any_on+0x26>
 800a1e6:	f011 011f 	ands.w	r1, r1, #31
 800a1ea:	d007      	beq.n	800a1fc <__any_on+0x26>
 800a1ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1f0:	fa24 f001 	lsr.w	r0, r4, r1
 800a1f4:	fa00 f101 	lsl.w	r1, r0, r1
 800a1f8:	428c      	cmp	r4, r1
 800a1fa:	d10b      	bne.n	800a214 <__any_on+0x3e>
 800a1fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a200:	4293      	cmp	r3, r2
 800a202:	d803      	bhi.n	800a20c <__any_on+0x36>
 800a204:	2000      	movs	r0, #0
 800a206:	bd10      	pop	{r4, pc}
 800a208:	4603      	mov	r3, r0
 800a20a:	e7f7      	b.n	800a1fc <__any_on+0x26>
 800a20c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a210:	2900      	cmp	r1, #0
 800a212:	d0f5      	beq.n	800a200 <__any_on+0x2a>
 800a214:	2001      	movs	r0, #1
 800a216:	e7f6      	b.n	800a206 <__any_on+0x30>

0800a218 <_malloc_usable_size_r>:
 800a218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a21c:	1f18      	subs	r0, r3, #4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	bfbc      	itt	lt
 800a222:	580b      	ldrlt	r3, [r1, r0]
 800a224:	18c0      	addlt	r0, r0, r3
 800a226:	4770      	bx	lr

0800a228 <__ascii_wctomb>:
 800a228:	4603      	mov	r3, r0
 800a22a:	4608      	mov	r0, r1
 800a22c:	b141      	cbz	r1, 800a240 <__ascii_wctomb+0x18>
 800a22e:	2aff      	cmp	r2, #255	@ 0xff
 800a230:	d904      	bls.n	800a23c <__ascii_wctomb+0x14>
 800a232:	228a      	movs	r2, #138	@ 0x8a
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	f04f 30ff 	mov.w	r0, #4294967295
 800a23a:	4770      	bx	lr
 800a23c:	700a      	strb	r2, [r1, #0]
 800a23e:	2001      	movs	r0, #1
 800a240:	4770      	bx	lr

0800a242 <__ssputs_r>:
 800a242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a246:	688e      	ldr	r6, [r1, #8]
 800a248:	461f      	mov	r7, r3
 800a24a:	42be      	cmp	r6, r7
 800a24c:	680b      	ldr	r3, [r1, #0]
 800a24e:	4682      	mov	sl, r0
 800a250:	460c      	mov	r4, r1
 800a252:	4690      	mov	r8, r2
 800a254:	d82d      	bhi.n	800a2b2 <__ssputs_r+0x70>
 800a256:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a25a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a25e:	d026      	beq.n	800a2ae <__ssputs_r+0x6c>
 800a260:	6965      	ldr	r5, [r4, #20]
 800a262:	6909      	ldr	r1, [r1, #16]
 800a264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a268:	eba3 0901 	sub.w	r9, r3, r1
 800a26c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a270:	1c7b      	adds	r3, r7, #1
 800a272:	444b      	add	r3, r9
 800a274:	106d      	asrs	r5, r5, #1
 800a276:	429d      	cmp	r5, r3
 800a278:	bf38      	it	cc
 800a27a:	461d      	movcc	r5, r3
 800a27c:	0553      	lsls	r3, r2, #21
 800a27e:	d527      	bpl.n	800a2d0 <__ssputs_r+0x8e>
 800a280:	4629      	mov	r1, r5
 800a282:	f7fd fe7b 	bl	8007f7c <_malloc_r>
 800a286:	4606      	mov	r6, r0
 800a288:	b360      	cbz	r0, 800a2e4 <__ssputs_r+0xa2>
 800a28a:	6921      	ldr	r1, [r4, #16]
 800a28c:	464a      	mov	r2, r9
 800a28e:	f7fe ff62 	bl	8009156 <memcpy>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	6126      	str	r6, [r4, #16]
 800a2a0:	6165      	str	r5, [r4, #20]
 800a2a2:	444e      	add	r6, r9
 800a2a4:	eba5 0509 	sub.w	r5, r5, r9
 800a2a8:	6026      	str	r6, [r4, #0]
 800a2aa:	60a5      	str	r5, [r4, #8]
 800a2ac:	463e      	mov	r6, r7
 800a2ae:	42be      	cmp	r6, r7
 800a2b0:	d900      	bls.n	800a2b4 <__ssputs_r+0x72>
 800a2b2:	463e      	mov	r6, r7
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	4641      	mov	r1, r8
 800a2ba:	f000 fee0 	bl	800b07e <memmove>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	1b9b      	subs	r3, r3, r6
 800a2c2:	60a3      	str	r3, [r4, #8]
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	4433      	add	r3, r6
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	f7fd fee7 	bl	80080a4 <_realloc_r>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d1e0      	bne.n	800a29e <__ssputs_r+0x5c>
 800a2dc:	6921      	ldr	r1, [r4, #16]
 800a2de:	4650      	mov	r0, sl
 800a2e0:	f7fe ff52 	bl	8009188 <_free_r>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	f8ca 3000 	str.w	r3, [sl]
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	e7e9      	b.n	800a2cc <__ssputs_r+0x8a>

0800a2f8 <_svfiprintf_r>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	4698      	mov	r8, r3
 800a2fe:	898b      	ldrh	r3, [r1, #12]
 800a300:	061b      	lsls	r3, r3, #24
 800a302:	b09d      	sub	sp, #116	@ 0x74
 800a304:	4607      	mov	r7, r0
 800a306:	460d      	mov	r5, r1
 800a308:	4614      	mov	r4, r2
 800a30a:	d510      	bpl.n	800a32e <_svfiprintf_r+0x36>
 800a30c:	690b      	ldr	r3, [r1, #16]
 800a30e:	b973      	cbnz	r3, 800a32e <_svfiprintf_r+0x36>
 800a310:	2140      	movs	r1, #64	@ 0x40
 800a312:	f7fd fe33 	bl	8007f7c <_malloc_r>
 800a316:	6028      	str	r0, [r5, #0]
 800a318:	6128      	str	r0, [r5, #16]
 800a31a:	b930      	cbnz	r0, 800a32a <_svfiprintf_r+0x32>
 800a31c:	230c      	movs	r3, #12
 800a31e:	603b      	str	r3, [r7, #0]
 800a320:	f04f 30ff 	mov.w	r0, #4294967295
 800a324:	b01d      	add	sp, #116	@ 0x74
 800a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32a:	2340      	movs	r3, #64	@ 0x40
 800a32c:	616b      	str	r3, [r5, #20]
 800a32e:	2300      	movs	r3, #0
 800a330:	9309      	str	r3, [sp, #36]	@ 0x24
 800a332:	2320      	movs	r3, #32
 800a334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a338:	f8cd 800c 	str.w	r8, [sp, #12]
 800a33c:	2330      	movs	r3, #48	@ 0x30
 800a33e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4dc <_svfiprintf_r+0x1e4>
 800a342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a346:	f04f 0901 	mov.w	r9, #1
 800a34a:	4623      	mov	r3, r4
 800a34c:	469a      	mov	sl, r3
 800a34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a352:	b10a      	cbz	r2, 800a358 <_svfiprintf_r+0x60>
 800a354:	2a25      	cmp	r2, #37	@ 0x25
 800a356:	d1f9      	bne.n	800a34c <_svfiprintf_r+0x54>
 800a358:	ebba 0b04 	subs.w	fp, sl, r4
 800a35c:	d00b      	beq.n	800a376 <_svfiprintf_r+0x7e>
 800a35e:	465b      	mov	r3, fp
 800a360:	4622      	mov	r2, r4
 800a362:	4629      	mov	r1, r5
 800a364:	4638      	mov	r0, r7
 800a366:	f7ff ff6c 	bl	800a242 <__ssputs_r>
 800a36a:	3001      	adds	r0, #1
 800a36c:	f000 80a7 	beq.w	800a4be <_svfiprintf_r+0x1c6>
 800a370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a372:	445a      	add	r2, fp
 800a374:	9209      	str	r2, [sp, #36]	@ 0x24
 800a376:	f89a 3000 	ldrb.w	r3, [sl]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 809f 	beq.w	800a4be <_svfiprintf_r+0x1c6>
 800a380:	2300      	movs	r3, #0
 800a382:	f04f 32ff 	mov.w	r2, #4294967295
 800a386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38a:	f10a 0a01 	add.w	sl, sl, #1
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a396:	931a      	str	r3, [sp, #104]	@ 0x68
 800a398:	4654      	mov	r4, sl
 800a39a:	2205      	movs	r2, #5
 800a39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a0:	484e      	ldr	r0, [pc, #312]	@ (800a4dc <_svfiprintf_r+0x1e4>)
 800a3a2:	f7f5 ff35 	bl	8000210 <memchr>
 800a3a6:	9a04      	ldr	r2, [sp, #16]
 800a3a8:	b9d8      	cbnz	r0, 800a3e2 <_svfiprintf_r+0xea>
 800a3aa:	06d0      	lsls	r0, r2, #27
 800a3ac:	bf44      	itt	mi
 800a3ae:	2320      	movmi	r3, #32
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b4:	0711      	lsls	r1, r2, #28
 800a3b6:	bf44      	itt	mi
 800a3b8:	232b      	movmi	r3, #43	@ 0x2b
 800a3ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3be:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c4:	d015      	beq.n	800a3f2 <_svfiprintf_r+0xfa>
 800a3c6:	9a07      	ldr	r2, [sp, #28]
 800a3c8:	4654      	mov	r4, sl
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	f04f 0c0a 	mov.w	ip, #10
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d6:	3b30      	subs	r3, #48	@ 0x30
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	d94b      	bls.n	800a474 <_svfiprintf_r+0x17c>
 800a3dc:	b1b0      	cbz	r0, 800a40c <_svfiprintf_r+0x114>
 800a3de:	9207      	str	r2, [sp, #28]
 800a3e0:	e014      	b.n	800a40c <_svfiprintf_r+0x114>
 800a3e2:	eba0 0308 	sub.w	r3, r0, r8
 800a3e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	46a2      	mov	sl, r4
 800a3f0:	e7d2      	b.n	800a398 <_svfiprintf_r+0xa0>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	1d19      	adds	r1, r3, #4
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	9103      	str	r1, [sp, #12]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfbb      	ittet	lt
 800a3fe:	425b      	neglt	r3, r3
 800a400:	f042 0202 	orrlt.w	r2, r2, #2
 800a404:	9307      	strge	r3, [sp, #28]
 800a406:	9307      	strlt	r3, [sp, #28]
 800a408:	bfb8      	it	lt
 800a40a:	9204      	strlt	r2, [sp, #16]
 800a40c:	7823      	ldrb	r3, [r4, #0]
 800a40e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a410:	d10a      	bne.n	800a428 <_svfiprintf_r+0x130>
 800a412:	7863      	ldrb	r3, [r4, #1]
 800a414:	2b2a      	cmp	r3, #42	@ 0x2a
 800a416:	d132      	bne.n	800a47e <_svfiprintf_r+0x186>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	1d1a      	adds	r2, r3, #4
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	9203      	str	r2, [sp, #12]
 800a420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a424:	3402      	adds	r4, #2
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4ec <_svfiprintf_r+0x1f4>
 800a42c:	7821      	ldrb	r1, [r4, #0]
 800a42e:	2203      	movs	r2, #3
 800a430:	4650      	mov	r0, sl
 800a432:	f7f5 feed 	bl	8000210 <memchr>
 800a436:	b138      	cbz	r0, 800a448 <_svfiprintf_r+0x150>
 800a438:	9b04      	ldr	r3, [sp, #16]
 800a43a:	eba0 000a 	sub.w	r0, r0, sl
 800a43e:	2240      	movs	r2, #64	@ 0x40
 800a440:	4082      	lsls	r2, r0
 800a442:	4313      	orrs	r3, r2
 800a444:	3401      	adds	r4, #1
 800a446:	9304      	str	r3, [sp, #16]
 800a448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44c:	4824      	ldr	r0, [pc, #144]	@ (800a4e0 <_svfiprintf_r+0x1e8>)
 800a44e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a452:	2206      	movs	r2, #6
 800a454:	f7f5 fedc 	bl	8000210 <memchr>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d036      	beq.n	800a4ca <_svfiprintf_r+0x1d2>
 800a45c:	4b21      	ldr	r3, [pc, #132]	@ (800a4e4 <_svfiprintf_r+0x1ec>)
 800a45e:	bb1b      	cbnz	r3, 800a4a8 <_svfiprintf_r+0x1b0>
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	3307      	adds	r3, #7
 800a464:	f023 0307 	bic.w	r3, r3, #7
 800a468:	3308      	adds	r3, #8
 800a46a:	9303      	str	r3, [sp, #12]
 800a46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a46e:	4433      	add	r3, r6
 800a470:	9309      	str	r3, [sp, #36]	@ 0x24
 800a472:	e76a      	b.n	800a34a <_svfiprintf_r+0x52>
 800a474:	fb0c 3202 	mla	r2, ip, r2, r3
 800a478:	460c      	mov	r4, r1
 800a47a:	2001      	movs	r0, #1
 800a47c:	e7a8      	b.n	800a3d0 <_svfiprintf_r+0xd8>
 800a47e:	2300      	movs	r3, #0
 800a480:	3401      	adds	r4, #1
 800a482:	9305      	str	r3, [sp, #20]
 800a484:	4619      	mov	r1, r3
 800a486:	f04f 0c0a 	mov.w	ip, #10
 800a48a:	4620      	mov	r0, r4
 800a48c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a490:	3a30      	subs	r2, #48	@ 0x30
 800a492:	2a09      	cmp	r2, #9
 800a494:	d903      	bls.n	800a49e <_svfiprintf_r+0x1a6>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0c6      	beq.n	800a428 <_svfiprintf_r+0x130>
 800a49a:	9105      	str	r1, [sp, #20]
 800a49c:	e7c4      	b.n	800a428 <_svfiprintf_r+0x130>
 800a49e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e7f0      	b.n	800a48a <_svfiprintf_r+0x192>
 800a4a8:	ab03      	add	r3, sp, #12
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e8 <_svfiprintf_r+0x1f0>)
 800a4b0:	a904      	add	r1, sp, #16
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	1c42      	adds	r2, r0, #1
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	d1d6      	bne.n	800a46c <_svfiprintf_r+0x174>
 800a4be:	89ab      	ldrh	r3, [r5, #12]
 800a4c0:	065b      	lsls	r3, r3, #25
 800a4c2:	f53f af2d 	bmi.w	800a320 <_svfiprintf_r+0x28>
 800a4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4c8:	e72c      	b.n	800a324 <_svfiprintf_r+0x2c>
 800a4ca:	ab03      	add	r3, sp, #12
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	462a      	mov	r2, r5
 800a4d0:	4b05      	ldr	r3, [pc, #20]	@ (800a4e8 <_svfiprintf_r+0x1f0>)
 800a4d2:	a904      	add	r1, sp, #16
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f000 fa45 	bl	800a964 <_printf_i>
 800a4da:	e7ed      	b.n	800a4b8 <_svfiprintf_r+0x1c0>
 800a4dc:	0800c130 	.word	0x0800c130
 800a4e0:	0800c13a 	.word	0x0800c13a
 800a4e4:	00000000 	.word	0x00000000
 800a4e8:	0800a243 	.word	0x0800a243
 800a4ec:	0800c136 	.word	0x0800c136

0800a4f0 <_sungetc_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	1c4b      	adds	r3, r1, #1
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	d103      	bne.n	800a500 <_sungetc_r+0x10>
 800a4f8:	f04f 35ff 	mov.w	r5, #4294967295
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	8993      	ldrh	r3, [r2, #12]
 800a502:	f023 0320 	bic.w	r3, r3, #32
 800a506:	8193      	strh	r3, [r2, #12]
 800a508:	6853      	ldr	r3, [r2, #4]
 800a50a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a50c:	b2cd      	uxtb	r5, r1
 800a50e:	b18a      	cbz	r2, 800a534 <_sungetc_r+0x44>
 800a510:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a512:	429a      	cmp	r2, r3
 800a514:	dd08      	ble.n	800a528 <_sungetc_r+0x38>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	1e5a      	subs	r2, r3, #1
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	3301      	adds	r3, #1
 800a524:	6063      	str	r3, [r4, #4]
 800a526:	e7e9      	b.n	800a4fc <_sungetc_r+0xc>
 800a528:	4621      	mov	r1, r4
 800a52a:	f000 fd6e 	bl	800b00a <__submore>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d0f1      	beq.n	800a516 <_sungetc_r+0x26>
 800a532:	e7e1      	b.n	800a4f8 <_sungetc_r+0x8>
 800a534:	6921      	ldr	r1, [r4, #16]
 800a536:	6822      	ldr	r2, [r4, #0]
 800a538:	b141      	cbz	r1, 800a54c <_sungetc_r+0x5c>
 800a53a:	4291      	cmp	r1, r2
 800a53c:	d206      	bcs.n	800a54c <_sungetc_r+0x5c>
 800a53e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a542:	42a9      	cmp	r1, r5
 800a544:	d102      	bne.n	800a54c <_sungetc_r+0x5c>
 800a546:	3a01      	subs	r2, #1
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	e7ea      	b.n	800a522 <_sungetc_r+0x32>
 800a54c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a550:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a554:	6363      	str	r3, [r4, #52]	@ 0x34
 800a556:	2303      	movs	r3, #3
 800a558:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a55a:	4623      	mov	r3, r4
 800a55c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	2301      	movs	r3, #1
 800a564:	e7de      	b.n	800a524 <_sungetc_r+0x34>

0800a566 <__ssrefill_r>:
 800a566:	b510      	push	{r4, lr}
 800a568:	460c      	mov	r4, r1
 800a56a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a56c:	b169      	cbz	r1, 800a58a <__ssrefill_r+0x24>
 800a56e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a572:	4299      	cmp	r1, r3
 800a574:	d001      	beq.n	800a57a <__ssrefill_r+0x14>
 800a576:	f7fe fe07 	bl	8009188 <_free_r>
 800a57a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a57c:	6063      	str	r3, [r4, #4]
 800a57e:	2000      	movs	r0, #0
 800a580:	6360      	str	r0, [r4, #52]	@ 0x34
 800a582:	b113      	cbz	r3, 800a58a <__ssrefill_r+0x24>
 800a584:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	6923      	ldr	r3, [r4, #16]
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	2300      	movs	r3, #0
 800a590:	6063      	str	r3, [r4, #4]
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f043 0320 	orr.w	r3, r3, #32
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	e7f3      	b.n	800a588 <__ssrefill_r+0x22>

0800a5a0 <__ssvfiscanf_r>:
 800a5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a5b0:	49a5      	ldr	r1, [pc, #660]	@ (800a848 <__ssvfiscanf_r+0x2a8>)
 800a5b2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a5b4:	f10d 0804 	add.w	r8, sp, #4
 800a5b8:	49a4      	ldr	r1, [pc, #656]	@ (800a84c <__ssvfiscanf_r+0x2ac>)
 800a5ba:	4fa5      	ldr	r7, [pc, #660]	@ (800a850 <__ssvfiscanf_r+0x2b0>)
 800a5bc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	7813      	ldrb	r3, [r2, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8158 	beq.w	800a87e <__ssvfiscanf_r+0x2de>
 800a5ce:	5cf9      	ldrb	r1, [r7, r3]
 800a5d0:	f011 0108 	ands.w	r1, r1, #8
 800a5d4:	f102 0501 	add.w	r5, r2, #1
 800a5d8:	d019      	beq.n	800a60e <__ssvfiscanf_r+0x6e>
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dd0f      	ble.n	800a600 <__ssvfiscanf_r+0x60>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	5cba      	ldrb	r2, [r7, r2]
 800a5e6:	0712      	lsls	r2, r2, #28
 800a5e8:	d401      	bmi.n	800a5ee <__ssvfiscanf_r+0x4e>
 800a5ea:	462a      	mov	r2, r5
 800a5ec:	e7eb      	b.n	800a5c6 <__ssvfiscanf_r+0x26>
 800a5ee:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a5f0:	3201      	adds	r2, #1
 800a5f2:	9245      	str	r2, [sp, #276]	@ 0x114
 800a5f4:	6862      	ldr	r2, [r4, #4]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	3a01      	subs	r2, #1
 800a5fa:	6062      	str	r2, [r4, #4]
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	e7ec      	b.n	800a5da <__ssvfiscanf_r+0x3a>
 800a600:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a602:	4621      	mov	r1, r4
 800a604:	4630      	mov	r0, r6
 800a606:	4798      	blx	r3
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0e9      	beq.n	800a5e0 <__ssvfiscanf_r+0x40>
 800a60c:	e7ed      	b.n	800a5ea <__ssvfiscanf_r+0x4a>
 800a60e:	2b25      	cmp	r3, #37	@ 0x25
 800a610:	d012      	beq.n	800a638 <__ssvfiscanf_r+0x98>
 800a612:	4699      	mov	r9, r3
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f340 8093 	ble.w	800a742 <__ssvfiscanf_r+0x1a2>
 800a61c:	6822      	ldr	r2, [r4, #0]
 800a61e:	7813      	ldrb	r3, [r2, #0]
 800a620:	454b      	cmp	r3, r9
 800a622:	f040 812c 	bne.w	800a87e <__ssvfiscanf_r+0x2de>
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	3b01      	subs	r3, #1
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a62e:	3201      	adds	r2, #1
 800a630:	3301      	adds	r3, #1
 800a632:	6022      	str	r2, [r4, #0]
 800a634:	9345      	str	r3, [sp, #276]	@ 0x114
 800a636:	e7d8      	b.n	800a5ea <__ssvfiscanf_r+0x4a>
 800a638:	9141      	str	r1, [sp, #260]	@ 0x104
 800a63a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a63c:	7853      	ldrb	r3, [r2, #1]
 800a63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a640:	bf02      	ittt	eq
 800a642:	2310      	moveq	r3, #16
 800a644:	1c95      	addeq	r5, r2, #2
 800a646:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a648:	220a      	movs	r2, #10
 800a64a:	46a9      	mov	r9, r5
 800a64c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a650:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a654:	2b09      	cmp	r3, #9
 800a656:	d91e      	bls.n	800a696 <__ssvfiscanf_r+0xf6>
 800a658:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a854 <__ssvfiscanf_r+0x2b4>
 800a65c:	2203      	movs	r2, #3
 800a65e:	4650      	mov	r0, sl
 800a660:	f7f5 fdd6 	bl	8000210 <memchr>
 800a664:	b138      	cbz	r0, 800a676 <__ssvfiscanf_r+0xd6>
 800a666:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a668:	eba0 000a 	sub.w	r0, r0, sl
 800a66c:	2301      	movs	r3, #1
 800a66e:	4083      	lsls	r3, r0
 800a670:	4313      	orrs	r3, r2
 800a672:	9341      	str	r3, [sp, #260]	@ 0x104
 800a674:	464d      	mov	r5, r9
 800a676:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a67a:	2b78      	cmp	r3, #120	@ 0x78
 800a67c:	d806      	bhi.n	800a68c <__ssvfiscanf_r+0xec>
 800a67e:	2b57      	cmp	r3, #87	@ 0x57
 800a680:	d810      	bhi.n	800a6a4 <__ssvfiscanf_r+0x104>
 800a682:	2b25      	cmp	r3, #37	@ 0x25
 800a684:	d0c5      	beq.n	800a612 <__ssvfiscanf_r+0x72>
 800a686:	d857      	bhi.n	800a738 <__ssvfiscanf_r+0x198>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d065      	beq.n	800a758 <__ssvfiscanf_r+0x1b8>
 800a68c:	2303      	movs	r3, #3
 800a68e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a690:	230a      	movs	r3, #10
 800a692:	9342      	str	r3, [sp, #264]	@ 0x108
 800a694:	e078      	b.n	800a788 <__ssvfiscanf_r+0x1e8>
 800a696:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a698:	fb02 1103 	mla	r1, r2, r3, r1
 800a69c:	3930      	subs	r1, #48	@ 0x30
 800a69e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a6a0:	464d      	mov	r5, r9
 800a6a2:	e7d2      	b.n	800a64a <__ssvfiscanf_r+0xaa>
 800a6a4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a6a8:	2a20      	cmp	r2, #32
 800a6aa:	d8ef      	bhi.n	800a68c <__ssvfiscanf_r+0xec>
 800a6ac:	a101      	add	r1, pc, #4	@ (adr r1, 800a6b4 <__ssvfiscanf_r+0x114>)
 800a6ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a767 	.word	0x0800a767
 800a6b8:	0800a68d 	.word	0x0800a68d
 800a6bc:	0800a68d 	.word	0x0800a68d
 800a6c0:	0800a7c1 	.word	0x0800a7c1
 800a6c4:	0800a68d 	.word	0x0800a68d
 800a6c8:	0800a68d 	.word	0x0800a68d
 800a6cc:	0800a68d 	.word	0x0800a68d
 800a6d0:	0800a68d 	.word	0x0800a68d
 800a6d4:	0800a68d 	.word	0x0800a68d
 800a6d8:	0800a68d 	.word	0x0800a68d
 800a6dc:	0800a68d 	.word	0x0800a68d
 800a6e0:	0800a7d7 	.word	0x0800a7d7
 800a6e4:	0800a7bd 	.word	0x0800a7bd
 800a6e8:	0800a73f 	.word	0x0800a73f
 800a6ec:	0800a73f 	.word	0x0800a73f
 800a6f0:	0800a73f 	.word	0x0800a73f
 800a6f4:	0800a68d 	.word	0x0800a68d
 800a6f8:	0800a779 	.word	0x0800a779
 800a6fc:	0800a68d 	.word	0x0800a68d
 800a700:	0800a68d 	.word	0x0800a68d
 800a704:	0800a68d 	.word	0x0800a68d
 800a708:	0800a68d 	.word	0x0800a68d
 800a70c:	0800a7e7 	.word	0x0800a7e7
 800a710:	0800a781 	.word	0x0800a781
 800a714:	0800a75f 	.word	0x0800a75f
 800a718:	0800a68d 	.word	0x0800a68d
 800a71c:	0800a68d 	.word	0x0800a68d
 800a720:	0800a7e3 	.word	0x0800a7e3
 800a724:	0800a68d 	.word	0x0800a68d
 800a728:	0800a7bd 	.word	0x0800a7bd
 800a72c:	0800a68d 	.word	0x0800a68d
 800a730:	0800a68d 	.word	0x0800a68d
 800a734:	0800a767 	.word	0x0800a767
 800a738:	3b45      	subs	r3, #69	@ 0x45
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d8a6      	bhi.n	800a68c <__ssvfiscanf_r+0xec>
 800a73e:	2305      	movs	r3, #5
 800a740:	e021      	b.n	800a786 <__ssvfiscanf_r+0x1e6>
 800a742:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a744:	4621      	mov	r1, r4
 800a746:	4630      	mov	r0, r6
 800a748:	4798      	blx	r3
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f43f af66 	beq.w	800a61c <__ssvfiscanf_r+0x7c>
 800a750:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a752:	2800      	cmp	r0, #0
 800a754:	f040 808b 	bne.w	800a86e <__ssvfiscanf_r+0x2ce>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	e08b      	b.n	800a876 <__ssvfiscanf_r+0x2d6>
 800a75e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a760:	f042 0220 	orr.w	r2, r2, #32
 800a764:	9241      	str	r2, [sp, #260]	@ 0x104
 800a766:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a76c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a76e:	2210      	movs	r2, #16
 800a770:	2b6e      	cmp	r3, #110	@ 0x6e
 800a772:	9242      	str	r2, [sp, #264]	@ 0x108
 800a774:	d902      	bls.n	800a77c <__ssvfiscanf_r+0x1dc>
 800a776:	e005      	b.n	800a784 <__ssvfiscanf_r+0x1e4>
 800a778:	2300      	movs	r3, #0
 800a77a:	9342      	str	r3, [sp, #264]	@ 0x108
 800a77c:	2303      	movs	r3, #3
 800a77e:	e002      	b.n	800a786 <__ssvfiscanf_r+0x1e6>
 800a780:	2308      	movs	r3, #8
 800a782:	9342      	str	r3, [sp, #264]	@ 0x108
 800a784:	2304      	movs	r3, #4
 800a786:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a788:	6863      	ldr	r3, [r4, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dd39      	ble.n	800a802 <__ssvfiscanf_r+0x262>
 800a78e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a790:	0659      	lsls	r1, r3, #25
 800a792:	d404      	bmi.n	800a79e <__ssvfiscanf_r+0x1fe>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	5cba      	ldrb	r2, [r7, r2]
 800a79a:	0712      	lsls	r2, r2, #28
 800a79c:	d438      	bmi.n	800a810 <__ssvfiscanf_r+0x270>
 800a79e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	dc47      	bgt.n	800a834 <__ssvfiscanf_r+0x294>
 800a7a4:	466b      	mov	r3, sp
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	a941      	add	r1, sp, #260	@ 0x104
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 f9fa 	bl	800aba4 <_scanf_chars>
 800a7b0:	2801      	cmp	r0, #1
 800a7b2:	d064      	beq.n	800a87e <__ssvfiscanf_r+0x2de>
 800a7b4:	2802      	cmp	r0, #2
 800a7b6:	f47f af18 	bne.w	800a5ea <__ssvfiscanf_r+0x4a>
 800a7ba:	e7c9      	b.n	800a750 <__ssvfiscanf_r+0x1b0>
 800a7bc:	220a      	movs	r2, #10
 800a7be:	e7d7      	b.n	800a770 <__ssvfiscanf_r+0x1d0>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	f000 fbe8 	bl	800af98 <__sccl>
 800a7c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7ce:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e7d7      	b.n	800a786 <__ssvfiscanf_r+0x1e6>
 800a7d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7dc:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e7d1      	b.n	800a786 <__ssvfiscanf_r+0x1e6>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e7cf      	b.n	800a786 <__ssvfiscanf_r+0x1e6>
 800a7e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a7e8:	06c3      	lsls	r3, r0, #27
 800a7ea:	f53f aefe 	bmi.w	800a5ea <__ssvfiscanf_r+0x4a>
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7f2:	1d19      	adds	r1, r3, #4
 800a7f4:	9100      	str	r1, [sp, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	07c0      	lsls	r0, r0, #31
 800a7fa:	bf4c      	ite	mi
 800a7fc:	801a      	strhmi	r2, [r3, #0]
 800a7fe:	601a      	strpl	r2, [r3, #0]
 800a800:	e6f3      	b.n	800a5ea <__ssvfiscanf_r+0x4a>
 800a802:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a804:	4621      	mov	r1, r4
 800a806:	4630      	mov	r0, r6
 800a808:	4798      	blx	r3
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d0bf      	beq.n	800a78e <__ssvfiscanf_r+0x1ee>
 800a80e:	e79f      	b.n	800a750 <__ssvfiscanf_r+0x1b0>
 800a810:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a812:	3201      	adds	r2, #1
 800a814:	9245      	str	r2, [sp, #276]	@ 0x114
 800a816:	6862      	ldr	r2, [r4, #4]
 800a818:	3a01      	subs	r2, #1
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	6062      	str	r2, [r4, #4]
 800a81e:	dd02      	ble.n	800a826 <__ssvfiscanf_r+0x286>
 800a820:	3301      	adds	r3, #1
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	e7b6      	b.n	800a794 <__ssvfiscanf_r+0x1f4>
 800a826:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a828:	4621      	mov	r1, r4
 800a82a:	4630      	mov	r0, r6
 800a82c:	4798      	blx	r3
 800a82e:	2800      	cmp	r0, #0
 800a830:	d0b0      	beq.n	800a794 <__ssvfiscanf_r+0x1f4>
 800a832:	e78d      	b.n	800a750 <__ssvfiscanf_r+0x1b0>
 800a834:	2b04      	cmp	r3, #4
 800a836:	dc0f      	bgt.n	800a858 <__ssvfiscanf_r+0x2b8>
 800a838:	466b      	mov	r3, sp
 800a83a:	4622      	mov	r2, r4
 800a83c:	a941      	add	r1, sp, #260	@ 0x104
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 fa0a 	bl	800ac58 <_scanf_i>
 800a844:	e7b4      	b.n	800a7b0 <__ssvfiscanf_r+0x210>
 800a846:	bf00      	nop
 800a848:	0800a4f1 	.word	0x0800a4f1
 800a84c:	0800a567 	.word	0x0800a567
 800a850:	0800be49 	.word	0x0800be49
 800a854:	0800c136 	.word	0x0800c136
 800a858:	4b0a      	ldr	r3, [pc, #40]	@ (800a884 <__ssvfiscanf_r+0x2e4>)
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f43f aec5 	beq.w	800a5ea <__ssvfiscanf_r+0x4a>
 800a860:	466b      	mov	r3, sp
 800a862:	4622      	mov	r2, r4
 800a864:	a941      	add	r1, sp, #260	@ 0x104
 800a866:	4630      	mov	r0, r6
 800a868:	f3af 8000 	nop.w
 800a86c:	e7a0      	b.n	800a7b0 <__ssvfiscanf_r+0x210>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	065b      	lsls	r3, r3, #25
 800a872:	f53f af71 	bmi.w	800a758 <__ssvfiscanf_r+0x1b8>
 800a876:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a880:	e7f9      	b.n	800a876 <__ssvfiscanf_r+0x2d6>
 800a882:	bf00      	nop
 800a884:	00000000 	.word	0x00000000

0800a888 <_printf_common>:
 800a888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a88c:	4616      	mov	r6, r2
 800a88e:	4698      	mov	r8, r3
 800a890:	688a      	ldr	r2, [r1, #8]
 800a892:	690b      	ldr	r3, [r1, #16]
 800a894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a898:	4293      	cmp	r3, r2
 800a89a:	bfb8      	it	lt
 800a89c:	4613      	movlt	r3, r2
 800a89e:	6033      	str	r3, [r6, #0]
 800a8a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	b10a      	cbz	r2, 800a8ae <_printf_common+0x26>
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	0699      	lsls	r1, r3, #26
 800a8b2:	bf42      	ittt	mi
 800a8b4:	6833      	ldrmi	r3, [r6, #0]
 800a8b6:	3302      	addmi	r3, #2
 800a8b8:	6033      	strmi	r3, [r6, #0]
 800a8ba:	6825      	ldr	r5, [r4, #0]
 800a8bc:	f015 0506 	ands.w	r5, r5, #6
 800a8c0:	d106      	bne.n	800a8d0 <_printf_common+0x48>
 800a8c2:	f104 0a19 	add.w	sl, r4, #25
 800a8c6:	68e3      	ldr	r3, [r4, #12]
 800a8c8:	6832      	ldr	r2, [r6, #0]
 800a8ca:	1a9b      	subs	r3, r3, r2
 800a8cc:	42ab      	cmp	r3, r5
 800a8ce:	dc26      	bgt.n	800a91e <_printf_common+0x96>
 800a8d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8d4:	6822      	ldr	r2, [r4, #0]
 800a8d6:	3b00      	subs	r3, #0
 800a8d8:	bf18      	it	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	0692      	lsls	r2, r2, #26
 800a8de:	d42b      	bmi.n	800a938 <_printf_common+0xb0>
 800a8e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8e4:	4641      	mov	r1, r8
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	47c8      	blx	r9
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	d01e      	beq.n	800a92c <_printf_common+0xa4>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	f003 0306 	and.w	r3, r3, #6
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	bf02      	ittt	eq
 800a8fa:	68e5      	ldreq	r5, [r4, #12]
 800a8fc:	6833      	ldreq	r3, [r6, #0]
 800a8fe:	1aed      	subeq	r5, r5, r3
 800a900:	68a3      	ldr	r3, [r4, #8]
 800a902:	bf0c      	ite	eq
 800a904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a908:	2500      	movne	r5, #0
 800a90a:	4293      	cmp	r3, r2
 800a90c:	bfc4      	itt	gt
 800a90e:	1a9b      	subgt	r3, r3, r2
 800a910:	18ed      	addgt	r5, r5, r3
 800a912:	2600      	movs	r6, #0
 800a914:	341a      	adds	r4, #26
 800a916:	42b5      	cmp	r5, r6
 800a918:	d11a      	bne.n	800a950 <_printf_common+0xc8>
 800a91a:	2000      	movs	r0, #0
 800a91c:	e008      	b.n	800a930 <_printf_common+0xa8>
 800a91e:	2301      	movs	r3, #1
 800a920:	4652      	mov	r2, sl
 800a922:	4641      	mov	r1, r8
 800a924:	4638      	mov	r0, r7
 800a926:	47c8      	blx	r9
 800a928:	3001      	adds	r0, #1
 800a92a:	d103      	bne.n	800a934 <_printf_common+0xac>
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295
 800a930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a934:	3501      	adds	r5, #1
 800a936:	e7c6      	b.n	800a8c6 <_printf_common+0x3e>
 800a938:	18e1      	adds	r1, r4, r3
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	2030      	movs	r0, #48	@ 0x30
 800a93e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a942:	4422      	add	r2, r4
 800a944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a94c:	3302      	adds	r3, #2
 800a94e:	e7c7      	b.n	800a8e0 <_printf_common+0x58>
 800a950:	2301      	movs	r3, #1
 800a952:	4622      	mov	r2, r4
 800a954:	4641      	mov	r1, r8
 800a956:	4638      	mov	r0, r7
 800a958:	47c8      	blx	r9
 800a95a:	3001      	adds	r0, #1
 800a95c:	d0e6      	beq.n	800a92c <_printf_common+0xa4>
 800a95e:	3601      	adds	r6, #1
 800a960:	e7d9      	b.n	800a916 <_printf_common+0x8e>
	...

0800a964 <_printf_i>:
 800a964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a968:	7e0f      	ldrb	r7, [r1, #24]
 800a96a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a96c:	2f78      	cmp	r7, #120	@ 0x78
 800a96e:	4691      	mov	r9, r2
 800a970:	4680      	mov	r8, r0
 800a972:	460c      	mov	r4, r1
 800a974:	469a      	mov	sl, r3
 800a976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a97a:	d807      	bhi.n	800a98c <_printf_i+0x28>
 800a97c:	2f62      	cmp	r7, #98	@ 0x62
 800a97e:	d80a      	bhi.n	800a996 <_printf_i+0x32>
 800a980:	2f00      	cmp	r7, #0
 800a982:	f000 80d2 	beq.w	800ab2a <_printf_i+0x1c6>
 800a986:	2f58      	cmp	r7, #88	@ 0x58
 800a988:	f000 80b9 	beq.w	800aafe <_printf_i+0x19a>
 800a98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a994:	e03a      	b.n	800aa0c <_printf_i+0xa8>
 800a996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a99a:	2b15      	cmp	r3, #21
 800a99c:	d8f6      	bhi.n	800a98c <_printf_i+0x28>
 800a99e:	a101      	add	r1, pc, #4	@ (adr r1, 800a9a4 <_printf_i+0x40>)
 800a9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9a4:	0800a9fd 	.word	0x0800a9fd
 800a9a8:	0800aa11 	.word	0x0800aa11
 800a9ac:	0800a98d 	.word	0x0800a98d
 800a9b0:	0800a98d 	.word	0x0800a98d
 800a9b4:	0800a98d 	.word	0x0800a98d
 800a9b8:	0800a98d 	.word	0x0800a98d
 800a9bc:	0800aa11 	.word	0x0800aa11
 800a9c0:	0800a98d 	.word	0x0800a98d
 800a9c4:	0800a98d 	.word	0x0800a98d
 800a9c8:	0800a98d 	.word	0x0800a98d
 800a9cc:	0800a98d 	.word	0x0800a98d
 800a9d0:	0800ab11 	.word	0x0800ab11
 800a9d4:	0800aa3b 	.word	0x0800aa3b
 800a9d8:	0800aacb 	.word	0x0800aacb
 800a9dc:	0800a98d 	.word	0x0800a98d
 800a9e0:	0800a98d 	.word	0x0800a98d
 800a9e4:	0800ab33 	.word	0x0800ab33
 800a9e8:	0800a98d 	.word	0x0800a98d
 800a9ec:	0800aa3b 	.word	0x0800aa3b
 800a9f0:	0800a98d 	.word	0x0800a98d
 800a9f4:	0800a98d 	.word	0x0800a98d
 800a9f8:	0800aad3 	.word	0x0800aad3
 800a9fc:	6833      	ldr	r3, [r6, #0]
 800a9fe:	1d1a      	adds	r2, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6032      	str	r2, [r6, #0]
 800aa04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e09d      	b.n	800ab4c <_printf_i+0x1e8>
 800aa10:	6833      	ldr	r3, [r6, #0]
 800aa12:	6820      	ldr	r0, [r4, #0]
 800aa14:	1d19      	adds	r1, r3, #4
 800aa16:	6031      	str	r1, [r6, #0]
 800aa18:	0606      	lsls	r6, r0, #24
 800aa1a:	d501      	bpl.n	800aa20 <_printf_i+0xbc>
 800aa1c:	681d      	ldr	r5, [r3, #0]
 800aa1e:	e003      	b.n	800aa28 <_printf_i+0xc4>
 800aa20:	0645      	lsls	r5, r0, #25
 800aa22:	d5fb      	bpl.n	800aa1c <_printf_i+0xb8>
 800aa24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa28:	2d00      	cmp	r5, #0
 800aa2a:	da03      	bge.n	800aa34 <_printf_i+0xd0>
 800aa2c:	232d      	movs	r3, #45	@ 0x2d
 800aa2e:	426d      	negs	r5, r5
 800aa30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa34:	4859      	ldr	r0, [pc, #356]	@ (800ab9c <_printf_i+0x238>)
 800aa36:	230a      	movs	r3, #10
 800aa38:	e011      	b.n	800aa5e <_printf_i+0xfa>
 800aa3a:	6821      	ldr	r1, [r4, #0]
 800aa3c:	6833      	ldr	r3, [r6, #0]
 800aa3e:	0608      	lsls	r0, r1, #24
 800aa40:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa44:	d402      	bmi.n	800aa4c <_printf_i+0xe8>
 800aa46:	0649      	lsls	r1, r1, #25
 800aa48:	bf48      	it	mi
 800aa4a:	b2ad      	uxthmi	r5, r5
 800aa4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa4e:	4853      	ldr	r0, [pc, #332]	@ (800ab9c <_printf_i+0x238>)
 800aa50:	6033      	str	r3, [r6, #0]
 800aa52:	bf14      	ite	ne
 800aa54:	230a      	movne	r3, #10
 800aa56:	2308      	moveq	r3, #8
 800aa58:	2100      	movs	r1, #0
 800aa5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa5e:	6866      	ldr	r6, [r4, #4]
 800aa60:	60a6      	str	r6, [r4, #8]
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	bfa2      	ittt	ge
 800aa66:	6821      	ldrge	r1, [r4, #0]
 800aa68:	f021 0104 	bicge.w	r1, r1, #4
 800aa6c:	6021      	strge	r1, [r4, #0]
 800aa6e:	b90d      	cbnz	r5, 800aa74 <_printf_i+0x110>
 800aa70:	2e00      	cmp	r6, #0
 800aa72:	d04b      	beq.n	800ab0c <_printf_i+0x1a8>
 800aa74:	4616      	mov	r6, r2
 800aa76:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa7a:	fb03 5711 	mls	r7, r3, r1, r5
 800aa7e:	5dc7      	ldrb	r7, [r0, r7]
 800aa80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa84:	462f      	mov	r7, r5
 800aa86:	42bb      	cmp	r3, r7
 800aa88:	460d      	mov	r5, r1
 800aa8a:	d9f4      	bls.n	800aa76 <_printf_i+0x112>
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d10b      	bne.n	800aaa8 <_printf_i+0x144>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	07df      	lsls	r7, r3, #31
 800aa94:	d508      	bpl.n	800aaa8 <_printf_i+0x144>
 800aa96:	6923      	ldr	r3, [r4, #16]
 800aa98:	6861      	ldr	r1, [r4, #4]
 800aa9a:	4299      	cmp	r1, r3
 800aa9c:	bfde      	ittt	le
 800aa9e:	2330      	movle	r3, #48	@ 0x30
 800aaa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aaa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aaa8:	1b92      	subs	r2, r2, r6
 800aaaa:	6122      	str	r2, [r4, #16]
 800aaac:	f8cd a000 	str.w	sl, [sp]
 800aab0:	464b      	mov	r3, r9
 800aab2:	aa03      	add	r2, sp, #12
 800aab4:	4621      	mov	r1, r4
 800aab6:	4640      	mov	r0, r8
 800aab8:	f7ff fee6 	bl	800a888 <_printf_common>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d14a      	bne.n	800ab56 <_printf_i+0x1f2>
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	b004      	add	sp, #16
 800aac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	f043 0320 	orr.w	r3, r3, #32
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	4833      	ldr	r0, [pc, #204]	@ (800aba0 <_printf_i+0x23c>)
 800aad4:	2778      	movs	r7, #120	@ 0x78
 800aad6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	6831      	ldr	r1, [r6, #0]
 800aade:	061f      	lsls	r7, r3, #24
 800aae0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aae4:	d402      	bmi.n	800aaec <_printf_i+0x188>
 800aae6:	065f      	lsls	r7, r3, #25
 800aae8:	bf48      	it	mi
 800aaea:	b2ad      	uxthmi	r5, r5
 800aaec:	6031      	str	r1, [r6, #0]
 800aaee:	07d9      	lsls	r1, r3, #31
 800aaf0:	bf44      	itt	mi
 800aaf2:	f043 0320 	orrmi.w	r3, r3, #32
 800aaf6:	6023      	strmi	r3, [r4, #0]
 800aaf8:	b11d      	cbz	r5, 800ab02 <_printf_i+0x19e>
 800aafa:	2310      	movs	r3, #16
 800aafc:	e7ac      	b.n	800aa58 <_printf_i+0xf4>
 800aafe:	4827      	ldr	r0, [pc, #156]	@ (800ab9c <_printf_i+0x238>)
 800ab00:	e7e9      	b.n	800aad6 <_printf_i+0x172>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	f023 0320 	bic.w	r3, r3, #32
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	e7f6      	b.n	800aafa <_printf_i+0x196>
 800ab0c:	4616      	mov	r6, r2
 800ab0e:	e7bd      	b.n	800aa8c <_printf_i+0x128>
 800ab10:	6833      	ldr	r3, [r6, #0]
 800ab12:	6825      	ldr	r5, [r4, #0]
 800ab14:	6961      	ldr	r1, [r4, #20]
 800ab16:	1d18      	adds	r0, r3, #4
 800ab18:	6030      	str	r0, [r6, #0]
 800ab1a:	062e      	lsls	r6, r5, #24
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	d501      	bpl.n	800ab24 <_printf_i+0x1c0>
 800ab20:	6019      	str	r1, [r3, #0]
 800ab22:	e002      	b.n	800ab2a <_printf_i+0x1c6>
 800ab24:	0668      	lsls	r0, r5, #25
 800ab26:	d5fb      	bpl.n	800ab20 <_printf_i+0x1bc>
 800ab28:	8019      	strh	r1, [r3, #0]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	6123      	str	r3, [r4, #16]
 800ab2e:	4616      	mov	r6, r2
 800ab30:	e7bc      	b.n	800aaac <_printf_i+0x148>
 800ab32:	6833      	ldr	r3, [r6, #0]
 800ab34:	1d1a      	adds	r2, r3, #4
 800ab36:	6032      	str	r2, [r6, #0]
 800ab38:	681e      	ldr	r6, [r3, #0]
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f7f5 fb66 	bl	8000210 <memchr>
 800ab44:	b108      	cbz	r0, 800ab4a <_printf_i+0x1e6>
 800ab46:	1b80      	subs	r0, r0, r6
 800ab48:	6060      	str	r0, [r4, #4]
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	6123      	str	r3, [r4, #16]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab54:	e7aa      	b.n	800aaac <_printf_i+0x148>
 800ab56:	6923      	ldr	r3, [r4, #16]
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	47d0      	blx	sl
 800ab60:	3001      	adds	r0, #1
 800ab62:	d0ad      	beq.n	800aac0 <_printf_i+0x15c>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	079b      	lsls	r3, r3, #30
 800ab68:	d413      	bmi.n	800ab92 <_printf_i+0x22e>
 800ab6a:	68e0      	ldr	r0, [r4, #12]
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	4298      	cmp	r0, r3
 800ab70:	bfb8      	it	lt
 800ab72:	4618      	movlt	r0, r3
 800ab74:	e7a6      	b.n	800aac4 <_printf_i+0x160>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4632      	mov	r2, r6
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	47d0      	blx	sl
 800ab80:	3001      	adds	r0, #1
 800ab82:	d09d      	beq.n	800aac0 <_printf_i+0x15c>
 800ab84:	3501      	adds	r5, #1
 800ab86:	68e3      	ldr	r3, [r4, #12]
 800ab88:	9903      	ldr	r1, [sp, #12]
 800ab8a:	1a5b      	subs	r3, r3, r1
 800ab8c:	42ab      	cmp	r3, r5
 800ab8e:	dcf2      	bgt.n	800ab76 <_printf_i+0x212>
 800ab90:	e7eb      	b.n	800ab6a <_printf_i+0x206>
 800ab92:	2500      	movs	r5, #0
 800ab94:	f104 0619 	add.w	r6, r4, #25
 800ab98:	e7f5      	b.n	800ab86 <_printf_i+0x222>
 800ab9a:	bf00      	nop
 800ab9c:	0800c141 	.word	0x0800c141
 800aba0:	0800c152 	.word	0x0800c152

0800aba4 <_scanf_chars>:
 800aba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba8:	4615      	mov	r5, r2
 800abaa:	688a      	ldr	r2, [r1, #8]
 800abac:	4680      	mov	r8, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	b932      	cbnz	r2, 800abc0 <_scanf_chars+0x1c>
 800abb2:	698a      	ldr	r2, [r1, #24]
 800abb4:	2a00      	cmp	r2, #0
 800abb6:	bf14      	ite	ne
 800abb8:	f04f 32ff 	movne.w	r2, #4294967295
 800abbc:	2201      	moveq	r2, #1
 800abbe:	608a      	str	r2, [r1, #8]
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ac54 <_scanf_chars+0xb0>
 800abc6:	06d1      	lsls	r1, r2, #27
 800abc8:	bf5f      	itttt	pl
 800abca:	681a      	ldrpl	r2, [r3, #0]
 800abcc:	1d11      	addpl	r1, r2, #4
 800abce:	6019      	strpl	r1, [r3, #0]
 800abd0:	6816      	ldrpl	r6, [r2, #0]
 800abd2:	2700      	movs	r7, #0
 800abd4:	69a0      	ldr	r0, [r4, #24]
 800abd6:	b188      	cbz	r0, 800abfc <_scanf_chars+0x58>
 800abd8:	2801      	cmp	r0, #1
 800abda:	d107      	bne.n	800abec <_scanf_chars+0x48>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	6963      	ldr	r3, [r4, #20]
 800abe2:	5c9b      	ldrb	r3, [r3, r2]
 800abe4:	b953      	cbnz	r3, 800abfc <_scanf_chars+0x58>
 800abe6:	2f00      	cmp	r7, #0
 800abe8:	d031      	beq.n	800ac4e <_scanf_chars+0xaa>
 800abea:	e022      	b.n	800ac32 <_scanf_chars+0x8e>
 800abec:	2802      	cmp	r0, #2
 800abee:	d120      	bne.n	800ac32 <_scanf_chars+0x8e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800abf8:	071b      	lsls	r3, r3, #28
 800abfa:	d41a      	bmi.n	800ac32 <_scanf_chars+0x8e>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	06da      	lsls	r2, r3, #27
 800ac00:	bf5e      	ittt	pl
 800ac02:	682b      	ldrpl	r3, [r5, #0]
 800ac04:	781b      	ldrbpl	r3, [r3, #0]
 800ac06:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ac0a:	682a      	ldr	r2, [r5, #0]
 800ac0c:	686b      	ldr	r3, [r5, #4]
 800ac0e:	3201      	adds	r2, #1
 800ac10:	602a      	str	r2, [r5, #0]
 800ac12:	68a2      	ldr	r2, [r4, #8]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	3a01      	subs	r2, #1
 800ac18:	606b      	str	r3, [r5, #4]
 800ac1a:	3701      	adds	r7, #1
 800ac1c:	60a2      	str	r2, [r4, #8]
 800ac1e:	b142      	cbz	r2, 800ac32 <_scanf_chars+0x8e>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dcd7      	bgt.n	800abd4 <_scanf_chars+0x30>
 800ac24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4798      	blx	r3
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0d0      	beq.n	800abd4 <_scanf_chars+0x30>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	f013 0310 	ands.w	r3, r3, #16
 800ac38:	d105      	bne.n	800ac46 <_scanf_chars+0xa2>
 800ac3a:	68e2      	ldr	r2, [r4, #12]
 800ac3c:	3201      	adds	r2, #1
 800ac3e:	60e2      	str	r2, [r4, #12]
 800ac40:	69a2      	ldr	r2, [r4, #24]
 800ac42:	b102      	cbz	r2, 800ac46 <_scanf_chars+0xa2>
 800ac44:	7033      	strb	r3, [r6, #0]
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	443b      	add	r3, r7
 800ac4a:	6123      	str	r3, [r4, #16]
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac52:	bf00      	nop
 800ac54:	0800be49 	.word	0x0800be49

0800ac58 <_scanf_i>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	4698      	mov	r8, r3
 800ac5e:	4b74      	ldr	r3, [pc, #464]	@ (800ae30 <_scanf_i+0x1d8>)
 800ac60:	460c      	mov	r4, r1
 800ac62:	4682      	mov	sl, r0
 800ac64:	4616      	mov	r6, r2
 800ac66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	ab03      	add	r3, sp, #12
 800ac6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ac72:	4b70      	ldr	r3, [pc, #448]	@ (800ae34 <_scanf_i+0x1dc>)
 800ac74:	69a1      	ldr	r1, [r4, #24]
 800ac76:	4a70      	ldr	r2, [pc, #448]	@ (800ae38 <_scanf_i+0x1e0>)
 800ac78:	2903      	cmp	r1, #3
 800ac7a:	bf08      	it	eq
 800ac7c:	461a      	moveq	r2, r3
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	9201      	str	r2, [sp, #4]
 800ac82:	1e5a      	subs	r2, r3, #1
 800ac84:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ac88:	bf88      	it	hi
 800ac8a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ac8e:	4627      	mov	r7, r4
 800ac90:	bf82      	ittt	hi
 800ac92:	eb03 0905 	addhi.w	r9, r3, r5
 800ac96:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ac9a:	60a3      	strhi	r3, [r4, #8]
 800ac9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aca0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800aca4:	bf98      	it	ls
 800aca6:	f04f 0900 	movls.w	r9, #0
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	463d      	mov	r5, r7
 800acae:	f04f 0b00 	mov.w	fp, #0
 800acb2:	6831      	ldr	r1, [r6, #0]
 800acb4:	ab03      	add	r3, sp, #12
 800acb6:	7809      	ldrb	r1, [r1, #0]
 800acb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800acbc:	2202      	movs	r2, #2
 800acbe:	f7f5 faa7 	bl	8000210 <memchr>
 800acc2:	b328      	cbz	r0, 800ad10 <_scanf_i+0xb8>
 800acc4:	f1bb 0f01 	cmp.w	fp, #1
 800acc8:	d159      	bne.n	800ad7e <_scanf_i+0x126>
 800acca:	6862      	ldr	r2, [r4, #4]
 800accc:	b92a      	cbnz	r2, 800acda <_scanf_i+0x82>
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	2108      	movs	r1, #8
 800acd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acd6:	6061      	str	r1, [r4, #4]
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	6822      	ldr	r2, [r4, #0]
 800acdc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ace0:	6022      	str	r2, [r4, #0]
 800ace2:	68a2      	ldr	r2, [r4, #8]
 800ace4:	1e51      	subs	r1, r2, #1
 800ace6:	60a1      	str	r1, [r4, #8]
 800ace8:	b192      	cbz	r2, 800ad10 <_scanf_i+0xb8>
 800acea:	6832      	ldr	r2, [r6, #0]
 800acec:	1c51      	adds	r1, r2, #1
 800acee:	6031      	str	r1, [r6, #0]
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	f805 2b01 	strb.w	r2, [r5], #1
 800acf6:	6872      	ldr	r2, [r6, #4]
 800acf8:	3a01      	subs	r2, #1
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	6072      	str	r2, [r6, #4]
 800acfe:	dc07      	bgt.n	800ad10 <_scanf_i+0xb8>
 800ad00:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ad04:	4631      	mov	r1, r6
 800ad06:	4650      	mov	r0, sl
 800ad08:	4790      	blx	r2
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f040 8085 	bne.w	800ae1a <_scanf_i+0x1c2>
 800ad10:	f10b 0b01 	add.w	fp, fp, #1
 800ad14:	f1bb 0f03 	cmp.w	fp, #3
 800ad18:	d1cb      	bne.n	800acb2 <_scanf_i+0x5a>
 800ad1a:	6863      	ldr	r3, [r4, #4]
 800ad1c:	b90b      	cbnz	r3, 800ad22 <_scanf_i+0xca>
 800ad1e:	230a      	movs	r3, #10
 800ad20:	6063      	str	r3, [r4, #4]
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	4945      	ldr	r1, [pc, #276]	@ (800ae3c <_scanf_i+0x1e4>)
 800ad26:	6960      	ldr	r0, [r4, #20]
 800ad28:	1ac9      	subs	r1, r1, r3
 800ad2a:	f000 f935 	bl	800af98 <__sccl>
 800ad2e:	f04f 0b00 	mov.w	fp, #0
 800ad32:	68a3      	ldr	r3, [r4, #8]
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d03d      	beq.n	800adb6 <_scanf_i+0x15e>
 800ad3a:	6831      	ldr	r1, [r6, #0]
 800ad3c:	6960      	ldr	r0, [r4, #20]
 800ad3e:	f891 c000 	ldrb.w	ip, [r1]
 800ad42:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d035      	beq.n	800adb6 <_scanf_i+0x15e>
 800ad4a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ad4e:	d124      	bne.n	800ad9a <_scanf_i+0x142>
 800ad50:	0510      	lsls	r0, r2, #20
 800ad52:	d522      	bpl.n	800ad9a <_scanf_i+0x142>
 800ad54:	f10b 0b01 	add.w	fp, fp, #1
 800ad58:	f1b9 0f00 	cmp.w	r9, #0
 800ad5c:	d003      	beq.n	800ad66 <_scanf_i+0x10e>
 800ad5e:	3301      	adds	r3, #1
 800ad60:	f109 39ff 	add.w	r9, r9, #4294967295
 800ad64:	60a3      	str	r3, [r4, #8]
 800ad66:	6873      	ldr	r3, [r6, #4]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	6073      	str	r3, [r6, #4]
 800ad6e:	dd1b      	ble.n	800ada8 <_scanf_i+0x150>
 800ad70:	6833      	ldr	r3, [r6, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	60a3      	str	r3, [r4, #8]
 800ad7c:	e7d9      	b.n	800ad32 <_scanf_i+0xda>
 800ad7e:	f1bb 0f02 	cmp.w	fp, #2
 800ad82:	d1ae      	bne.n	800ace2 <_scanf_i+0x8a>
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ad8a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ad8e:	d1bf      	bne.n	800ad10 <_scanf_i+0xb8>
 800ad90:	2110      	movs	r1, #16
 800ad92:	6061      	str	r1, [r4, #4]
 800ad94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad98:	e7a2      	b.n	800ace0 <_scanf_i+0x88>
 800ad9a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ad9e:	6022      	str	r2, [r4, #0]
 800ada0:	780b      	ldrb	r3, [r1, #0]
 800ada2:	f805 3b01 	strb.w	r3, [r5], #1
 800ada6:	e7de      	b.n	800ad66 <_scanf_i+0x10e>
 800ada8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800adac:	4631      	mov	r1, r6
 800adae:	4650      	mov	r0, sl
 800adb0:	4798      	blx	r3
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0df      	beq.n	800ad76 <_scanf_i+0x11e>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	05d9      	lsls	r1, r3, #23
 800adba:	d50d      	bpl.n	800add8 <_scanf_i+0x180>
 800adbc:	42bd      	cmp	r5, r7
 800adbe:	d909      	bls.n	800add4 <_scanf_i+0x17c>
 800adc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800adc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800adc8:	4632      	mov	r2, r6
 800adca:	4650      	mov	r0, sl
 800adcc:	4798      	blx	r3
 800adce:	f105 39ff 	add.w	r9, r5, #4294967295
 800add2:	464d      	mov	r5, r9
 800add4:	42bd      	cmp	r5, r7
 800add6:	d028      	beq.n	800ae2a <_scanf_i+0x1d2>
 800add8:	6822      	ldr	r2, [r4, #0]
 800adda:	f012 0210 	ands.w	r2, r2, #16
 800adde:	d113      	bne.n	800ae08 <_scanf_i+0x1b0>
 800ade0:	702a      	strb	r2, [r5, #0]
 800ade2:	6863      	ldr	r3, [r4, #4]
 800ade4:	9e01      	ldr	r6, [sp, #4]
 800ade6:	4639      	mov	r1, r7
 800ade8:	4650      	mov	r0, sl
 800adea:	47b0      	blx	r6
 800adec:	f8d8 3000 	ldr.w	r3, [r8]
 800adf0:	6821      	ldr	r1, [r4, #0]
 800adf2:	1d1a      	adds	r2, r3, #4
 800adf4:	f8c8 2000 	str.w	r2, [r8]
 800adf8:	f011 0f20 	tst.w	r1, #32
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	d00f      	beq.n	800ae20 <_scanf_i+0x1c8>
 800ae00:	6018      	str	r0, [r3, #0]
 800ae02:	68e3      	ldr	r3, [r4, #12]
 800ae04:	3301      	adds	r3, #1
 800ae06:	60e3      	str	r3, [r4, #12]
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	1bed      	subs	r5, r5, r7
 800ae0c:	445d      	add	r5, fp
 800ae0e:	442b      	add	r3, r5
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	2000      	movs	r0, #0
 800ae14:	b007      	add	sp, #28
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	f04f 0b00 	mov.w	fp, #0
 800ae1e:	e7ca      	b.n	800adb6 <_scanf_i+0x15e>
 800ae20:	07ca      	lsls	r2, r1, #31
 800ae22:	bf4c      	ite	mi
 800ae24:	8018      	strhmi	r0, [r3, #0]
 800ae26:	6018      	strpl	r0, [r3, #0]
 800ae28:	e7eb      	b.n	800ae02 <_scanf_i+0x1aa>
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	e7f2      	b.n	800ae14 <_scanf_i+0x1bc>
 800ae2e:	bf00      	nop
 800ae30:	0800bdbc 	.word	0x0800bdbc
 800ae34:	0800b20d 	.word	0x0800b20d
 800ae38:	0800b2ed 	.word	0x0800b2ed
 800ae3c:	0800c173 	.word	0x0800c173

0800ae40 <__sflush_r>:
 800ae40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae48:	0716      	lsls	r6, r2, #28
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	d454      	bmi.n	800aefa <__sflush_r+0xba>
 800ae50:	684b      	ldr	r3, [r1, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dc02      	bgt.n	800ae5c <__sflush_r+0x1c>
 800ae56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dd48      	ble.n	800aeee <__sflush_r+0xae>
 800ae5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d045      	beq.n	800aeee <__sflush_r+0xae>
 800ae62:	2300      	movs	r3, #0
 800ae64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae68:	682f      	ldr	r7, [r5, #0]
 800ae6a:	6a21      	ldr	r1, [r4, #32]
 800ae6c:	602b      	str	r3, [r5, #0]
 800ae6e:	d030      	beq.n	800aed2 <__sflush_r+0x92>
 800ae70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	0759      	lsls	r1, r3, #29
 800ae76:	d505      	bpl.n	800ae84 <__sflush_r+0x44>
 800ae78:	6863      	ldr	r3, [r4, #4]
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae7e:	b10b      	cbz	r3, 800ae84 <__sflush_r+0x44>
 800ae80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	2300      	movs	r3, #0
 800ae86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae88:	6a21      	ldr	r1, [r4, #32]
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b0      	blx	r6
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	d106      	bne.n	800aea2 <__sflush_r+0x62>
 800ae94:	6829      	ldr	r1, [r5, #0]
 800ae96:	291d      	cmp	r1, #29
 800ae98:	d82b      	bhi.n	800aef2 <__sflush_r+0xb2>
 800ae9a:	4a2a      	ldr	r2, [pc, #168]	@ (800af44 <__sflush_r+0x104>)
 800ae9c:	410a      	asrs	r2, r1
 800ae9e:	07d6      	lsls	r6, r2, #31
 800aea0:	d427      	bmi.n	800aef2 <__sflush_r+0xb2>
 800aea2:	2200      	movs	r2, #0
 800aea4:	6062      	str	r2, [r4, #4]
 800aea6:	04d9      	lsls	r1, r3, #19
 800aea8:	6922      	ldr	r2, [r4, #16]
 800aeaa:	6022      	str	r2, [r4, #0]
 800aeac:	d504      	bpl.n	800aeb8 <__sflush_r+0x78>
 800aeae:	1c42      	adds	r2, r0, #1
 800aeb0:	d101      	bne.n	800aeb6 <__sflush_r+0x76>
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	b903      	cbnz	r3, 800aeb8 <__sflush_r+0x78>
 800aeb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800aeb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeba:	602f      	str	r7, [r5, #0]
 800aebc:	b1b9      	cbz	r1, 800aeee <__sflush_r+0xae>
 800aebe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aec2:	4299      	cmp	r1, r3
 800aec4:	d002      	beq.n	800aecc <__sflush_r+0x8c>
 800aec6:	4628      	mov	r0, r5
 800aec8:	f7fe f95e 	bl	8009188 <_free_r>
 800aecc:	2300      	movs	r3, #0
 800aece:	6363      	str	r3, [r4, #52]	@ 0x34
 800aed0:	e00d      	b.n	800aeee <__sflush_r+0xae>
 800aed2:	2301      	movs	r3, #1
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b0      	blx	r6
 800aed8:	4602      	mov	r2, r0
 800aeda:	1c50      	adds	r0, r2, #1
 800aedc:	d1c9      	bne.n	800ae72 <__sflush_r+0x32>
 800aede:	682b      	ldr	r3, [r5, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0c6      	beq.n	800ae72 <__sflush_r+0x32>
 800aee4:	2b1d      	cmp	r3, #29
 800aee6:	d001      	beq.n	800aeec <__sflush_r+0xac>
 800aee8:	2b16      	cmp	r3, #22
 800aeea:	d11e      	bne.n	800af2a <__sflush_r+0xea>
 800aeec:	602f      	str	r7, [r5, #0]
 800aeee:	2000      	movs	r0, #0
 800aef0:	e022      	b.n	800af38 <__sflush_r+0xf8>
 800aef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aef6:	b21b      	sxth	r3, r3
 800aef8:	e01b      	b.n	800af32 <__sflush_r+0xf2>
 800aefa:	690f      	ldr	r7, [r1, #16]
 800aefc:	2f00      	cmp	r7, #0
 800aefe:	d0f6      	beq.n	800aeee <__sflush_r+0xae>
 800af00:	0793      	lsls	r3, r2, #30
 800af02:	680e      	ldr	r6, [r1, #0]
 800af04:	bf08      	it	eq
 800af06:	694b      	ldreq	r3, [r1, #20]
 800af08:	600f      	str	r7, [r1, #0]
 800af0a:	bf18      	it	ne
 800af0c:	2300      	movne	r3, #0
 800af0e:	eba6 0807 	sub.w	r8, r6, r7
 800af12:	608b      	str	r3, [r1, #8]
 800af14:	f1b8 0f00 	cmp.w	r8, #0
 800af18:	dde9      	ble.n	800aeee <__sflush_r+0xae>
 800af1a:	6a21      	ldr	r1, [r4, #32]
 800af1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af1e:	4643      	mov	r3, r8
 800af20:	463a      	mov	r2, r7
 800af22:	4628      	mov	r0, r5
 800af24:	47b0      	blx	r6
 800af26:	2800      	cmp	r0, #0
 800af28:	dc08      	bgt.n	800af3c <__sflush_r+0xfc>
 800af2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af3c:	4407      	add	r7, r0
 800af3e:	eba8 0800 	sub.w	r8, r8, r0
 800af42:	e7e7      	b.n	800af14 <__sflush_r+0xd4>
 800af44:	dfbffffe 	.word	0xdfbffffe

0800af48 <_fflush_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	690b      	ldr	r3, [r1, #16]
 800af4c:	4605      	mov	r5, r0
 800af4e:	460c      	mov	r4, r1
 800af50:	b913      	cbnz	r3, 800af58 <_fflush_r+0x10>
 800af52:	2500      	movs	r5, #0
 800af54:	4628      	mov	r0, r5
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	b118      	cbz	r0, 800af62 <_fflush_r+0x1a>
 800af5a:	6a03      	ldr	r3, [r0, #32]
 800af5c:	b90b      	cbnz	r3, 800af62 <_fflush_r+0x1a>
 800af5e:	f7fd ff6b 	bl	8008e38 <__sinit>
 800af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0f3      	beq.n	800af52 <_fflush_r+0xa>
 800af6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af6c:	07d0      	lsls	r0, r2, #31
 800af6e:	d404      	bmi.n	800af7a <_fflush_r+0x32>
 800af70:	0599      	lsls	r1, r3, #22
 800af72:	d402      	bmi.n	800af7a <_fflush_r+0x32>
 800af74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af76:	f7fe f8e4 	bl	8009142 <__retarget_lock_acquire_recursive>
 800af7a:	4628      	mov	r0, r5
 800af7c:	4621      	mov	r1, r4
 800af7e:	f7ff ff5f 	bl	800ae40 <__sflush_r>
 800af82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af84:	07da      	lsls	r2, r3, #31
 800af86:	4605      	mov	r5, r0
 800af88:	d4e4      	bmi.n	800af54 <_fflush_r+0xc>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	059b      	lsls	r3, r3, #22
 800af8e:	d4e1      	bmi.n	800af54 <_fflush_r+0xc>
 800af90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af92:	f7fe f8d7 	bl	8009144 <__retarget_lock_release_recursive>
 800af96:	e7dd      	b.n	800af54 <_fflush_r+0xc>

0800af98 <__sccl>:
 800af98:	b570      	push	{r4, r5, r6, lr}
 800af9a:	780b      	ldrb	r3, [r1, #0]
 800af9c:	4604      	mov	r4, r0
 800af9e:	2b5e      	cmp	r3, #94	@ 0x5e
 800afa0:	bf0b      	itete	eq
 800afa2:	784b      	ldrbeq	r3, [r1, #1]
 800afa4:	1c4a      	addne	r2, r1, #1
 800afa6:	1c8a      	addeq	r2, r1, #2
 800afa8:	2100      	movne	r1, #0
 800afaa:	bf08      	it	eq
 800afac:	2101      	moveq	r1, #1
 800afae:	3801      	subs	r0, #1
 800afb0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800afb4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800afb8:	42a8      	cmp	r0, r5
 800afba:	d1fb      	bne.n	800afb4 <__sccl+0x1c>
 800afbc:	b90b      	cbnz	r3, 800afc2 <__sccl+0x2a>
 800afbe:	1e50      	subs	r0, r2, #1
 800afc0:	bd70      	pop	{r4, r5, r6, pc}
 800afc2:	f081 0101 	eor.w	r1, r1, #1
 800afc6:	54e1      	strb	r1, [r4, r3]
 800afc8:	4610      	mov	r0, r2
 800afca:	4602      	mov	r2, r0
 800afcc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afd0:	2d2d      	cmp	r5, #45	@ 0x2d
 800afd2:	d005      	beq.n	800afe0 <__sccl+0x48>
 800afd4:	2d5d      	cmp	r5, #93	@ 0x5d
 800afd6:	d016      	beq.n	800b006 <__sccl+0x6e>
 800afd8:	2d00      	cmp	r5, #0
 800afda:	d0f1      	beq.n	800afc0 <__sccl+0x28>
 800afdc:	462b      	mov	r3, r5
 800afde:	e7f2      	b.n	800afc6 <__sccl+0x2e>
 800afe0:	7846      	ldrb	r6, [r0, #1]
 800afe2:	2e5d      	cmp	r6, #93	@ 0x5d
 800afe4:	d0fa      	beq.n	800afdc <__sccl+0x44>
 800afe6:	42b3      	cmp	r3, r6
 800afe8:	dcf8      	bgt.n	800afdc <__sccl+0x44>
 800afea:	3002      	adds	r0, #2
 800afec:	461a      	mov	r2, r3
 800afee:	3201      	adds	r2, #1
 800aff0:	4296      	cmp	r6, r2
 800aff2:	54a1      	strb	r1, [r4, r2]
 800aff4:	dcfb      	bgt.n	800afee <__sccl+0x56>
 800aff6:	1af2      	subs	r2, r6, r3
 800aff8:	3a01      	subs	r2, #1
 800affa:	1c5d      	adds	r5, r3, #1
 800affc:	42b3      	cmp	r3, r6
 800affe:	bfa8      	it	ge
 800b000:	2200      	movge	r2, #0
 800b002:	18ab      	adds	r3, r5, r2
 800b004:	e7e1      	b.n	800afca <__sccl+0x32>
 800b006:	4610      	mov	r0, r2
 800b008:	e7da      	b.n	800afc0 <__sccl+0x28>

0800b00a <__submore>:
 800b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b016:	4299      	cmp	r1, r3
 800b018:	d11d      	bne.n	800b056 <__submore+0x4c>
 800b01a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b01e:	f7fc ffad 	bl	8007f7c <_malloc_r>
 800b022:	b918      	cbnz	r0, 800b02c <__submore+0x22>
 800b024:	f04f 30ff 	mov.w	r0, #4294967295
 800b028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b02c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b030:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b032:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b036:	6360      	str	r0, [r4, #52]	@ 0x34
 800b038:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b03c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b040:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b044:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b048:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b04c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b050:	6020      	str	r0, [r4, #0]
 800b052:	2000      	movs	r0, #0
 800b054:	e7e8      	b.n	800b028 <__submore+0x1e>
 800b056:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b058:	0077      	lsls	r7, r6, #1
 800b05a:	463a      	mov	r2, r7
 800b05c:	f7fd f822 	bl	80080a4 <_realloc_r>
 800b060:	4605      	mov	r5, r0
 800b062:	2800      	cmp	r0, #0
 800b064:	d0de      	beq.n	800b024 <__submore+0x1a>
 800b066:	eb00 0806 	add.w	r8, r0, r6
 800b06a:	4601      	mov	r1, r0
 800b06c:	4632      	mov	r2, r6
 800b06e:	4640      	mov	r0, r8
 800b070:	f7fe f871 	bl	8009156 <memcpy>
 800b074:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b078:	f8c4 8000 	str.w	r8, [r4]
 800b07c:	e7e9      	b.n	800b052 <__submore+0x48>

0800b07e <memmove>:
 800b07e:	4288      	cmp	r0, r1
 800b080:	b510      	push	{r4, lr}
 800b082:	eb01 0402 	add.w	r4, r1, r2
 800b086:	d902      	bls.n	800b08e <memmove+0x10>
 800b088:	4284      	cmp	r4, r0
 800b08a:	4623      	mov	r3, r4
 800b08c:	d807      	bhi.n	800b09e <memmove+0x20>
 800b08e:	1e43      	subs	r3, r0, #1
 800b090:	42a1      	cmp	r1, r4
 800b092:	d008      	beq.n	800b0a6 <memmove+0x28>
 800b094:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b098:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b09c:	e7f8      	b.n	800b090 <memmove+0x12>
 800b09e:	4402      	add	r2, r0
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	428a      	cmp	r2, r1
 800b0a4:	d100      	bne.n	800b0a8 <memmove+0x2a>
 800b0a6:	bd10      	pop	{r4, pc}
 800b0a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0b0:	e7f7      	b.n	800b0a2 <memmove+0x24>
	...

0800b0b4 <__assert_func>:
 800b0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0b6:	4614      	mov	r4, r2
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4b09      	ldr	r3, [pc, #36]	@ (800b0e0 <__assert_func+0x2c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4605      	mov	r5, r0
 800b0c0:	68d8      	ldr	r0, [r3, #12]
 800b0c2:	b954      	cbnz	r4, 800b0da <__assert_func+0x26>
 800b0c4:	4b07      	ldr	r3, [pc, #28]	@ (800b0e4 <__assert_func+0x30>)
 800b0c6:	461c      	mov	r4, r3
 800b0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0cc:	9100      	str	r1, [sp, #0]
 800b0ce:	462b      	mov	r3, r5
 800b0d0:	4905      	ldr	r1, [pc, #20]	@ (800b0e8 <__assert_func+0x34>)
 800b0d2:	f000 f90d 	bl	800b2f0 <fiprintf>
 800b0d6:	f000 f91d 	bl	800b314 <abort>
 800b0da:	4b04      	ldr	r3, [pc, #16]	@ (800b0ec <__assert_func+0x38>)
 800b0dc:	e7f4      	b.n	800b0c8 <__assert_func+0x14>
 800b0de:	bf00      	nop
 800b0e0:	200001e8 	.word	0x200001e8
 800b0e4:	0800c1b9 	.word	0x0800c1b9
 800b0e8:	0800c18b 	.word	0x0800c18b
 800b0ec:	0800c17e 	.word	0x0800c17e

0800b0f0 <_calloc_r>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	fba1 5402 	umull	r5, r4, r1, r2
 800b0f6:	b93c      	cbnz	r4, 800b108 <_calloc_r+0x18>
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7fc ff3f 	bl	8007f7c <_malloc_r>
 800b0fe:	4606      	mov	r6, r0
 800b100:	b928      	cbnz	r0, 800b10e <_calloc_r+0x1e>
 800b102:	2600      	movs	r6, #0
 800b104:	4630      	mov	r0, r6
 800b106:	bd70      	pop	{r4, r5, r6, pc}
 800b108:	220c      	movs	r2, #12
 800b10a:	6002      	str	r2, [r0, #0]
 800b10c:	e7f9      	b.n	800b102 <_calloc_r+0x12>
 800b10e:	462a      	mov	r2, r5
 800b110:	4621      	mov	r1, r4
 800b112:	f7fd ff56 	bl	8008fc2 <memset>
 800b116:	e7f5      	b.n	800b104 <_calloc_r+0x14>

0800b118 <_strtol_l.constprop.0>:
 800b118:	2b24      	cmp	r3, #36	@ 0x24
 800b11a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11e:	4686      	mov	lr, r0
 800b120:	4690      	mov	r8, r2
 800b122:	d801      	bhi.n	800b128 <_strtol_l.constprop.0+0x10>
 800b124:	2b01      	cmp	r3, #1
 800b126:	d106      	bne.n	800b136 <_strtol_l.constprop.0+0x1e>
 800b128:	f7fd ffe0 	bl	80090ec <__errno>
 800b12c:	2316      	movs	r3, #22
 800b12e:	6003      	str	r3, [r0, #0]
 800b130:	2000      	movs	r0, #0
 800b132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b136:	4834      	ldr	r0, [pc, #208]	@ (800b208 <_strtol_l.constprop.0+0xf0>)
 800b138:	460d      	mov	r5, r1
 800b13a:	462a      	mov	r2, r5
 800b13c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b140:	5d06      	ldrb	r6, [r0, r4]
 800b142:	f016 0608 	ands.w	r6, r6, #8
 800b146:	d1f8      	bne.n	800b13a <_strtol_l.constprop.0+0x22>
 800b148:	2c2d      	cmp	r4, #45	@ 0x2d
 800b14a:	d12d      	bne.n	800b1a8 <_strtol_l.constprop.0+0x90>
 800b14c:	782c      	ldrb	r4, [r5, #0]
 800b14e:	2601      	movs	r6, #1
 800b150:	1c95      	adds	r5, r2, #2
 800b152:	f033 0210 	bics.w	r2, r3, #16
 800b156:	d109      	bne.n	800b16c <_strtol_l.constprop.0+0x54>
 800b158:	2c30      	cmp	r4, #48	@ 0x30
 800b15a:	d12a      	bne.n	800b1b2 <_strtol_l.constprop.0+0x9a>
 800b15c:	782a      	ldrb	r2, [r5, #0]
 800b15e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b162:	2a58      	cmp	r2, #88	@ 0x58
 800b164:	d125      	bne.n	800b1b2 <_strtol_l.constprop.0+0x9a>
 800b166:	786c      	ldrb	r4, [r5, #1]
 800b168:	2310      	movs	r3, #16
 800b16a:	3502      	adds	r5, #2
 800b16c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b170:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b174:	2200      	movs	r2, #0
 800b176:	fbbc f9f3 	udiv	r9, ip, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b180:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b184:	2f09      	cmp	r7, #9
 800b186:	d81b      	bhi.n	800b1c0 <_strtol_l.constprop.0+0xa8>
 800b188:	463c      	mov	r4, r7
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	dd27      	ble.n	800b1de <_strtol_l.constprop.0+0xc6>
 800b18e:	1c57      	adds	r7, r2, #1
 800b190:	d007      	beq.n	800b1a2 <_strtol_l.constprop.0+0x8a>
 800b192:	4581      	cmp	r9, r0
 800b194:	d320      	bcc.n	800b1d8 <_strtol_l.constprop.0+0xc0>
 800b196:	d101      	bne.n	800b19c <_strtol_l.constprop.0+0x84>
 800b198:	45a2      	cmp	sl, r4
 800b19a:	db1d      	blt.n	800b1d8 <_strtol_l.constprop.0+0xc0>
 800b19c:	fb00 4003 	mla	r0, r0, r3, r4
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1a6:	e7eb      	b.n	800b180 <_strtol_l.constprop.0+0x68>
 800b1a8:	2c2b      	cmp	r4, #43	@ 0x2b
 800b1aa:	bf04      	itt	eq
 800b1ac:	782c      	ldrbeq	r4, [r5, #0]
 800b1ae:	1c95      	addeq	r5, r2, #2
 800b1b0:	e7cf      	b.n	800b152 <_strtol_l.constprop.0+0x3a>
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1da      	bne.n	800b16c <_strtol_l.constprop.0+0x54>
 800b1b6:	2c30      	cmp	r4, #48	@ 0x30
 800b1b8:	bf0c      	ite	eq
 800b1ba:	2308      	moveq	r3, #8
 800b1bc:	230a      	movne	r3, #10
 800b1be:	e7d5      	b.n	800b16c <_strtol_l.constprop.0+0x54>
 800b1c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b1c4:	2f19      	cmp	r7, #25
 800b1c6:	d801      	bhi.n	800b1cc <_strtol_l.constprop.0+0xb4>
 800b1c8:	3c37      	subs	r4, #55	@ 0x37
 800b1ca:	e7de      	b.n	800b18a <_strtol_l.constprop.0+0x72>
 800b1cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b1d0:	2f19      	cmp	r7, #25
 800b1d2:	d804      	bhi.n	800b1de <_strtol_l.constprop.0+0xc6>
 800b1d4:	3c57      	subs	r4, #87	@ 0x57
 800b1d6:	e7d8      	b.n	800b18a <_strtol_l.constprop.0+0x72>
 800b1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1dc:	e7e1      	b.n	800b1a2 <_strtol_l.constprop.0+0x8a>
 800b1de:	1c53      	adds	r3, r2, #1
 800b1e0:	d108      	bne.n	800b1f4 <_strtol_l.constprop.0+0xdc>
 800b1e2:	2322      	movs	r3, #34	@ 0x22
 800b1e4:	f8ce 3000 	str.w	r3, [lr]
 800b1e8:	4660      	mov	r0, ip
 800b1ea:	f1b8 0f00 	cmp.w	r8, #0
 800b1ee:	d0a0      	beq.n	800b132 <_strtol_l.constprop.0+0x1a>
 800b1f0:	1e69      	subs	r1, r5, #1
 800b1f2:	e006      	b.n	800b202 <_strtol_l.constprop.0+0xea>
 800b1f4:	b106      	cbz	r6, 800b1f8 <_strtol_l.constprop.0+0xe0>
 800b1f6:	4240      	negs	r0, r0
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	d099      	beq.n	800b132 <_strtol_l.constprop.0+0x1a>
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	d1f6      	bne.n	800b1f0 <_strtol_l.constprop.0+0xd8>
 800b202:	f8c8 1000 	str.w	r1, [r8]
 800b206:	e794      	b.n	800b132 <_strtol_l.constprop.0+0x1a>
 800b208:	0800be49 	.word	0x0800be49

0800b20c <_strtol_r>:
 800b20c:	f7ff bf84 	b.w	800b118 <_strtol_l.constprop.0>

0800b210 <_strtoul_l.constprop.0>:
 800b210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b214:	4e34      	ldr	r6, [pc, #208]	@ (800b2e8 <_strtoul_l.constprop.0+0xd8>)
 800b216:	4686      	mov	lr, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	4628      	mov	r0, r5
 800b21c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b220:	5d37      	ldrb	r7, [r6, r4]
 800b222:	f017 0708 	ands.w	r7, r7, #8
 800b226:	d1f8      	bne.n	800b21a <_strtoul_l.constprop.0+0xa>
 800b228:	2c2d      	cmp	r4, #45	@ 0x2d
 800b22a:	d12f      	bne.n	800b28c <_strtoul_l.constprop.0+0x7c>
 800b22c:	782c      	ldrb	r4, [r5, #0]
 800b22e:	2701      	movs	r7, #1
 800b230:	1c85      	adds	r5, r0, #2
 800b232:	f033 0010 	bics.w	r0, r3, #16
 800b236:	d109      	bne.n	800b24c <_strtoul_l.constprop.0+0x3c>
 800b238:	2c30      	cmp	r4, #48	@ 0x30
 800b23a:	d12c      	bne.n	800b296 <_strtoul_l.constprop.0+0x86>
 800b23c:	7828      	ldrb	r0, [r5, #0]
 800b23e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b242:	2858      	cmp	r0, #88	@ 0x58
 800b244:	d127      	bne.n	800b296 <_strtoul_l.constprop.0+0x86>
 800b246:	786c      	ldrb	r4, [r5, #1]
 800b248:	2310      	movs	r3, #16
 800b24a:	3502      	adds	r5, #2
 800b24c:	f04f 38ff 	mov.w	r8, #4294967295
 800b250:	2600      	movs	r6, #0
 800b252:	fbb8 f8f3 	udiv	r8, r8, r3
 800b256:	fb03 f908 	mul.w	r9, r3, r8
 800b25a:	ea6f 0909 	mvn.w	r9, r9
 800b25e:	4630      	mov	r0, r6
 800b260:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b264:	f1bc 0f09 	cmp.w	ip, #9
 800b268:	d81c      	bhi.n	800b2a4 <_strtoul_l.constprop.0+0x94>
 800b26a:	4664      	mov	r4, ip
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	dd2a      	ble.n	800b2c6 <_strtoul_l.constprop.0+0xb6>
 800b270:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b274:	d007      	beq.n	800b286 <_strtoul_l.constprop.0+0x76>
 800b276:	4580      	cmp	r8, r0
 800b278:	d322      	bcc.n	800b2c0 <_strtoul_l.constprop.0+0xb0>
 800b27a:	d101      	bne.n	800b280 <_strtoul_l.constprop.0+0x70>
 800b27c:	45a1      	cmp	r9, r4
 800b27e:	db1f      	blt.n	800b2c0 <_strtoul_l.constprop.0+0xb0>
 800b280:	fb00 4003 	mla	r0, r0, r3, r4
 800b284:	2601      	movs	r6, #1
 800b286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b28a:	e7e9      	b.n	800b260 <_strtoul_l.constprop.0+0x50>
 800b28c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b28e:	bf04      	itt	eq
 800b290:	782c      	ldrbeq	r4, [r5, #0]
 800b292:	1c85      	addeq	r5, r0, #2
 800b294:	e7cd      	b.n	800b232 <_strtoul_l.constprop.0+0x22>
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1d8      	bne.n	800b24c <_strtoul_l.constprop.0+0x3c>
 800b29a:	2c30      	cmp	r4, #48	@ 0x30
 800b29c:	bf0c      	ite	eq
 800b29e:	2308      	moveq	r3, #8
 800b2a0:	230a      	movne	r3, #10
 800b2a2:	e7d3      	b.n	800b24c <_strtoul_l.constprop.0+0x3c>
 800b2a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b2a8:	f1bc 0f19 	cmp.w	ip, #25
 800b2ac:	d801      	bhi.n	800b2b2 <_strtoul_l.constprop.0+0xa2>
 800b2ae:	3c37      	subs	r4, #55	@ 0x37
 800b2b0:	e7dc      	b.n	800b26c <_strtoul_l.constprop.0+0x5c>
 800b2b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b2b6:	f1bc 0f19 	cmp.w	ip, #25
 800b2ba:	d804      	bhi.n	800b2c6 <_strtoul_l.constprop.0+0xb6>
 800b2bc:	3c57      	subs	r4, #87	@ 0x57
 800b2be:	e7d5      	b.n	800b26c <_strtoul_l.constprop.0+0x5c>
 800b2c0:	f04f 36ff 	mov.w	r6, #4294967295
 800b2c4:	e7df      	b.n	800b286 <_strtoul_l.constprop.0+0x76>
 800b2c6:	1c73      	adds	r3, r6, #1
 800b2c8:	d106      	bne.n	800b2d8 <_strtoul_l.constprop.0+0xc8>
 800b2ca:	2322      	movs	r3, #34	@ 0x22
 800b2cc:	f8ce 3000 	str.w	r3, [lr]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	b932      	cbnz	r2, 800b2e2 <_strtoul_l.constprop.0+0xd2>
 800b2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2d8:	b107      	cbz	r7, 800b2dc <_strtoul_l.constprop.0+0xcc>
 800b2da:	4240      	negs	r0, r0
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	d0f9      	beq.n	800b2d4 <_strtoul_l.constprop.0+0xc4>
 800b2e0:	b106      	cbz	r6, 800b2e4 <_strtoul_l.constprop.0+0xd4>
 800b2e2:	1e69      	subs	r1, r5, #1
 800b2e4:	6011      	str	r1, [r2, #0]
 800b2e6:	e7f5      	b.n	800b2d4 <_strtoul_l.constprop.0+0xc4>
 800b2e8:	0800be49 	.word	0x0800be49

0800b2ec <_strtoul_r>:
 800b2ec:	f7ff bf90 	b.w	800b210 <_strtoul_l.constprop.0>

0800b2f0 <fiprintf>:
 800b2f0:	b40e      	push	{r1, r2, r3}
 800b2f2:	b503      	push	{r0, r1, lr}
 800b2f4:	4601      	mov	r1, r0
 800b2f6:	ab03      	add	r3, sp, #12
 800b2f8:	4805      	ldr	r0, [pc, #20]	@ (800b310 <fiprintf+0x20>)
 800b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fe:	6800      	ldr	r0, [r0, #0]
 800b300:	9301      	str	r3, [sp, #4]
 800b302:	f000 f837 	bl	800b374 <_vfiprintf_r>
 800b306:	b002      	add	sp, #8
 800b308:	f85d eb04 	ldr.w	lr, [sp], #4
 800b30c:	b003      	add	sp, #12
 800b30e:	4770      	bx	lr
 800b310:	200001e8 	.word	0x200001e8

0800b314 <abort>:
 800b314:	b508      	push	{r3, lr}
 800b316:	2006      	movs	r0, #6
 800b318:	f000 fa00 	bl	800b71c <raise>
 800b31c:	2001      	movs	r0, #1
 800b31e:	f7f6 fa3d 	bl	800179c <_exit>

0800b322 <__sfputc_r>:
 800b322:	6893      	ldr	r3, [r2, #8]
 800b324:	3b01      	subs	r3, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	b410      	push	{r4}
 800b32a:	6093      	str	r3, [r2, #8]
 800b32c:	da08      	bge.n	800b340 <__sfputc_r+0x1e>
 800b32e:	6994      	ldr	r4, [r2, #24]
 800b330:	42a3      	cmp	r3, r4
 800b332:	db01      	blt.n	800b338 <__sfputc_r+0x16>
 800b334:	290a      	cmp	r1, #10
 800b336:	d103      	bne.n	800b340 <__sfputc_r+0x1e>
 800b338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b33c:	f000 b932 	b.w	800b5a4 <__swbuf_r>
 800b340:	6813      	ldr	r3, [r2, #0]
 800b342:	1c58      	adds	r0, r3, #1
 800b344:	6010      	str	r0, [r2, #0]
 800b346:	7019      	strb	r1, [r3, #0]
 800b348:	4608      	mov	r0, r1
 800b34a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <__sfputs_r>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	4606      	mov	r6, r0
 800b354:	460f      	mov	r7, r1
 800b356:	4614      	mov	r4, r2
 800b358:	18d5      	adds	r5, r2, r3
 800b35a:	42ac      	cmp	r4, r5
 800b35c:	d101      	bne.n	800b362 <__sfputs_r+0x12>
 800b35e:	2000      	movs	r0, #0
 800b360:	e007      	b.n	800b372 <__sfputs_r+0x22>
 800b362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b366:	463a      	mov	r2, r7
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff ffda 	bl	800b322 <__sfputc_r>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d1f3      	bne.n	800b35a <__sfputs_r+0xa>
 800b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b374 <_vfiprintf_r>:
 800b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	460d      	mov	r5, r1
 800b37a:	b09d      	sub	sp, #116	@ 0x74
 800b37c:	4614      	mov	r4, r2
 800b37e:	4698      	mov	r8, r3
 800b380:	4606      	mov	r6, r0
 800b382:	b118      	cbz	r0, 800b38c <_vfiprintf_r+0x18>
 800b384:	6a03      	ldr	r3, [r0, #32]
 800b386:	b90b      	cbnz	r3, 800b38c <_vfiprintf_r+0x18>
 800b388:	f7fd fd56 	bl	8008e38 <__sinit>
 800b38c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b38e:	07d9      	lsls	r1, r3, #31
 800b390:	d405      	bmi.n	800b39e <_vfiprintf_r+0x2a>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d402      	bmi.n	800b39e <_vfiprintf_r+0x2a>
 800b398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b39a:	f7fd fed2 	bl	8009142 <__retarget_lock_acquire_recursive>
 800b39e:	89ab      	ldrh	r3, [r5, #12]
 800b3a0:	071b      	lsls	r3, r3, #28
 800b3a2:	d501      	bpl.n	800b3a8 <_vfiprintf_r+0x34>
 800b3a4:	692b      	ldr	r3, [r5, #16]
 800b3a6:	b99b      	cbnz	r3, 800b3d0 <_vfiprintf_r+0x5c>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f000 f938 	bl	800b620 <__swsetup_r>
 800b3b0:	b170      	cbz	r0, 800b3d0 <_vfiprintf_r+0x5c>
 800b3b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3b4:	07dc      	lsls	r4, r3, #31
 800b3b6:	d504      	bpl.n	800b3c2 <_vfiprintf_r+0x4e>
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	b01d      	add	sp, #116	@ 0x74
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	89ab      	ldrh	r3, [r5, #12]
 800b3c4:	0598      	lsls	r0, r3, #22
 800b3c6:	d4f7      	bmi.n	800b3b8 <_vfiprintf_r+0x44>
 800b3c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ca:	f7fd febb 	bl	8009144 <__retarget_lock_release_recursive>
 800b3ce:	e7f3      	b.n	800b3b8 <_vfiprintf_r+0x44>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3de:	2330      	movs	r3, #48	@ 0x30
 800b3e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b590 <_vfiprintf_r+0x21c>
 800b3e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3e8:	f04f 0901 	mov.w	r9, #1
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	469a      	mov	sl, r3
 800b3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f4:	b10a      	cbz	r2, 800b3fa <_vfiprintf_r+0x86>
 800b3f6:	2a25      	cmp	r2, #37	@ 0x25
 800b3f8:	d1f9      	bne.n	800b3ee <_vfiprintf_r+0x7a>
 800b3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b3fe:	d00b      	beq.n	800b418 <_vfiprintf_r+0xa4>
 800b400:	465b      	mov	r3, fp
 800b402:	4622      	mov	r2, r4
 800b404:	4629      	mov	r1, r5
 800b406:	4630      	mov	r0, r6
 800b408:	f7ff ffa2 	bl	800b350 <__sfputs_r>
 800b40c:	3001      	adds	r0, #1
 800b40e:	f000 80a7 	beq.w	800b560 <_vfiprintf_r+0x1ec>
 800b412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b414:	445a      	add	r2, fp
 800b416:	9209      	str	r2, [sp, #36]	@ 0x24
 800b418:	f89a 3000 	ldrb.w	r3, [sl]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 809f 	beq.w	800b560 <_vfiprintf_r+0x1ec>
 800b422:	2300      	movs	r3, #0
 800b424:	f04f 32ff 	mov.w	r2, #4294967295
 800b428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b42c:	f10a 0a01 	add.w	sl, sl, #1
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	9307      	str	r3, [sp, #28]
 800b434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b438:	931a      	str	r3, [sp, #104]	@ 0x68
 800b43a:	4654      	mov	r4, sl
 800b43c:	2205      	movs	r2, #5
 800b43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b442:	4853      	ldr	r0, [pc, #332]	@ (800b590 <_vfiprintf_r+0x21c>)
 800b444:	f7f4 fee4 	bl	8000210 <memchr>
 800b448:	9a04      	ldr	r2, [sp, #16]
 800b44a:	b9d8      	cbnz	r0, 800b484 <_vfiprintf_r+0x110>
 800b44c:	06d1      	lsls	r1, r2, #27
 800b44e:	bf44      	itt	mi
 800b450:	2320      	movmi	r3, #32
 800b452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b456:	0713      	lsls	r3, r2, #28
 800b458:	bf44      	itt	mi
 800b45a:	232b      	movmi	r3, #43	@ 0x2b
 800b45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b460:	f89a 3000 	ldrb.w	r3, [sl]
 800b464:	2b2a      	cmp	r3, #42	@ 0x2a
 800b466:	d015      	beq.n	800b494 <_vfiprintf_r+0x120>
 800b468:	9a07      	ldr	r2, [sp, #28]
 800b46a:	4654      	mov	r4, sl
 800b46c:	2000      	movs	r0, #0
 800b46e:	f04f 0c0a 	mov.w	ip, #10
 800b472:	4621      	mov	r1, r4
 800b474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b478:	3b30      	subs	r3, #48	@ 0x30
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	d94b      	bls.n	800b516 <_vfiprintf_r+0x1a2>
 800b47e:	b1b0      	cbz	r0, 800b4ae <_vfiprintf_r+0x13a>
 800b480:	9207      	str	r2, [sp, #28]
 800b482:	e014      	b.n	800b4ae <_vfiprintf_r+0x13a>
 800b484:	eba0 0308 	sub.w	r3, r0, r8
 800b488:	fa09 f303 	lsl.w	r3, r9, r3
 800b48c:	4313      	orrs	r3, r2
 800b48e:	9304      	str	r3, [sp, #16]
 800b490:	46a2      	mov	sl, r4
 800b492:	e7d2      	b.n	800b43a <_vfiprintf_r+0xc6>
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	1d19      	adds	r1, r3, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	9103      	str	r1, [sp, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	bfbb      	ittet	lt
 800b4a0:	425b      	neglt	r3, r3
 800b4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4a6:	9307      	strge	r3, [sp, #28]
 800b4a8:	9307      	strlt	r3, [sp, #28]
 800b4aa:	bfb8      	it	lt
 800b4ac:	9204      	strlt	r2, [sp, #16]
 800b4ae:	7823      	ldrb	r3, [r4, #0]
 800b4b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4b2:	d10a      	bne.n	800b4ca <_vfiprintf_r+0x156>
 800b4b4:	7863      	ldrb	r3, [r4, #1]
 800b4b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4b8:	d132      	bne.n	800b520 <_vfiprintf_r+0x1ac>
 800b4ba:	9b03      	ldr	r3, [sp, #12]
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	9203      	str	r2, [sp, #12]
 800b4c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4c6:	3402      	adds	r4, #2
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5a0 <_vfiprintf_r+0x22c>
 800b4ce:	7821      	ldrb	r1, [r4, #0]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	f7f4 fe9c 	bl	8000210 <memchr>
 800b4d8:	b138      	cbz	r0, 800b4ea <_vfiprintf_r+0x176>
 800b4da:	9b04      	ldr	r3, [sp, #16]
 800b4dc:	eba0 000a 	sub.w	r0, r0, sl
 800b4e0:	2240      	movs	r2, #64	@ 0x40
 800b4e2:	4082      	lsls	r2, r0
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	3401      	adds	r4, #1
 800b4e8:	9304      	str	r3, [sp, #16]
 800b4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ee:	4829      	ldr	r0, [pc, #164]	@ (800b594 <_vfiprintf_r+0x220>)
 800b4f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4f4:	2206      	movs	r2, #6
 800b4f6:	f7f4 fe8b 	bl	8000210 <memchr>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d03f      	beq.n	800b57e <_vfiprintf_r+0x20a>
 800b4fe:	4b26      	ldr	r3, [pc, #152]	@ (800b598 <_vfiprintf_r+0x224>)
 800b500:	bb1b      	cbnz	r3, 800b54a <_vfiprintf_r+0x1d6>
 800b502:	9b03      	ldr	r3, [sp, #12]
 800b504:	3307      	adds	r3, #7
 800b506:	f023 0307 	bic.w	r3, r3, #7
 800b50a:	3308      	adds	r3, #8
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b510:	443b      	add	r3, r7
 800b512:	9309      	str	r3, [sp, #36]	@ 0x24
 800b514:	e76a      	b.n	800b3ec <_vfiprintf_r+0x78>
 800b516:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51a:	460c      	mov	r4, r1
 800b51c:	2001      	movs	r0, #1
 800b51e:	e7a8      	b.n	800b472 <_vfiprintf_r+0xfe>
 800b520:	2300      	movs	r3, #0
 800b522:	3401      	adds	r4, #1
 800b524:	9305      	str	r3, [sp, #20]
 800b526:	4619      	mov	r1, r3
 800b528:	f04f 0c0a 	mov.w	ip, #10
 800b52c:	4620      	mov	r0, r4
 800b52e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b532:	3a30      	subs	r2, #48	@ 0x30
 800b534:	2a09      	cmp	r2, #9
 800b536:	d903      	bls.n	800b540 <_vfiprintf_r+0x1cc>
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d0c6      	beq.n	800b4ca <_vfiprintf_r+0x156>
 800b53c:	9105      	str	r1, [sp, #20]
 800b53e:	e7c4      	b.n	800b4ca <_vfiprintf_r+0x156>
 800b540:	fb0c 2101 	mla	r1, ip, r1, r2
 800b544:	4604      	mov	r4, r0
 800b546:	2301      	movs	r3, #1
 800b548:	e7f0      	b.n	800b52c <_vfiprintf_r+0x1b8>
 800b54a:	ab03      	add	r3, sp, #12
 800b54c:	9300      	str	r3, [sp, #0]
 800b54e:	462a      	mov	r2, r5
 800b550:	4b12      	ldr	r3, [pc, #72]	@ (800b59c <_vfiprintf_r+0x228>)
 800b552:	a904      	add	r1, sp, #16
 800b554:	4630      	mov	r0, r6
 800b556:	f3af 8000 	nop.w
 800b55a:	4607      	mov	r7, r0
 800b55c:	1c78      	adds	r0, r7, #1
 800b55e:	d1d6      	bne.n	800b50e <_vfiprintf_r+0x19a>
 800b560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b562:	07d9      	lsls	r1, r3, #31
 800b564:	d405      	bmi.n	800b572 <_vfiprintf_r+0x1fe>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	059a      	lsls	r2, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_vfiprintf_r+0x1fe>
 800b56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b56e:	f7fd fde9 	bl	8009144 <__retarget_lock_release_recursive>
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	065b      	lsls	r3, r3, #25
 800b576:	f53f af1f 	bmi.w	800b3b8 <_vfiprintf_r+0x44>
 800b57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b57c:	e71e      	b.n	800b3bc <_vfiprintf_r+0x48>
 800b57e:	ab03      	add	r3, sp, #12
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	462a      	mov	r2, r5
 800b584:	4b05      	ldr	r3, [pc, #20]	@ (800b59c <_vfiprintf_r+0x228>)
 800b586:	a904      	add	r1, sp, #16
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff f9eb 	bl	800a964 <_printf_i>
 800b58e:	e7e4      	b.n	800b55a <_vfiprintf_r+0x1e6>
 800b590:	0800c130 	.word	0x0800c130
 800b594:	0800c13a 	.word	0x0800c13a
 800b598:	00000000 	.word	0x00000000
 800b59c:	0800b351 	.word	0x0800b351
 800b5a0:	0800c136 	.word	0x0800c136

0800b5a4 <__swbuf_r>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	460e      	mov	r6, r1
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	b118      	cbz	r0, 800b5b6 <__swbuf_r+0x12>
 800b5ae:	6a03      	ldr	r3, [r0, #32]
 800b5b0:	b90b      	cbnz	r3, 800b5b6 <__swbuf_r+0x12>
 800b5b2:	f7fd fc41 	bl	8008e38 <__sinit>
 800b5b6:	69a3      	ldr	r3, [r4, #24]
 800b5b8:	60a3      	str	r3, [r4, #8]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	071a      	lsls	r2, r3, #28
 800b5be:	d501      	bpl.n	800b5c4 <__swbuf_r+0x20>
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	b943      	cbnz	r3, 800b5d6 <__swbuf_r+0x32>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f000 f82a 	bl	800b620 <__swsetup_r>
 800b5cc:	b118      	cbz	r0, 800b5d6 <__swbuf_r+0x32>
 800b5ce:	f04f 37ff 	mov.w	r7, #4294967295
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	6922      	ldr	r2, [r4, #16]
 800b5da:	1a98      	subs	r0, r3, r2
 800b5dc:	6963      	ldr	r3, [r4, #20]
 800b5de:	b2f6      	uxtb	r6, r6
 800b5e0:	4283      	cmp	r3, r0
 800b5e2:	4637      	mov	r7, r6
 800b5e4:	dc05      	bgt.n	800b5f2 <__swbuf_r+0x4e>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f7ff fcad 	bl	800af48 <_fflush_r>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d1ed      	bne.n	800b5ce <__swbuf_r+0x2a>
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	60a3      	str	r3, [r4, #8]
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	6022      	str	r2, [r4, #0]
 800b5fe:	701e      	strb	r6, [r3, #0]
 800b600:	6962      	ldr	r2, [r4, #20]
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	429a      	cmp	r2, r3
 800b606:	d004      	beq.n	800b612 <__swbuf_r+0x6e>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	07db      	lsls	r3, r3, #31
 800b60c:	d5e1      	bpl.n	800b5d2 <__swbuf_r+0x2e>
 800b60e:	2e0a      	cmp	r6, #10
 800b610:	d1df      	bne.n	800b5d2 <__swbuf_r+0x2e>
 800b612:	4621      	mov	r1, r4
 800b614:	4628      	mov	r0, r5
 800b616:	f7ff fc97 	bl	800af48 <_fflush_r>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d0d9      	beq.n	800b5d2 <__swbuf_r+0x2e>
 800b61e:	e7d6      	b.n	800b5ce <__swbuf_r+0x2a>

0800b620 <__swsetup_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4b29      	ldr	r3, [pc, #164]	@ (800b6c8 <__swsetup_r+0xa8>)
 800b624:	4605      	mov	r5, r0
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	460c      	mov	r4, r1
 800b62a:	b118      	cbz	r0, 800b634 <__swsetup_r+0x14>
 800b62c:	6a03      	ldr	r3, [r0, #32]
 800b62e:	b90b      	cbnz	r3, 800b634 <__swsetup_r+0x14>
 800b630:	f7fd fc02 	bl	8008e38 <__sinit>
 800b634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b638:	0719      	lsls	r1, r3, #28
 800b63a:	d422      	bmi.n	800b682 <__swsetup_r+0x62>
 800b63c:	06da      	lsls	r2, r3, #27
 800b63e:	d407      	bmi.n	800b650 <__swsetup_r+0x30>
 800b640:	2209      	movs	r2, #9
 800b642:	602a      	str	r2, [r5, #0]
 800b644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b648:	81a3      	strh	r3, [r4, #12]
 800b64a:	f04f 30ff 	mov.w	r0, #4294967295
 800b64e:	e033      	b.n	800b6b8 <__swsetup_r+0x98>
 800b650:	0758      	lsls	r0, r3, #29
 800b652:	d512      	bpl.n	800b67a <__swsetup_r+0x5a>
 800b654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b656:	b141      	cbz	r1, 800b66a <__swsetup_r+0x4a>
 800b658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b65c:	4299      	cmp	r1, r3
 800b65e:	d002      	beq.n	800b666 <__swsetup_r+0x46>
 800b660:	4628      	mov	r0, r5
 800b662:	f7fd fd91 	bl	8009188 <_free_r>
 800b666:	2300      	movs	r3, #0
 800b668:	6363      	str	r3, [r4, #52]	@ 0x34
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	2300      	movs	r3, #0
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f043 0308 	orr.w	r3, r3, #8
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	b94b      	cbnz	r3, 800b69a <__swsetup_r+0x7a>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b690:	d003      	beq.n	800b69a <__swsetup_r+0x7a>
 800b692:	4621      	mov	r1, r4
 800b694:	4628      	mov	r0, r5
 800b696:	f000 f883 	bl	800b7a0 <__smakebuf_r>
 800b69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69e:	f013 0201 	ands.w	r2, r3, #1
 800b6a2:	d00a      	beq.n	800b6ba <__swsetup_r+0x9a>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	60a2      	str	r2, [r4, #8]
 800b6a8:	6962      	ldr	r2, [r4, #20]
 800b6aa:	4252      	negs	r2, r2
 800b6ac:	61a2      	str	r2, [r4, #24]
 800b6ae:	6922      	ldr	r2, [r4, #16]
 800b6b0:	b942      	cbnz	r2, 800b6c4 <__swsetup_r+0xa4>
 800b6b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6b6:	d1c5      	bne.n	800b644 <__swsetup_r+0x24>
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	0799      	lsls	r1, r3, #30
 800b6bc:	bf58      	it	pl
 800b6be:	6962      	ldrpl	r2, [r4, #20]
 800b6c0:	60a2      	str	r2, [r4, #8]
 800b6c2:	e7f4      	b.n	800b6ae <__swsetup_r+0x8e>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	e7f7      	b.n	800b6b8 <__swsetup_r+0x98>
 800b6c8:	200001e8 	.word	0x200001e8

0800b6cc <_raise_r>:
 800b6cc:	291f      	cmp	r1, #31
 800b6ce:	b538      	push	{r3, r4, r5, lr}
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	d904      	bls.n	800b6e0 <_raise_r+0x14>
 800b6d6:	2316      	movs	r3, #22
 800b6d8:	6003      	str	r3, [r0, #0]
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6e2:	b112      	cbz	r2, 800b6ea <_raise_r+0x1e>
 800b6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6e8:	b94b      	cbnz	r3, 800b6fe <_raise_r+0x32>
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f000 f830 	bl	800b750 <_getpid_r>
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fa:	f000 b817 	b.w	800b72c <_kill_r>
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d00a      	beq.n	800b718 <_raise_r+0x4c>
 800b702:	1c59      	adds	r1, r3, #1
 800b704:	d103      	bne.n	800b70e <_raise_r+0x42>
 800b706:	2316      	movs	r3, #22
 800b708:	6003      	str	r3, [r0, #0]
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7e7      	b.n	800b6de <_raise_r+0x12>
 800b70e:	2100      	movs	r1, #0
 800b710:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b714:	4620      	mov	r0, r4
 800b716:	4798      	blx	r3
 800b718:	2000      	movs	r0, #0
 800b71a:	e7e0      	b.n	800b6de <_raise_r+0x12>

0800b71c <raise>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	@ (800b728 <raise+0xc>)
 800b71e:	4601      	mov	r1, r0
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f7ff bfd3 	b.w	800b6cc <_raise_r>
 800b726:	bf00      	nop
 800b728:	200001e8 	.word	0x200001e8

0800b72c <_kill_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	@ (800b74c <_kill_r+0x20>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	4611      	mov	r1, r2
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	f7f6 f81f 	bl	800177c <_kill>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d102      	bne.n	800b748 <_kill_r+0x1c>
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	b103      	cbz	r3, 800b748 <_kill_r+0x1c>
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	bd38      	pop	{r3, r4, r5, pc}
 800b74a:	bf00      	nop
 800b74c:	20001bec 	.word	0x20001bec

0800b750 <_getpid_r>:
 800b750:	f7f6 b80c 	b.w	800176c <_getpid>

0800b754 <__swhatbuf_r>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	460c      	mov	r4, r1
 800b758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75c:	2900      	cmp	r1, #0
 800b75e:	b096      	sub	sp, #88	@ 0x58
 800b760:	4615      	mov	r5, r2
 800b762:	461e      	mov	r6, r3
 800b764:	da0d      	bge.n	800b782 <__swhatbuf_r+0x2e>
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b76c:	f04f 0100 	mov.w	r1, #0
 800b770:	bf14      	ite	ne
 800b772:	2340      	movne	r3, #64	@ 0x40
 800b774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b778:	2000      	movs	r0, #0
 800b77a:	6031      	str	r1, [r6, #0]
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	b016      	add	sp, #88	@ 0x58
 800b780:	bd70      	pop	{r4, r5, r6, pc}
 800b782:	466a      	mov	r2, sp
 800b784:	f000 f848 	bl	800b818 <_fstat_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	dbec      	blt.n	800b766 <__swhatbuf_r+0x12>
 800b78c:	9901      	ldr	r1, [sp, #4]
 800b78e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b796:	4259      	negs	r1, r3
 800b798:	4159      	adcs	r1, r3
 800b79a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b79e:	e7eb      	b.n	800b778 <__swhatbuf_r+0x24>

0800b7a0 <__smakebuf_r>:
 800b7a0:	898b      	ldrh	r3, [r1, #12]
 800b7a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7a4:	079d      	lsls	r5, r3, #30
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	d507      	bpl.n	800b7bc <__smakebuf_r+0x1c>
 800b7ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	6123      	str	r3, [r4, #16]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	6163      	str	r3, [r4, #20]
 800b7b8:	b003      	add	sp, #12
 800b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7bc:	ab01      	add	r3, sp, #4
 800b7be:	466a      	mov	r2, sp
 800b7c0:	f7ff ffc8 	bl	800b754 <__swhatbuf_r>
 800b7c4:	9f00      	ldr	r7, [sp, #0]
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7fc fbd6 	bl	8007f7c <_malloc_r>
 800b7d0:	b948      	cbnz	r0, 800b7e6 <__smakebuf_r+0x46>
 800b7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d6:	059a      	lsls	r2, r3, #22
 800b7d8:	d4ee      	bmi.n	800b7b8 <__smakebuf_r+0x18>
 800b7da:	f023 0303 	bic.w	r3, r3, #3
 800b7de:	f043 0302 	orr.w	r3, r3, #2
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	e7e2      	b.n	800b7ac <__smakebuf_r+0xc>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	6020      	str	r0, [r4, #0]
 800b7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7f6:	b15b      	cbz	r3, 800b810 <__smakebuf_r+0x70>
 800b7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f000 f81d 	bl	800b83c <_isatty_r>
 800b802:	b128      	cbz	r0, 800b810 <__smakebuf_r+0x70>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f023 0303 	bic.w	r3, r3, #3
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	431d      	orrs	r5, r3
 800b814:	81a5      	strh	r5, [r4, #12]
 800b816:	e7cf      	b.n	800b7b8 <__smakebuf_r+0x18>

0800b818 <_fstat_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d07      	ldr	r5, [pc, #28]	@ (800b838 <_fstat_r+0x20>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	f7f6 f809 	bl	800183c <_fstat>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d102      	bne.n	800b834 <_fstat_r+0x1c>
 800b82e:	682b      	ldr	r3, [r5, #0]
 800b830:	b103      	cbz	r3, 800b834 <_fstat_r+0x1c>
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	bf00      	nop
 800b838:	20001bec 	.word	0x20001bec

0800b83c <_isatty_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4d06      	ldr	r5, [pc, #24]	@ (800b858 <_isatty_r+0x1c>)
 800b840:	2300      	movs	r3, #0
 800b842:	4604      	mov	r4, r0
 800b844:	4608      	mov	r0, r1
 800b846:	602b      	str	r3, [r5, #0]
 800b848:	f7f6 f808 	bl	800185c <_isatty>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_isatty_r+0x1a>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_isatty_r+0x1a>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20001bec 	.word	0x20001bec

0800b85c <_init>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr

0800b868 <_fini>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	bf00      	nop
 800b86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86e:	bc08      	pop	{r3}
 800b870:	469e      	mov	lr, r3
 800b872:	4770      	bx	lr
